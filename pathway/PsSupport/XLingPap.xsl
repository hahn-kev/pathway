<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet  
    version="2.0" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns="http://www.w3.org/1999/xhtml">
    <xsl:output
        encoding="UTF-8"  
        method="xhtml"
        media-type="text/xhtml" 
        indent="yes"/>
    <!-- ===========================================================
      Version of this stylesheet
      =========================================================== -->
    <xsl:variable name="sVersion">1.10.1</xsl:variable>
    <!-- ===========================================================
      Keys
      =========================================================== -->
    <xsl:key name="LanguageID" match="//language" use="@id"/>
    <xsl:key name="TypeID" match="//type" use="@id"/>
    <!-- ===========================================================
      Global variables
      =========================================================== -->
    <xsl:variable name="sExampleCellPadding">padding-left: .25em</xsl:variable>
    <xsl:variable name="sLdquo">&#8220;</xsl:variable>
    <xsl:variable name="sRdquo">&#8221;</xsl:variable>
    <!-- ===========================================================
      MAIN BODY
      =========================================================== -->
    <xsl:template match="/lingPaper">
        <html>
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
                <xsl:comment> generated by XLingPap1.xsl Version <xsl:value-of select="$sVersion"/>&#x20;</xsl:comment>
                <title>
                    <xsl:variable name="sTitle">
                        <xsl:apply-templates select="frontMatter/title"/>
                    </xsl:variable>
                    <xsl:value-of select="$sTitle"/>
                </title>
                <style type="text/css">
         .interblock { display: -moz-inline-box; display: inline-block; vertical-align: top; } 
        </style>
            </head>
            <body>
                <xsl:apply-templates/>
            </body>
        </html>
    </xsl:template>
    <!-- ===========================================================
      FRONTMATTER
      =========================================================== -->
    <!--
      title
      -->
    <xsl:template match="title">
        <center>
            <b>
                <big>
                    <big>
                        <big>
                            <!--              <xsl:value-of select="."/> -->
                            <xsl:apply-templates/>
                        </big>
                    </big>
                </big>
            </b>
        </center>
    </xsl:template>
    <xsl:template match="subtitle">
        <center>
            <b>
                <big>
                    <big>
                        <xsl:apply-templates/>
                    </big>
                </big>
            </b>
        </center>
    </xsl:template>
    <!--
      author
      -->
    <xsl:template match="author">
        <xsl:if test="position()=1">
            <br/>
        </xsl:if>
        <center>
            <i>
                <xsl:value-of select="."/>
            </i>
        </center>
    </xsl:template>
    <!--
      affiliation
      -->
    <xsl:template match="affiliation">
        <xsl:if test="position()=1">
            <br/>
        </xsl:if>
        <center>
            <i>
                <xsl:value-of select="."/>
            </i>
        </center>
    </xsl:template>
    <!--
      date or presentedAt
      -->
    <xsl:template match="date | presentedAt">
        <br/>
        <center>
            <small>
                <xsl:apply-templates/>
            </small>
        </center>
    </xsl:template>
    <!--
      version
      -->
    <xsl:template match="version">
        <center>
            <small>Version: <xsl:value-of select="."/>
            </small>
        </center>
    </xsl:template>
    <!--
      contents
      -->
    <xsl:template match="contents">
        <hr/>
        <div>
            <center>
                <big>
                    <big>
                        <b>
                            <xsl:call-template name="OutputContentsLabel"/>
                        </b>
                    </big>
                </big>
            </center>
            <xsl:variable name="nLevel">
                <xsl:value-of select="number(@showLevel)"/>
            </xsl:variable>
            <ul>
                <xsl:if test="//acknowledgements">
                    <li>
                        <a href="#rXLingPapAcknowledgements">
                            <xsl:call-template name="OutputAcknowledgementsLabel"/>
                        </a>
                    </li>
                </xsl:if>
                <xsl:if test="//abstract">
                    <li>
                        <a href="#rXLingPapAbstract">
                            <xsl:call-template name="OutputAbstractLabel"/>
                        </a>
                    </li>
                </xsl:if>
                <xsl:if test="//part">
                    <xsl:for-each select="//part">
                        <xsl:if test="position()=1">
                            <xsl:for-each select="preceding-sibling::*[name()='chapterBeforePart']">
                                <xsl:call-template name="OutputAllChapterTOC">
                                    <xsl:with-param name="nLevel">
                                        <xsl:value-of select="$nLevel"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:for-each>
                        </xsl:if>
                        <li>
                            <xsl:element name="a">
                                <xsl:attribute name="href">#<xsl:value-of select="@id"/>
                                </xsl:attribute>
                                <xsl:apply-templates select="." mode="numberPart"/>
                                <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
                                <xsl:apply-templates select="secTitle"/>
                            </xsl:element>
                        </li>
                        <ul>
                            <xsl:for-each select="chapter">
                                <xsl:call-template name="OutputAllChapterTOC">
                                    <xsl:with-param name="nLevel">
                                        <xsl:value-of select="$nLevel"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:for-each>
                        </ul>
                    </xsl:for-each>
                </xsl:if>
                <!-- part -->
                <xsl:if test="not(//part) and //chapter">
                    <xsl:for-each select="//chapter">
                        <li>
                            <xsl:element name="a">
                                <xsl:attribute name="href">#<xsl:value-of select="@id"/>
                                </xsl:attribute>
                                <xsl:apply-templates select="." mode="numberChapter"/>
                                <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
                                <xsl:apply-templates select="secTitle"/>
                            </xsl:element>
                            <ul>
                                <xsl:call-template name="OutputAllSectionTOC">
                                    <xsl:with-param name="nLevel">
                                        <xsl:value-of select="$nLevel"/>
                                    </xsl:with-param>
                                    <xsl:with-param name="nodesSection1" select="section1"/>
                                </xsl:call-template>
                            </ul>
                        </li>
                    </xsl:for-each>
                </xsl:if>
                <!-- chapter -->
                <xsl:if test="not(//part) and not(//chapter)">
                    <xsl:call-template name="OutputAllSectionTOC">
                        <xsl:with-param name="nLevel">
                            <xsl:value-of select="$nLevel"/>
                        </xsl:with-param>
                        <xsl:with-param name="nodesSection1" select="//section1[not(parent::appendix)]"/>
                    </xsl:call-template>
                </xsl:if>
                <xsl:for-each select="//appendix">
                    <li>
                        <xsl:element name="a">
                            <xsl:attribute name="href">#<xsl:value-of select="@id"/>
                            </xsl:attribute>
                            <xsl:apply-templates select="." mode="numberAppendix"/>
                            <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
                            <xsl:apply-templates select="secTitle"/>
                        </xsl:element>
                        <xsl:call-template name="OutputAllSectionTOC">
                            <xsl:with-param name="nLevel">
                                <xsl:value-of select="$nLevel"/>
                            </xsl:with-param>
                            <xsl:with-param name="nodesSection1" select="section1"/>
                        </xsl:call-template>
                    </li>
                </xsl:for-each>
                <xsl:if test="//endnote">
                    <li>
                        <a href="#rXLingPapEndnotes">
                            <xsl:call-template name="OutputEndnotesLabel"/>
                        </a>
                    </li>
                </xsl:if>
                <xsl:if test="//references">
                    <li>
                        <a href="#rXLingPapReferences">
                            <xsl:call-template name="OutputReferencesLabel"/>
                        </a>
                    </li>
                </xsl:if>
            </ul>
        </div>
    </xsl:template>
    <!--
      abstract and acknowledgements
      -->
    <xsl:template match="abstract | acknowledgements">
        <br/>
        <xsl:if test="not(name(preceding-sibling::*) = 'contents')">
            <hr/>
        </xsl:if>
        <center>
            <b>
                <big>
                    <big>
                        <xsl:choose>
                            <xsl:when test="name(.)='abstract'">
                                <a name="rXLingPapAbstract">
                                    <xsl:call-template name="OutputAbstractLabel"/>
                                </a>
                            </xsl:when>
                            <xsl:otherwise>
                                <a name="rXLingPapAcknowledgements">
                                    <xsl:call-template name="OutputAcknowledgementsLabel"/>
                                </a>
                            </xsl:otherwise>
                        </xsl:choose>
                    </big>
                </big>
            </b>
        </center>
        <div style="margin-left: 0.5in; margin-right: 0.5in">
            <xsl:apply-templates/>
        </div>
        <xsl:if test="not(//part)">
            <hr/>
        </xsl:if>
    </xsl:template>
    <!-- ===========================================================
      PARTS, CHAPTERS, SECTIONS, and APPENDICES
      =========================================================== -->
    <!--
      Part
      -->
    <xsl:template match="part">
        <hr size="3"/>
        <p>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <center>
                <big>
                    <big>
                        <big>
                            <big>
                                <big>
                                    <b>
                                        <xsl:element name="a">
                                            <xsl:attribute name="name">
                                                <xsl:value-of select="@id"/>
                                            </xsl:attribute>
                                            <xsl:apply-templates select="." mode="numberPart"/>
                                            <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
                                            <xsl:apply-templates select="secTitle"/>
                                        </xsl:element>
                                    </b>
                                </big>
                            </big>
                        </big>
                    </big>
                </big>
            </center>
        </p>
        <hr size="3"/>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <!--
      Chapter
      -->
    <xsl:template match="chapter | chapterBeforePart">
        <xsl:call-template name="OutputChapTitle">
            <xsl:with-param name="sNumber">
                <xsl:call-template name="OutputChapterNumber"/>
            </xsl:with-param>
            <xsl:with-param name="sTitle">
                <xsl:apply-templates select="secTitle"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <!--
      Sections
      -->
    <xsl:template match="section1">
        <h1>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:call-template name="OutputSection"/>
        </h1>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <xsl:template match="section2">
        <h2>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:call-template name="OutputSection"/>
        </h2>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <xsl:template match="section3">
        <h3>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:call-template name="OutputSection"/>
        </h3>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <xsl:template match="section4">
        <h4>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:call-template name="OutputSection"/>
        </h4>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <xsl:template match="section5">
        <h5 style="font-size:100%">
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:call-template name="OutputSection"/>
        </h5>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <xsl:template match="section6">
        <h6 style="font-size:100%">
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:call-template name="OutputSection"/>
        </h6>
        <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
    </xsl:template>
    <!--
      Appendix
      -->
    <xsl:template match="appendix">
        <hr size="3"/>
        <xsl:choose>
            <xsl:when test="//chapter">
                <xsl:call-template name="OutputChapTitle">
                    <xsl:with-param name="sNumber">
                        <xsl:apply-templates select="." mode="numberAppendix"/>
                    </xsl:with-param>
                    <xsl:with-param name="sTitle">
                        <xsl:apply-templates select="secTitle"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
            </xsl:when>
            <xsl:otherwise>
                <h1>
                    <xsl:attribute name="style">
                        <xsl:call-template name="DoType"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="numberAppendix"/>
                    <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
                    <xsl:call-template name="OutputSection"/>
                </h1>
                <xsl:apply-templates select="child::node()[name()!='secTitle']"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--
      secTitle
      -->
    <xsl:template match="secTitle">
        <xsl:apply-templates/>
    </xsl:template>
    <!--
      sectionRef
      -->
    <xsl:template match="sectionRef">
        <xsl:element name="a">
            <xsl:attribute name="href">#<xsl:value-of select="@sec"/>
            </xsl:attribute>
            <xsl:apply-templates select="id(@sec)" mode="number"/>
        </xsl:element>
    </xsl:template>
    <!--
      appendixRef
      -->
    <xsl:template match="appendixRef">
        <xsl:element name="a">
            <xsl:attribute name="href">#<xsl:value-of select="@app"/>
            </xsl:attribute>
            <xsl:apply-templates select="id(@app)" mode="numberAppendix"/>
        </xsl:element>
    </xsl:template>
    <!--
      genericRef
      -->
    <xsl:template match="genericRef">
        <xsl:element name="a">
            <xsl:attribute name="href">#<xsl:value-of select="@gref"/>
            </xsl:attribute>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <!--
      link
      -->
    <xsl:template match="link">
        <xsl:element name="a">
            <xsl:attribute name="href">
                <xsl:value-of select="@href"/>
            </xsl:attribute>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <!-- ===========================================================
      PARAGRAPH
      =========================================================== -->
    <xsl:template match="p | pc">
        <!--    <xsl:if test="parent::endnote and not(position()=1)">
      <tr>
        <td/>
        <td>
          <p>
            <xsl:apply-templates/>
          </p>
        </td>
      </tr>
    </xsl:if>
    <xsl:if test="not(parent::endnote) or position()=1">
    -->
        <p>
            <xsl:if test="name(.)='pc'">
                <xsl:attribute name="class">pc</xsl:attribute>
            </xsl:if>
            <xsl:apply-templates/>
        </p>
        <!--    </xsl:if> -->
    </xsl:template>
    <!-- ===========================================================
      QUOTES
      =========================================================== -->
    <xsl:template match="q">"<xsl:apply-templates/>"</xsl:template>
    <xsl:template match="blockquote">
        <div style="margin-left:.5in;margin-right:.5in">
            <xsl:apply-templates/>
        </div>
    </xsl:template>
    <!-- ===========================================================
      LISTS
      =========================================================== -->
    <xsl:template match="ol">
        <xsl:variable name="NestingLevel">
            <xsl:value-of select="count(ancestor::ol)"/>
        </xsl:variable>
        <xsl:element name="ol">
            <xsl:attribute name="style">
                <xsl:text>list-style-type:</xsl:text>
                <xsl:choose>
                    <xsl:when test="($NestingLevel mod 3)=0">
                        <xsl:text>decimal</xsl:text>
                    </xsl:when>
                    <xsl:when test="($NestingLevel mod 3)=1">
                        <xsl:text>lower-alpha</xsl:text>
                    </xsl:when>
                    <xsl:when test="($NestingLevel mod 3)=2">
                        <xsl:text>lower-roman</xsl:text>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>; </xsl:text>
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <xsl:template match="ul">
        <ul>
            <xsl:apply-templates/>
        </ul>
    </xsl:template>
    <xsl:template match="li">
        <li>
            <xsl:apply-templates/>
        </li>
    </xsl:template>
    <xsl:template match="dl">
        <dl>
            <xsl:apply-templates/>
        </dl>
    </xsl:template>
    <xsl:template match="dt">
        <dt>
            <xsl:apply-templates/>
        </dt>
    </xsl:template>
    <xsl:template match="dd">
        <dd>
            <xsl:apply-templates/>
        </dd>
    </xsl:template>
    <!-- ===========================================================
      EXAMPLES
      =========================================================== -->
    <xsl:template match="example">
        <div style="margin-left: 0.25in; margin-right: 0.25in">
            <table>
                <tr>
                    <td valign="top">
                        <xsl:element name="a">
                            <xsl:attribute name="name">
                                <xsl:value-of select="@num"/>
                            </xsl:attribute>
                            <xsl:call-template name="exampleNumber"/>
                        </xsl:element>
                    </td>
                    <td>
                        <xsl:variable name="myFirstChild" select="child::*[position()=1]"/>
                        <xsl:choose>
                            <xsl:when test="substring(name($myFirstChild), 1, 4)='list'">
                                <table cellpadding="0pt" cellspacing="0pt">
                                    <xsl:apply-templates/>
                                </table>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:apply-templates/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </td>
                </tr>
            </table>
        </div>
    </xsl:template>
    <!--
      word
      -->
    <xsl:template match="word">
        <table cellpadding="0pt" cellspacing="0pt">
            <tr>
                <xsl:for-each select="(langData | gloss)">
                    <td>
                        <xsl:apply-templates select="."/>
                    </td>
                </xsl:for-each>
            </tr>
        </table>
    </xsl:template>
    <!--
      listWord
      -->
    <xsl:template match="listWord">
        <!--    <table> -->
        <tr>
            <td>
                <xsl:element name="a">
                    <xsl:attribute name="name">
                        <xsl:value-of select="@letter"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="letter"/>.</xsl:element>
            </td>
            <xsl:for-each select="(langData | gloss)">
                <td>
                    <xsl:attribute name="style">
                        <xsl:value-of select="$sExampleCellPadding"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="."/>
                </td>
            </xsl:for-each>
        </tr>
        <!--    </table> -->
    </xsl:template>
    <!--
      single
      -->
    <xsl:template match="single">
        <table cellpadding="0pt" cellspacing="0pt">
            <tr>
                <td>
                    <xsl:apply-templates/>
                </td>
            </tr>
        </table>
    </xsl:template>
    <!--
      listSingle
      -->
    <xsl:template match="listSingle">
        <!--        <table cellpadding="0pt" cellspacing="0pt"> -->
        <tr>
            <td valign="top">
                <xsl:element name="a">
                    <xsl:attribute name="name">
                        <xsl:value-of select="@letter"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="letter"/>.</xsl:element>
            </td>
            <xsl:for-each select="(langData | gloss)">
                <td>
                    <xsl:attribute name="style">
                        <xsl:value-of select="$sExampleCellPadding"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="."/>
                </td>
            </xsl:for-each>
        </tr>
        <!--        </table> -->
    </xsl:template>
    <!--
      interlinear
      -->
    <xsl:template match="interlinear">
        <xsl:choose>
            <xsl:when test="lineSet">
                <xsl:for-each select="lineSet | conflation">
                    <xsl:apply-templates/>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--
      lineGroup
      -->
    <xsl:template match="lineGroup">
        <table cellpadding="0pt" cellspacing="0pt">
            <xsl:if test="name(../..)='interlinear' or name(../..)='listInterlinear'">
                <xsl:attribute name="style">
                    <xsl:text>margin-left: 0.1in</xsl:text>
                </xsl:attribute>
            </xsl:if>
            <xsl:apply-templates/>
        </table>
    </xsl:template>
    <!--
      line
      -->
    <xsl:template match="line">
        <!--    <tr style="line-height:87.5%"> -->
        <tr>
            <xsl:choose>
                <xsl:when test="wrd">
                    <xsl:for-each select="wrd">
                        <xsl:element name="td">
                            <xsl:attribute name="style">
                                <xsl:call-template name="OutputFontAttributes">
                                    <xsl:with-param name="language" select="key('LanguageID',@lang)"/>
                                </xsl:call-template>
                                <xsl:value-of select="$sExampleCellPadding"/>
                            </xsl:attribute>
                            <xsl:apply-templates/>
                        </xsl:element>
                    </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:if test="id(parent::lineGroup/line[1]/langData[1]/@lang)/@rtl='yes'">
                        <xsl:attribute name="align">right</xsl:attribute>
                    </xsl:if>
                    <xsl:variable name="language">
                        <xsl:if test="langData">
                            <xsl:value-of select="langData/@lang"/>
                        </xsl:if>
                        <xsl:if test="gloss">
                            <xsl:value-of select="gloss/@lang"/>
                        </xsl:if>
                    </xsl:variable>
                    <xsl:variable name="sContents">
                        <xsl:apply-templates/>
                    </xsl:variable>
                    <xsl:variable name="sOrientedContents">
                        <xsl:choose>
                            <xsl:when test="langData and id(langData/@lang)/@rtl='yes'">
                                <!-- flip order, left to right -->
                                <xsl:call-template name="ReverseContents">
                                    <xsl:with-param name="sList" select="$sContents"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$sContents"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:call-template name="OutputTableCells">
                        <xsl:with-param name="sList" select="$sOrientedContents"/>
                        <xsl:with-param name="language" select="$language"/>
                    </xsl:call-template>
                </xsl:otherwise>
            </xsl:choose>
        </tr>
    </xsl:template>
    <!--
      conflatedLine
      -->
    <xsl:template match="conflatedLine">
        <tr style="line-height:87.5%">
            <td valign="top">
                <xsl:if test="name(..)='interlinear' and position()=1">
                    <xsl:call-template name="OutputExampleNumber"/>
                </xsl:if>
            </td>
            <xsl:apply-templates/>
        </tr>
    </xsl:template>
    <!--
      lineSet
      -->
    <xsl:template match="lineSet">
        <xsl:choose>
            <xsl:when test="name(..)='conflation'">
                <tr>
                    <xsl:if test="@letter">
                        <td valign="top">
                            <xsl:element name="a">
                                <xsl:attribute name="name">
                                    <xsl:value-of select="@letter"/>
                                </xsl:attribute>
                                <xsl:apply-templates select="." mode="letter"/>.</xsl:element>
                        </td>
                    </xsl:if>
                    <td>
                        <table>
                            <xsl:apply-templates/>
                        </table>
                    </td>
                </tr>
            </xsl:when>
            <xsl:otherwise>
                <td>
                    <table>
                        <xsl:apply-templates/>
                    </table>
                </td>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--
      conflation
      -->
    <xsl:template match="conflation">
        <xsl:variable name="sCount" select="count(descendant::*[lineSetRow])"/>
        <!--  sCount = <xsl:value-of select="$sCount"/> -->
        <td>
            <img align="middle">
                <xsl:attribute name="src">
                    <xsl:text>LeftBrace</xsl:text>
                    <xsl:value-of select="$sCount"/>
                    <xsl:text>.png</xsl:text>
                </xsl:attribute>
            </img>
        </td>
        <td>
            <table>
                <xsl:apply-templates/>
            </table>
        </td>
        <td>
            <img align="middle">
                <xsl:attribute name="src">
                    <xsl:text>RightBrace</xsl:text>
                    <xsl:value-of select="$sCount"/>
                    <xsl:text>.png</xsl:text>
                </xsl:attribute>
            </img>
        </td>
    </xsl:template>
    <!--
      lineSetRow
      -->
    <xsl:template match="lineSetRow">
        <tr style="line-height:87.5%">
            <xsl:for-each select="wrd">
                <xsl:element name="td">
                    <xsl:attribute name="class">
                        <xsl:value-of select="@lang"/>
                    </xsl:attribute>
                    <xsl:apply-templates/>
                </xsl:element>
            </xsl:for-each>
        </tr>
    </xsl:template>
    <!--
      free
      -->
    <xsl:template match="free">
        <table>
            <xsl:variable name="sGrandParent">
                <xsl:value-of select="name(../..)"/>
            </xsl:variable>
            <xsl:if test="preceding-sibling::free[position()=1] or $sGrandParent='interlinear' or $sGrandParent='listInterlinear'">
                <xsl:attribute name="style">
                    <xsl:text>margin-left: 0.1in</xsl:text>
                </xsl:attribute>
            </xsl:if>
            <!-- ### -->
            <tr style="line-height:125%">
                <xsl:element name="td">
                    <xsl:attribute name="colspan">30</xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:call-template name="OutputFontAttributes">
                            <xsl:with-param name="language" select="key('LanguageID',gloss/@lang)"/>
                        </xsl:call-template>
                    </xsl:attribute>
                    <xsl:apply-templates/>
                </xsl:element>
            </tr>
        </table>
    </xsl:template>
    <!--
      listInterlinear
      -->
    <xsl:template match="listInterlinear">
        <table cellpadding="0pt" cellspacing="0pt">
            <tr>
                <td valign="top">
                    <xsl:element name="a">
                        <xsl:attribute name="name">
                            <xsl:value-of select="@letter"/>
                        </xsl:attribute>
                        <xsl:apply-templates select="." mode="letter"/>.</xsl:element>
                </td>
                <td>
                    <xsl:apply-templates/>
                </td>
            </tr>
        </table>
    </xsl:template>
    <!--
      chart
      -->
    <xsl:template match="chart">
        <xsl:if test="name(..)='example'">
            <table>
                <tr>
                    <td>
                        <xsl:choose>
                            <xsl:when test="@type">
                                <xsl:element name="div">
                                    <xsl:attribute name="style">
                                        <xsl:call-template name="DoType"/>
                                    </xsl:attribute>
                                    <xsl:choose>
                                        <xsl:when test="child::ol | child::ul | child::dl | child::img | child::object | child::br">
                                            <xsl:apply-templates/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="." disable-output-escaping="yes"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:apply-templates/>
                                <!--                <xsl:value-of select="." disable-output-escaping="yes"/> -->
                            </xsl:otherwise>
                        </xsl:choose>
                    </td>
                </tr>
            </table>
        </xsl:if>
        <xsl:if test="name(..)!='example'">
            <xsl:if test="parent::endnote and not(position()=1)">
                <table>
                    <tr>
                        <tr>
                            <td/>
                            <td>
                                <div>
                                    <xsl:choose>
                                        <xsl:when test="child::ol | child::ul | child::dl | child::img | child::object | child::br">
                                            <xsl:apply-templates/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="." disable-output-escaping="yes"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </div>
                            </td>
                        </tr>
                    </tr>
                </table>
            </xsl:if>
            <xsl:if test="not(parent::endnote) or position()=1">
                <div>
                    <xsl:attribute name="style">
                        <xsl:call-template name="DoType"/>
                    </xsl:attribute>
                    <xsl:apply-templates/>
                </div>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <!--
      tree
      -->
    <xsl:template match="tree">
        <xsl:choose>
            <xsl:when test="img">
                <xsl:choose>
                    <xsl:when test="name(..)='example'">
                        <table>
                            <tr>
                                <td valign="top">
                                    <xsl:apply-templates/>
                                </td>
                            </tr>
                        </table>
                    </xsl:when>
                    <xsl:otherwise>
                        <p style="margin-left: 0.25in">
                            <xsl:apply-templates/>
                        </p>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <div>
                    <xsl:value-of select="." disable-output-escaping="yes"/>
                </div>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--
      table
      -->
    <xsl:template match="table">
        <xsl:choose>
            <xsl:when test="name(..)='example'">
                <td>
                    <xsl:attribute name="style">
                        <xsl:value-of select="$sExampleCellPadding"/>
                    </xsl:attribute>
                    <xsl:call-template name="OutputTable"/>
                </td>
            </xsl:when>
            <xsl:otherwise>
                <div>
                    <xsl:call-template name="OutputTable"/>
                </div>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--
          headerRow for a table
      -->
    <xsl:template match="headerRow">
        <tr>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
                <xsl:if test="@direction">
                    <xsl:text>direction:</xsl:text>
                    <xsl:value-of select="@direction"/>
                    <xsl:text>; </xsl:text>
                </xsl:if>
            </xsl:attribute>
            <xsl:apply-templates/>
        </tr>
    </xsl:template>
    <!--
          headerCol for a table
      -->
    <xsl:template match="headerCol | th">
        <xsl:element name="th">
            <xsl:call-template name="DoCellAttributes"/>
            <xsl:if test="not(@align)">
                <xsl:attribute name="align">left</xsl:attribute>
            </xsl:if>
            <xsl:if test="not(@valign)">
                <xsl:attribute name="valign">top</xsl:attribute>
            </xsl:if>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
                <xsl:text>padding-left:.2em; </xsl:text>
            </xsl:attribute>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <!--
          row for a table
      -->
    <xsl:template match="row | tr">
        <tr>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
                <xsl:if test="@direction">
                    <xsl:text>direction:</xsl:text>
                    <xsl:value-of select="@direction"/>
                    <xsl:text>; </xsl:text>
                </xsl:if>
            </xsl:attribute>
            <xsl:apply-templates/>
        </tr>
    </xsl:template>
    <!--
          col for a table
      -->
    <xsl:template match="col | td">
        <xsl:element name="td">
            <xsl:call-template name="DoCellAttributes"/>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
                <xsl:text>padding-left:.2em</xsl:text>
                <xsl:if test="@direction">
                    <xsl:text>;direction:</xsl:text>
                    <xsl:value-of select="@direction"/>
                </xsl:if>
            </xsl:attribute>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <!--
          caption for a table
      -->
    <xsl:template match="caption">
        <xsl:element name="tr">
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <td colspan="30">
                <xsl:call-template name="DoCellAttributes"/>
                <b>
                    <!-- default is bold -->
                    <xsl:apply-templates/>
                </b>
            </td>
        </xsl:element>
    </xsl:template>
    <!--
      exampleRef
      -->
    <xsl:template match="exampleRef">
        <xsl:choose>
            <xsl:when test="@letter and name(id(@letter))!='example'">
                <xsl:element name="a">
                    <xsl:attribute name="href">#<xsl:value-of select="@letter"/>
                    </xsl:attribute>
                    <xsl:if test="not(@paren) or @paren='both' or @paren='initial'">(</xsl:if>
                    <xsl:if test="@equal='yes'">=</xsl:if>
                    <xsl:if test="not(@letterOnly='yes')">
                        <xsl:apply-templates select="id(@letter)" mode="example"/>
                    </xsl:if>
                    <xsl:apply-templates select="id(@letter)" mode="letter"/>
                    <xsl:if test="@punct">
                        <xsl:value-of select="@punct"/>
                    </xsl:if>
                    <xsl:if test="not(@paren) or @paren='both' or @paren='final'">)</xsl:if>
                </xsl:element>
            </xsl:when>
            <xsl:otherwise>
                <xsl:if test="@num">
                    <xsl:element name="a">
                        <xsl:attribute name="href">#<xsl:value-of select="@num"/>
                        </xsl:attribute>
                        <xsl:if test="not(@paren) or @paren='both' or @paren='initial'">(</xsl:if>
                        <xsl:if test="@equal='yes'">=</xsl:if>
                        <xsl:apply-templates select="id(@num)" mode="example"/>
                        <xsl:if test="@punct">
                            <xsl:value-of select="@punct"/>
                        </xsl:if>
                        <xsl:if test="not(@paren) or @paren='both' or @paren='final'">)</xsl:if>
                    </xsl:element>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!-- following borrowed and modified from work by John Thomson -->
    <!--
      phrase
      -->
    <xsl:template match="phrase">
        <xsl:apply-templates/>
    </xsl:template>
    <!--
      phrase/item
      -->
    <xsl:template match="phrase/item">
        <xsl:choose>
            <xsl:when test="@type='txt'">
                <xsl:apply-templates/>
                <br/>
            </xsl:when>
            <xsl:when test="@type='gls'">
                <br/>
                <xsl:apply-templates/>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <!--
      words
      -->
    <xsl:template match="words">
        <xsl:apply-templates/>
    </xsl:template>
    <!--
      iword
      -->
    <xsl:template match="iword">
        <span class="interblock">
            <table cellpadding="0" cellspacing="0">
                <xsl:apply-templates/>
            </table>
        </span>
    </xsl:template>
    <!--
      iword/item[@type='txt']
      -->
    <xsl:template match="iword/item[@type='txt']">
        <tr>
            <td>
                <xsl:apply-templates/>
                <xsl:text>&#160;</xsl:text>
            </td>
        </tr>
    </xsl:template>
    <!--
      iword/item[@type='gls']
      -->
    <xsl:template match="iword/item[@type='gls']">
        <tr>
            <td>
                <xsl:if test="string(.)">
                    <xsl:apply-templates/>
                    <xsl:text>&#160;</xsl:text>
                </xsl:if>
                <br/>
            </td>
        </tr>
    </xsl:template>
    <!--
      iword/item[@type='pos']
      -->
    <xsl:template match="iword/item[@type='pos']">
        <tr>
            <td>
                <xsl:if test="string(.)">
                    <xsl:apply-templates/>
                    <xsl:text>&#160;</xsl:text>
                </xsl:if>
                <br/>
            </td>
        </tr>
    </xsl:template>
    <!--
      morphemes
      -->
    <xsl:template match="morphemes">
        <tr>
            <td>
                <xsl:apply-templates/>
            </td>
        </tr>
    </xsl:template>
    <!--
      morphset
      -->
    <xsl:template match="morphset">
        <xsl:apply-templates/>
    </xsl:template>
    <!--
      morph
      -->
    <xsl:template match="morph">
        <span class="interblock">
            <table cellpadding="0" cellspacing="0">
                <xsl:apply-templates/>
            </table>
        </span>
    </xsl:template>
    <!--
      morph/item
      -->
    <xsl:template match="morph/item">
        <tr>
            <td>
                <xsl:apply-templates/>
                <xsl:text>&#160;</xsl:text>
            </td>
        </tr>
    </xsl:template>
    <!--
      morph/item[@type='hn']
      -->
    <!-- suppress homograph numbers, so they don't occupy an extra line-->
    <xsl:template match="morph/item[@type='hn']"/>
    <!-- This mode occurs within the 'cf' item to display the homograph number from the following item.-->
    <xsl:template match="morph/item[@type='hn']" mode="hn">
        <xsl:apply-templates/>
    </xsl:template>
    <!--
      morph/item[@type='cf']
      -->
    <xsl:template match="morph/item[@type='cf']">
        <tr>
            <td>
                <xsl:apply-templates/>
                <xsl:variable name="homographNumber" select="following-sibling::item[@type='hn']"/>
                <xsl:if test="$homographNumber">
                    <sub>
                        <xsl:apply-templates select="$homographNumber" mode="hn"/>
                    </sub>
                </xsl:if>
                <xsl:text>&#160;</xsl:text>
            </td>
        </tr>
    </xsl:template>
    <!-- preceding borrowed and modified from work by John Thomson -->
    <!-- ===========================================================
      ENDNOTES and ENDNOTEREFS
      =========================================================== -->
    <!--
      endnotes
      -->
    <xsl:template match="endnotes">
        <xsl:if test="//endnote">
            <hr size="3"/>
            <a name="rXLingPapEndnotes">
                <xsl:call-template name="OutputChapTitle">
                    <xsl:with-param name="sTitle">
                        <xsl:call-template name="OutputEndnotesLabel"/>
                    </xsl:with-param>
                </xsl:call-template>
            </a>
            <table>
                <xsl:apply-templates select="//endnote" mode="backMatter"/>
            </table>
        </xsl:if>
    </xsl:template>
    <!--
      endnote in flow of text
      -->
    <xsl:template match="endnote">
        <xsl:call-template name="OutputEndnoteNumber">
            <xsl:with-param name="attr" select="@id"/>
        </xsl:call-template>
    </xsl:template>
    <!--
      endnote in back matter
      -->
    <xsl:template match="endnote" mode="backMatter">
        <tr>
            <td valign="top">
                <xsl:element name="a">
                    <xsl:attribute name="name">
                        <xsl:value-of select="@id"/>
                    </xsl:attribute>[<xsl:apply-templates select="." mode="endnote"/>]</xsl:element>
            </td>
            <td>
                <xsl:apply-templates/>
            </td>
        </tr>
    </xsl:template>
    <!--
      endnoteRef
      -->
    <xsl:template match="endnoteRef">
        <xsl:call-template name="OutputEndnoteNumber">
            <xsl:with-param name="attr" select="@note"/>
            <xsl:with-param name="node" select="id(@note)"/>
        </xsl:call-template>
    </xsl:template>
    <!-- ===========================================================
      CITATIONS and REFERENCES 
      =========================================================== -->
    <!--
      citation
      -->
    <xsl:template match="//citation">
        <xsl:variable name="refer" select="id(@ref)"/>
        <xsl:element name="a">
            <xsl:attribute name="href">#<xsl:value-of select="@ref"/>
            </xsl:attribute>
            <xsl:if test="@author='yes'">
                <xsl:value-of select="$refer/../@citename"/>
                <xsl:text>&#x20;</xsl:text>
            </xsl:if>
            <xsl:if test="not(@paren) or @paren='both' or @paren='initial'">(</xsl:if>
            <xsl:variable name="works" select="//refWork[../@name=$refer/../@name and @id=//citation/@ref]"/>
            <xsl:variable name="date">
                <xsl:value-of select="$refer/refDate"/>
            </xsl:variable>
            <xsl:if test="@author='yes' and not(not(@paren) or @paren='both' or @paren='initial')">
                <xsl:text>&#x20;</xsl:text>
            </xsl:if>
            <xsl:value-of select="$date"/>
            <xsl:if test="count($works[refDate=$date])>1">
                <xsl:apply-templates select="$refer" mode="dateLetter"/>
            </xsl:if>
            <xsl:if test="@page">:<xsl:value-of select="@page"/>
            </xsl:if>
            <xsl:if test="not(@paren) or @paren='both' or @paren='final'">)</xsl:if>
        </xsl:element>
    </xsl:template>
    <!--
      references
      -->
    <xsl:template match="references">
        <hr size="3"/>
        <a name="rXLingPapReferences">
            <xsl:call-template name="OutputChapTitle">
                <xsl:with-param name="sTitle">
                    <xsl:call-template name="OutputReferencesLabel"/>
                </xsl:with-param>
            </xsl:call-template>
        </a>
        <div style="margin-left:0.25in">
            <xsl:for-each select="//refAuthor[refWork/@id=//citation/@ref]">
                <xsl:variable name="works" select="refWork[@id=//citation/@ref]"/>
                <xsl:for-each select="$works">
                    <p style="text-indent:-0.25in;margin-bottom:0in;margin-top:0in">
                        <xsl:variable name="author">
                            <xsl:value-of select="normalize-space(../@name)"/>
                        </xsl:variable>
                        <xsl:element name="a">
                            <xsl:attribute name="name">
                                <xsl:value-of select="@id"/>
                            </xsl:attribute>
                            <xsl:value-of select="$author"/>
                        </xsl:element>
                        <xsl:if test="substring($author,string-length($author),string-length($author))!='.'">.</xsl:if>
                        <xsl:text>&#x20;  </xsl:text>
                        <xsl:variable name="date">
                            <xsl:value-of select="refDate"/>
                        </xsl:variable>
                        <xsl:value-of select="$date"/>
                        <xsl:if test="count($works[refDate=$date])>1">
                            <xsl:apply-templates select="." mode="dateLetter"/>
                        </xsl:if>.  
<!--
                               book
 -->
                        <xsl:if test="book">
                            <i>
                                <xsl:apply-templates select="refTitle"/>
                            </i>
                            <xsl:text>.  </xsl:text>
                            <xsl:if test="book/translatedBy">
                                <xsl:text>Translated by </xsl:text>
                                <xsl:value-of select="normalize-space(book/translatedBy)"/>
                                <xsl:call-template name="OutputPeriodIfNeeded">
                                    <xsl:with-param name="sText" select="book/translatedBy"/>
                                </xsl:call-template>
                                <xsl:text>&#x20;</xsl:text>
                            </xsl:if>
                            <xsl:if test="book/series">
                                <xsl:value-of select="normalize-space(book/series)"/>
                                <xsl:call-template name="OutputPeriodIfNeeded">
                                    <xsl:with-param name="sText" select="book/series"/>
                                </xsl:call-template>
                                <xsl:text>&#x20;</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="normalize-space(book/location)"/>
                            <xsl:text>: </xsl:text>
                            <xsl:value-of select="normalize-space(book/publisher)"/>
                            <xsl:call-template name="OutputPeriodIfNeeded">
                                <xsl:with-param name="sText" select="book/publisher"/>
                            </xsl:call-template>
                        </xsl:if>
                        <!--
                               collection
 -->
                        <xsl:if test="collection">
                            <xsl:value-of select="$sLdquo"/>
                            <xsl:apply-templates select="refTitle"/>
                            <xsl:text>.</xsl:text>
                            <xsl:value-of select="$sRdquo"/>
                            <xsl:text> In </xsl:text>
                            <xsl:value-of select="normalize-space(collection/collEd)"/>
                            <xsl:text>, ed</xsl:text>
                            <xsl:if test="collection/collEd/@plural='yes'">
                                <xsl:text>s</xsl:text>
                            </xsl:if>
                            <xsl:text>. </xsl:text>
                            <i>
                                <xsl:value-of select="normalize-space(collection/collTitle)"/>
                            </i>
                            <xsl:choose>
                                <xsl:when test="collection/collVol">
                                    <xsl:text>&#x20;</xsl:text>
                                    <xsl:value-of select="normalize-space(collection/collVol)"/>
                                    <xsl:text>:</xsl:text>
                                    <xsl:value-of select="normalize-space(collection/collPage)"/>
                                    <xsl:text>. </xsl:text>
                                </xsl:when>
                                <xsl:when test="collection/collPage">
                                    <xsl:value-of select="normalize-space(collection/collPage)"/>
                                    <xsl:text>. </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>.</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="collection/location">
                                    <xsl:text>&#x20;</xsl:text>
                                    <xsl:value-of select="normalize-space(collection/location)"/>
                                    <xsl:text>: </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>&#x20;</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:value-of select="normalize-space(collection/publisher)"/>
                            <xsl:call-template name="OutputPeriodIfNeeded">
                                <xsl:with-param name="sText" select="collection/publisher"/>
                            </xsl:call-template>
                        </xsl:if>
                        <!--
                               dissertation
 -->
                        <xsl:if test="dissertation">
                            <i>
                                <xsl:apply-templates select="refTitle"/>.  </i>
                            <xsl:text> Ph.D. dissertation.</xsl:text>
                            <xsl:value-of select="normalize-space(dissertation/institution)"/>
                            <xsl:if test="dissertation/location">
                                <xsl:text> (</xsl:text>
                                <xsl:value-of select="normalize-space(dissertation/location)"/>
                                <xsl:text>).</xsl:text>
                            </xsl:if>
                            <xsl:if test="dissertation/published">
                                <xsl:text>  Published by </xsl:text>
                                <xsl:value-of select="normalize-space(dissertation/published/location)"/>
                                <xsl:text>: </xsl:text>
                                <xsl:value-of select="normalize-space(dissertation/published/publisher)"/>
                                <xsl:text>, </xsl:text>
                                <xsl:value-of select="normalize-space(dissertation/published/pubDate)"/>
                                <xsl:text>.</xsl:text>
                            </xsl:if>
                        </xsl:if>
                        <!--
                               journal article
 -->
                        <xsl:if test="article">
                            <xsl:value-of select="$sLdquo"/>
                            <xsl:apply-templates select="refTitle"/>
                            <xsl:text>.</xsl:text>
                            <xsl:value-of select="$sRdquo"/>
                            <xsl:text>&#x20;</xsl:text>
                            <i>
                                <xsl:value-of select="normalize-space(article/jTitle)"/>
                                <xsl:text>&#x20;</xsl:text>
                                <xsl:value-of select="normalize-space(article/jVol)"/>
                                <xsl:text>:</xsl:text>
                                <xsl:value-of select="normalize-space(article/jPages)"/>
                            </i>
                            <xsl:text>.</xsl:text>
                        </xsl:if>
                        <!--
                               ms (manuscript)
 -->
                        <xsl:if test="ms">
                            <xsl:value-of select="$sLdquo"/>
                            <xsl:apply-templates select="refTitle"/>
                            <xsl:text>.</xsl:text>
                            <xsl:value-of select="$sRdquo"/>
                            <xsl:text>&#x20;</xsl:text>
                            <xsl:value-of select="normalize-space(ms/institution)"/>
                            <xsl:text> ms.</xsl:text>
                        </xsl:if>
                        <!--
                               paper
 -->
                        <xsl:if test="paper">
                            <xsl:value-of select="$sLdquo"/>
                            <xsl:apply-templates select="refTitle"/>
                            <xsl:text>.</xsl:text>
                            <xsl:value-of select="$sRdquo"/>
                            <xsl:text>  Paper presented at the </xsl:text>
                            <xsl:value-of select="normalize-space(paper/conference)"/>
                            <xsl:if test="paper/location">
                                <xsl:text>, </xsl:text>
                                <xsl:value-of select="normalize-space(paper/location)"/>
                            </xsl:if>
                            <xsl:text>.</xsl:text>
                        </xsl:if>
                        <!--
                               proceedings
 -->
                        <xsl:if test="proceedings">
                            <xsl:value-of select="$sLdquo"/>
                            <xsl:apply-templates select="refTitle"/>
                            <xsl:text>.</xsl:text>
                            <xsl:value-of select="$sRdquo"/>
                            <xsl:text>  In </xsl:text>
                            <xsl:value-of select="normalize-space(proceedings/procEd)"/>
                            <xsl:text>, ed</xsl:text>
                            <xsl:if test="proceedings/procEd/@plural='yes'">
                                <xsl:text>s</xsl:text>
                            </xsl:if>
                            <xsl:text>. </xsl:text>
                            <i>
                                <xsl:value-of select="normalize-space(proceedings/procTitle)"/>
                            </i>
                            <xsl:choose>
                                <xsl:when test="proceedings/procVol">
                                    <xsl:text>&#x20;</xsl:text>
                                    <xsl:value-of select="normalize-space(proceedings/procVol)"/>
                                    <xsl:text>:</xsl:text>
                                    <xsl:value-of select="normalize-space(proceedings/procPage)"/>
                                    <xsl:text>. </xsl:text>
                                </xsl:when>
                                <xsl:when test="proceedings/procPage">
                                    <xsl:text>, </xsl:text>
                                    <xsl:value-of select="normalize-space(proceedings/procPage)"/>
                                    <xsl:text>. </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>. </xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:value-of select="normalize-space(proceedings/location)"/>
                            <xsl:text>: </xsl:text>
                            <xsl:value-of select="normalize-space(proceedings/publisher)"/>
                            <xsl:text>.</xsl:text>
                        </xsl:if>
                        <!--
                               thesis
 -->
                        <xsl:if test="thesis">
                            <i>
                                <xsl:apply-templates select="refTitle"/>.  </i>
                            <xsl:text> M.A. thesis. </xsl:text>
                            <xsl:value-of select="normalize-space(thesis/institution)"/>
                            <xsl:if test="thesis/location">
                                <xsl:text> (</xsl:text>
                                <xsl:value-of select="normalize-space(thesis/location)"/>
                                <xsl:text>).</xsl:text>
                            </xsl:if>
                            <xsl:if test="thesis/published">
                                <xsl:text>  Published by </xsl:text>
                                <xsl:value-of select="normalize-space(thesis/published/location)"/>
                                <xsl:text>: </xsl:text>
                                <xsl:value-of select="normalize-space(thesis/published/publisher)"/>
                                <xsl:text>, </xsl:text>
                                <xsl:value-of select="normalize-space(thesis/published/pubDate)"/>
                                <xsl:text>.</xsl:text>
                            </xsl:if>
                        </xsl:if>
                        <!--
                               webPage
 -->
                        <xsl:if test="webPage">
                            <xsl:value-of select="$sLdquo"/>
                            <xsl:apply-templates select="refTitle"/>
                            <xsl:text>.</xsl:text>
                            <xsl:value-of select="$sRdquo"/>
                            <xsl:text>&#x20;</xsl:text>
                            <xsl:if test="webPage/institution">
                                <xsl:value-of select="normalize-space(webPage/institution)"/>
                            </xsl:if>
                            <xsl:if test="webPage/location">
                                <xsl:text>: </xsl:text>
                                <xsl:value-of select="normalize-space(webPage/location)"/>
                            </xsl:if>
                            <xsl:if test="webPage/publisher">
                                <xsl:value-of select="normalize-space(webPage/publisher)"/>
                            </xsl:if>
                            <xsl:text> (</xsl:text>
                            <xsl:element name="a">
                                <xsl:attribute name="href">
                                    <xsl:value-of select="normalize-space(webPage/url)"/>
                                </xsl:attribute>
                                <xsl:value-of select="normalize-space(webPage/url)"/>
                            </xsl:element>
                            <xsl:text>).</xsl:text>
                        </xsl:if>
                        <xsl:if test="url">
                            <xsl:text> (</xsl:text>
                            <xsl:element name="a">
                                <xsl:attribute name="href">
                                    <xsl:value-of select="normalize-space(url)"/>
                                </xsl:attribute>
                                <xsl:value-of select="normalize-space(url)"/>
                            </xsl:element>
                            <xsl:text>)</xsl:text>
                            <xsl:if test="dateAccessed">
                                <xsl:text>  (accessed </xsl:text>
                                <xsl:value-of select="normalize-space(dateAccessed)"/>
                                <xsl:text>)</xsl:text>
                            </xsl:if>
                            <xsl:text>.</xsl:text>
                        </xsl:if>
                    </p>
                </xsl:for-each>
            </xsl:for-each>
        </div>
    </xsl:template>
    <!--
      refTitle
      -->
    <xsl:template match="refTitle">
        <xsl:apply-templates/>
    </xsl:template>
    <!-- ===========================================================
      BR
      =========================================================== -->
    <xsl:template match="br">
        <br/>
    </xsl:template>
    <!-- ===========================================================
      GLOSS
      =========================================================== -->
    <xsl:template match="gloss">
        <xsl:if test="preceding-sibling::*[1][name()='langData']">
            <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
        </xsl:if>
        <xsl:element name="span">
            <xsl:attribute name="style">
                <xsl:call-template name="OutputFontAttributes">
                    <xsl:with-param name="language" select="key('LanguageID',@lang)"/>
                </xsl:call-template>
            </xsl:attribute>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <!-- ===========================================================
      LANGDATA
      =========================================================== -->
    <xsl:template match="langData">
        <xsl:element name="span">
            <xsl:attribute name="style">
                <xsl:call-template name="OutputFontAttributes">
                    <xsl:with-param name="language" select="key('LanguageID',@lang)"/>
                </xsl:call-template>
            </xsl:attribute>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <!-- ===========================================================
      OBJECT
      =========================================================== -->
    <xsl:template match="object">
        <xsl:element name="span">
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:for-each select="key('TypeID',@type)">
                <xsl:value-of select="@before"/>
            </xsl:for-each>
            <xsl:apply-templates/>
            <xsl:for-each select="key('TypeID',@type)">
                <xsl:value-of select="@after"/>
            </xsl:for-each>
        </xsl:element>
    </xsl:template>
    <!-- ===========================================================
      IMG
      =========================================================== -->
    <xsl:template match="img">
        <xsl:element name="img">
            <xsl:attribute name="src">
                <xsl:value-of select="@src"/>
            </xsl:attribute>
            <xsl:if test="@description">
                <xsl:attribute name="alt">
                    <xsl:value-of select="@description"/>
                </xsl:attribute>
            </xsl:if>
            <xsl:value-of select="."/>
        </xsl:element>
    </xsl:template>
    <!-- ===========================================================
      NUMBERING PROCESSING 
      =========================================================== -->
    <!--  
                  sections
-->
    <xsl:template mode="number" match="*">
        <xsl:choose>
            <xsl:when test="ancestor-or-self::chapter">
                <xsl:apply-templates select="." mode="numberChapter"/>
                <xsl:text>.</xsl:text>
            </xsl:when>
            <xsl:when test="ancestor-or-self::chapterBeforePart">
                <xsl:text>0.</xsl:text>
            </xsl:when>
        </xsl:choose>
        <!--
        <xsl:if test="//chapter">
            <xsl:apply-templates select="." mode="numberChapter"/>.</xsl:if>
            -->
        <xsl:number level="multiple" count="section1 | section2 | section3 | section4 | section5 | section6" format="1.1"/>
    </xsl:template>
    <!--  
                  appendix
-->
    <xsl:template mode="numberAppendix" match="*">
        <xsl:number level="multiple" count="appendix | section1 | section2 | section3 | section4 | section5 | section6" format="A.1"/>
    </xsl:template>
    <!--  
                  chapter
-->
    <xsl:template mode="numberChapter" match="*">
        <xsl:number level="any" count="chapter" format="1"/>
    </xsl:template>
    <!--  
                  part
-->
    <xsl:template mode="numberPart" match="*">
        <xsl:number level="multiple" count="part" format="I"/>
    </xsl:template>
    <!--  
                  endnote
-->
    <xsl:template mode="endnote" match="*">
        <xsl:number level="any" count="endnote" format="1"/>
    </xsl:template>
    <!--  
                  example
-->
    <xsl:template mode="example" match="*">
        <xsl:number level="any" count="example" format="1"/>
    </xsl:template>
    <!--  
                  letter
-->
    <xsl:template mode="letter" match="*">
        <xsl:number level="single" count="listWord | listSingle | listInterlinear | lineSet" format="a"/>
    </xsl:template>
    <!--  
                  dateLetter
-->
    <xsl:template mode="dateLetter" match="*">
        <xsl:number level="single" count="refWork[@id=//citation/@ref]" format="a"/>
    </xsl:template>
    <!-- ===========================================================
      NAMED TEMPLATES
      =========================================================== -->
    <!--
                  DoCellAttributes
                  -->
    <xsl:template name="DoCellAttributes">
        <xsl:if test="@direction">
            <xsl:attribute name="style">
                <xsl:text>direction:</xsl:text>
                <xsl:value-of select="@direction"/>
            </xsl:attribute>
        </xsl:if>
        <xsl:if test="@align">
            <xsl:attribute name="align">
                <xsl:value-of select="@align"/>
            </xsl:attribute>
        </xsl:if>
        <xsl:if test="@colspan">
            <xsl:attribute name="colspan">
                <xsl:value-of select="@colspan"/>
            </xsl:attribute>
        </xsl:if>
        <xsl:if test="@rowspan">
            <xsl:attribute name="rowspan">
                <xsl:value-of select="@rowspan"/>
            </xsl:attribute>
        </xsl:if>
        <xsl:if test="@valign">
            <xsl:attribute name="valign">
                <xsl:value-of select="@valign"/>
            </xsl:attribute>
        </xsl:if>
        <xsl:if test="@width">
            <xsl:attribute name="width">
                <xsl:value-of select="@width"/>
            </xsl:attribute>
        </xsl:if>
    </xsl:template>
    <!--  
                  DoType
-->
    <xsl:template name="DoType">
        <xsl:param name="type" select="@type"/>
        <xsl:for-each select="key('TypeID',$type)">
            <xsl:call-template name="OutputFontAttributes">
                <xsl:with-param name="language" select="."/>
            </xsl:call-template>
            <xsl:call-template name="DoNestedTypes">
                <xsl:with-param name="sList" select="@types"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>
    <!--  
                  DoNestedTypes
-->
    <xsl:template name="DoNestedTypes">
        <xsl:param name="sList"/>
        <xsl:variable name="sNewList" select="concat(normalize-space($sList),' ')"/>
        <xsl:variable name="sFirst" select="substring-before($sNewList,' ')"/>
        <xsl:variable name="sRest" select="substring-after($sNewList,' ')"/>
        <xsl:if test="string-length($sFirst) &gt; 0">
            <xsl:call-template name="DoType">
                <xsl:with-param name="type" select="$sFirst"/>
            </xsl:call-template>
            <xsl:if test="$sRest">
                <xsl:call-template name="DoNestedTypes">
                    <xsl:with-param name="sList" select="$sRest"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <!--  
                  exampleNumber
-->
    <xsl:template name="exampleNumber">(<xsl:apply-templates select="." mode="example"/>)</xsl:template>
    <!--
                   OutputAbstractLabel
-->
    <xsl:template name="OutputAbstractLabel">
        <xsl:call-template name="OutputLabel">
            <xsl:with-param name="sDefault">Abstract</xsl:with-param>
            <xsl:with-param name="pLabel" select="//abstract/@label"/>
        </xsl:call-template>
    </xsl:template>
    <!--
                   OutputAcknowledgementsLabel
-->
    <xsl:template name="OutputAcknowledgementsLabel">
        <xsl:call-template name="OutputLabel">
            <xsl:with-param name="sDefault">Acknowledgements</xsl:with-param>
            <xsl:with-param name="pLabel" select="//acknowledgements/@label"/>
        </xsl:call-template>
    </xsl:template>
    <!--  
                  OutputChapterNumber
-->
    <xsl:template name="OutputChapterNumber">
        <xsl:choose>
            <xsl:when test="name()='chapter'">
                <xsl:apply-templates select="." mode="numberChapter"/>
            </xsl:when>
            <xsl:when test="name()='chapterBeforePart'">
                <xsl:text>0</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates select="." mode="numberAppendix"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--  
                  OutputChapTitle
-->
    <xsl:template name="OutputChapTitle">
        <xsl:param name="sNumber"/>
        <xsl:param name="sTitle"/>
        <p>
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <big>
                <big>
                    <big>
                        <b>
                            <xsl:element name="a">
                                <xsl:attribute name="name">
                                    <xsl:value-of select="@id"/>
                                </xsl:attribute>
                                <xsl:if test="$sNumber">
                                    <xsl:value-of select="$sNumber"/>
                                    <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
                                </xsl:if>
                                <xsl:value-of select="$sTitle"/>
                            </xsl:element>
                        </b>
                    </big>
                </big>
            </big>
        </p>
    </xsl:template>
    <!--
                   OutputContentsLabel
-->
    <xsl:template name="OutputContentsLabel">
        <xsl:call-template name="OutputLabel">
            <xsl:with-param name="sDefault">Contents</xsl:with-param>
            <xsl:with-param name="pLabel" select="//contents/@label"/>
        </xsl:call-template>
    </xsl:template>
    <!--
                   OutputEndnoteNumber
-->
    <xsl:template name="OutputEndnoteNumber">
        <xsl:param name="attr" select="@id"/>
        <xsl:param name="node" select="."/>
        <span style="font-size=65%; vertical-align:super">
            <xsl:text>[</xsl:text>
            <xsl:element name="a">
                <xsl:attribute name="href">#<xsl:value-of select="$attr"/>
                </xsl:attribute>
                <xsl:apply-templates select="$node" mode="endnote"/>
            </xsl:element>
            <xsl:text>]</xsl:text>
        </span>
    </xsl:template>
    <!--
                   OutputEndnotesLabel
-->
    <xsl:template name="OutputEndnotesLabel">
        <xsl:call-template name="OutputLabel">
            <xsl:with-param name="sDefault">Endnotes</xsl:with-param>
            <xsl:with-param name="pLabel" select="//endnotes/@label"/>
        </xsl:call-template>
    </xsl:template>
    <!--  
                  OutputExampleNumber
-->
    <xsl:template name="OutputExampleNumber">
        <xsl:element name="a">
            <xsl:attribute name="name">
                <xsl:value-of select="../../@num"/>
            </xsl:attribute>
            <xsl:call-template name="exampleNumber"/>
        </xsl:element>
    </xsl:template>
    <!--  
                  OutputFontAttributes
-->
    <xsl:template name="OutputFontAttributes">
        <xsl:param name="language"/>
        <xsl:if test="$language/@font-family">
            <xsl:text>font-family:</xsl:text>
            <xsl:value-of select="$language/@font-family"/>
            <xsl:text>; </xsl:text>
        </xsl:if>
        <xsl:if test="$language/@font-size">
            <xsl:text>font-size:</xsl:text>
            <xsl:value-of select="$language/@font-size"/>
            <xsl:text>; </xsl:text>
        </xsl:if>
        <xsl:if test="$language/@font-style">
            <xsl:text>font-style:</xsl:text>
            <xsl:value-of select="$language/@font-style"/>
            <xsl:text>; </xsl:text>
        </xsl:if>
        <xsl:if test="$language/@font-variant">
            <xsl:text>font-variant:</xsl:text>
            <xsl:value-of select="$language/@font-variant"/>
            <xsl:text>; </xsl:text>
        </xsl:if>
        <xsl:if test="$language/@font-weight">
            <xsl:text>font-weight:</xsl:text>
            <xsl:value-of select="$language/@font-weight"/>
            <xsl:text>; </xsl:text>
        </xsl:if>
        <xsl:if test="$language/@color">
            <xsl:text>color:</xsl:text>
            <xsl:value-of select="$language/@color"/>
            <xsl:text>; </xsl:text>
        </xsl:if>
        <xsl:if test="$language/@cssSpecial">
            <xsl:value-of select="$language/@cssSpecial"/>
        </xsl:if>
    </xsl:template>
    <!--  
                  OutputLabel
-->
    <xsl:template name="OutputLabel">
        <xsl:param name="sDefault"/>
        <xsl:param name="pLabel"/>
        <xsl:choose>
            <xsl:when test="$pLabel">
                <xsl:value-of select="$pLabel"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$sDefault"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--  
                  OutputPeriodIfNeeded
-->
    <xsl:template name="OutputPeriodIfNeeded">
        <xsl:param name="sText"/>
        <xsl:variable name="sString">
            <xsl:value-of select="normalize-space($sText)"/>
        </xsl:variable>
        <xsl:if test="substring($sString, string-length($sString))!='.'">
            <xsl:text>.</xsl:text>
        </xsl:if>
    </xsl:template>
    <!--
                   OutputReferencesLabel
-->
    <xsl:template name="OutputReferencesLabel">
        <xsl:call-template name="OutputLabel">
            <xsl:with-param name="sDefault">References</xsl:with-param>
            <xsl:with-param name="pLabel" select="//references/@label"/>
        </xsl:call-template>
    </xsl:template>
    <!--  
                  OutputSection
-->
    <xsl:template name="OutputSection">
        <xsl:element name="a">
            <xsl:attribute name="name">
                <xsl:value-of select="@id"/>
            </xsl:attribute>
            <xsl:call-template name="OutputSectionNumberAndTitle"/>
        </xsl:element>
    </xsl:template>
    <!--  
                  OutputSectionNumberAndTitle
-->
    <xsl:template name="OutputSectionNumberAndTitle">
        <xsl:variable name="bAppendix">
            <xsl:for-each select="ancestor::*">
                <xsl:if test="name(.)='appendix'">Y</xsl:if>
            </xsl:for-each>
        </xsl:variable>
        <xsl:if test="$bAppendix='Y'">
            <xsl:apply-templates select="." mode="numberAppendix"/>
        </xsl:if>
        <xsl:if test="not($bAppendix='Y')">
            <xsl:apply-templates select="." mode="number"/>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
        <xsl:apply-templates select="secTitle"/>
    </xsl:template>
    <!--  
                  OutputAllChapterTOC
-->
    <xsl:template name="OutputAllChapterTOC">
        <xsl:param name="nLevel" select="3"/>
        <li>
            <xsl:element name="a">
                <xsl:attribute name="href">#<xsl:value-of select="@id"/>
                </xsl:attribute>
                <xsl:call-template name="OutputChapterNumber"/>
                <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
                <xsl:apply-templates select="secTitle"/>
            </xsl:element>
            <ul>
                <xsl:call-template name="OutputAllSectionTOC">
                    <xsl:with-param name="nLevel">
                        <xsl:value-of select="$nLevel"/>
                    </xsl:with-param>
                    <xsl:with-param name="nodesSection1" select="section1"/>
                </xsl:call-template>
            </ul>
        </li>
    </xsl:template>
    <!--  
                  OutputAllSectionTOC
-->
    <xsl:template name="OutputAllSectionTOC">
        <xsl:param name="nLevel" select="3"/>
        <xsl:param name="nodesSection1"/>
        <xsl:for-each select="$nodesSection1">
            <xsl:call-template name="OutputSectionTOC"/>
            <xsl:if test="section2 and $nLevel>=2">
                <ul>
                    <xsl:for-each select="section2">
                        <xsl:call-template name="OutputSectionTOC"/>
                        <xsl:if test="section3 and $nLevel>=3">
                            <ul>
                                <xsl:for-each select="section3">
                                    <xsl:call-template name="OutputSectionTOC"/>
                                    <xsl:if test="section4 and $nLevel>=4">
                                        <ul>
                                            <xsl:for-each select="section4">
                                                <xsl:call-template name="OutputSectionTOC"/>
                                                <xsl:if test="section5 and $nLevel>=5">
                                                    <ul>
                                                        <xsl:for-each select="section5">
                                                            <xsl:call-template name="OutputSectionTOC"/>
                                                            <xsl:if test="section6 and $nLevel>=6">
                                                                <ul>
                                                                    <xsl:for-each select="section6">
                                                                        <xsl:call-template name="OutputSectionTOC"/>
                                                                    </xsl:for-each>
                                                                </ul>
                                                            </xsl:if>
                                                        </xsl:for-each>
                                                    </ul>
                                                </xsl:if>
                                            </xsl:for-each>
                                        </ul>
                                    </xsl:if>
                                </xsl:for-each>
                            </ul>
                        </xsl:if>
                    </xsl:for-each>
                </ul>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <!--  
                  OutputSectionTOC
-->
    <xsl:template name="OutputSectionTOC">
        <li>
            <xsl:element name="a">
                <xsl:attribute name="href">#<xsl:value-of select="@id"/>
                </xsl:attribute>
                <xsl:call-template name="OutputSectionNumberAndTitle"/>
            </xsl:element>
        </li>
    </xsl:template>
    <!--  
                  OutputTable
-->
    <xsl:template name="OutputTable">
        <xsl:element name="table">
            <xsl:attribute name="style">
                <xsl:call-template name="DoType"/>
            </xsl:attribute>
            <xsl:if test="@border">
                <xsl:attribute name="border">
                    <xsl:value-of select="@border"/>
                </xsl:attribute>
            </xsl:if>
            <xsl:if test="@cellpadding">
                <xsl:attribute name="cellpadding">
                    <xsl:value-of select="@cellpadding"/>
                </xsl:attribute>
            </xsl:if>
            <xsl:if test="@cellspacing">
                <xsl:attribute name="cellspacing">
                    <xsl:value-of select="@cellspacing"/>
                </xsl:attribute>
            </xsl:if>
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    <!--  
                  OutputTableCells
-->
    <xsl:template name="OutputTableCells">
        <xsl:param name="sList"/>
        <xsl:param name="language"/>
        <xsl:variable name="sNewList" select="concat(normalize-space($sList),' ')"/>
        <xsl:variable name="sFirst" select="substring-before($sNewList,' ')"/>
        <xsl:variable name="sRest" select="substring-after($sNewList,' ')"/>
        <xsl:element name="td">
            <xsl:attribute name="style">
                <xsl:call-template name="OutputFontAttributes">
                    <xsl:with-param name="language" select="key('LanguageID',$language)"/>
                </xsl:call-template>
                <xsl:value-of select="$sExampleCellPadding"/>
            </xsl:attribute>
            <xsl:value-of select="$sFirst"/>
        </xsl:element>
        <xsl:if test="$sRest">
            <xsl:call-template name="OutputTableCells">
                <xsl:with-param name="sList" select="$sRest"/>
                <xsl:with-param name="language" select="$language"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>
    <!--  
                  ReverseContents
-->
    <xsl:template name="ReverseContents">
        <xsl:param name="sList"/>
        <xsl:variable name="sNewList" select="concat(normalize-space($sList),' ')"/>
        <xsl:variable name="sFirst" select="substring-before($sNewList,' ')"/>
        <xsl:variable name="sRest" select="substring-after($sNewList,' ')"/>
        <xsl:if test="$sRest">
            <xsl:call-template name="ReverseContents">
                <xsl:with-param name="sList" select="$sRest"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:value-of select="$sFirst"/>
        <xsl:text>&#x20;</xsl:text>
    </xsl:template>
    <!-- ===========================================================
      ELEMENTS TO IGNORE
      =========================================================== -->
    <xsl:template match="language"/>
    <xsl:template match="comment"/>
    <xsl:template match="styles"/>
    <xsl:template match="style"/>
    <xsl:template match="type"/>
</xsl:stylesheet>
<!-- ===========================================================
      REVISION HISTORY
      ===========================================================
1.10.0 Andy Black 01-Aug-2006 Add morphemed-aligned interlinear; Added types/type; font info to language.; changed endnoteRef's IDREF from ref to note to make it work better in XMLmind editor.  Removed content for language; removed css attribute of lingPaper; remove styles and style.
1.9.0 Andy Black 20-Apr-2006  Modifications to make it easier to edit with XMLmind. Handle rtl better.
1.8.1 Andy Black 06-Apr-2005  Output as xml (i.e.xhtml which is what it already was) and use utf-8 encoding.
                                                   Remove newlines between some elements (not really needed).
                                                   Fix output of non-breaking space so never get "splat" with MSXML2 transformer
                                                   Fix outputing of extraneous <ul/> elements in Appendix portion of table of contents
                                                   Instead of using an external object to create date, use a parameter.
1.8.0 Andy Black 29-Nov-2004  Add styles element
1.7.1 14-Oct-2004  Andy Black  Allow width elements on columns and also include section2 elements of appendices in the toc.
1.7.0 Andy Black 03-Jun-2004  Add link element (for media)
1.6.7 Andy Black 26-May-2004  Have Appendix be section1 if there are no chapters.
1.6.6 Andy Black 18-Dec-2003  Fix reference quotes and other puncutation.
1.6.5 Andy Black 16-Dec-2003  Increase font size of section5 and section6 titles
1.6.4 Andy Black 09-Dec-2003  Fix space before date in other citations
1.6.3 Andy Black 01-Dec-2003  Fix space before date in citations; Fix extra period if publisher or series ends with period.
1.6.2 Andy Black 01-Dec-2003  Allow chart to have lists
1.6.1 Andy Black 25-Nov-2003  Fixed listWord, single, and word to align better with example number
1.6.0 Andy Black 25-Sept-2003  Various improvements from Mexico web site version:
                                                   Get interlinear example lines to lines up with example number and letter.
                                                   Get class attrs to work better with table header columns and columns
                                                   Add space between author and date where needed in citations
1.5.0 Andy Black 13-Jan-2003  Allow chart to have class attr and to use no table if neither example nor endnote
                                                   Add genericRef element
1.4.4 Andy Black 03-Dec-2002 change <xsl:output> attributes per John Edwards' suggestions
1.4.3 Andy Black 16-Oct-2002 Refactored some label attribute handling.
1.4.2 Andy Black 16-Oct-2002 Added label to endnotes and references
1.4.1 Andy Black 07-Oct-2002 Added appendixRef; made p and pc work with css
1.4  Andy Black  04-Oct-2002  Remove unwanted gaps in examples by adding lineGroup around lines.
1.3  Andy Black  03-Oct-2002  Many changes per Cheri's needs;  Includes
                                                    Allow <tree><p>stuff</p><img src="" alt=""/></ing></tree>
1.2  Andy Black  03-Jul-2002    Added <wrd/> and conflated lines (first pass)
1.1  Andy Black  08-May-2002  Changed some spaces to non-breaking spaces so there would be a space between
                                                    section numbers and section titles.
1.0  Andy Black  21-Jun-2001  Initial version.
 -->
