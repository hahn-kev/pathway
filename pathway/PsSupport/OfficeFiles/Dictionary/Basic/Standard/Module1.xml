<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic">&apos;Changed On Sep-25-2012 for TD-3222(CoverPage Image not centered in Pdf (Using OpenOffice))

&apos;Define the values to Constant Variables for First Guide word, Last Guide word ,Headword Style
Const FIRSTGUIDESTYLE = &quot;GuideL&quot;
Const LASTGUIDESTYLE =  &quot;GuideR&quot;
Const HEADWORDSTYLE = &quot;headword&quot;
Const HEADWORD_MINOR_STYLE = &quot;headwordminor&quot;
Const ENTRYPARASTYLE =  &quot;entry_letData_dicBody&quot; &apos; &quot;entry_letData&quot;
Const TITLEPARASTYLE = &quot;letter&quot;
Const HOMOGRAPHNUMBER =   &quot;homographnumber&quot;
Const CONTINUATION_CHARACTER = &quot;...&quot;
Dim LastParagraph(0) As String


&apos; needs writer document 
Dim oProgressBarModel As Object 
Dim oSubWindow As Object
Dim oFrame As Object
Dim oSubFrame As Object
Dim ProgressValue As Integer
Dim PageCount as Integer
Dim CanSave as Boolean



Sub StartDontForget
On Error GoTo MyError:
	TurnOffNonPrintingCharacters() 
	
	AlingOverlappingImages()
	
	If  Right(Trim(ThisComponent.Title),4) = &quot;.odm&quot; Then
		HideODMVariable()&apos;&lt;-- set exit sub
	End If

	UpdateTOC()
	
	&apos;SetImageToCoverPage()
	If IsCoverImageInserted = &quot;true&quot; And Right(Trim(ThisComponent.Title),4) = &quot;.odm&quot; Then
		SetImageToCoverPage()
	End If
	
	If CanSave Then
		oDoc = ThisComponent 
		oDoc.store() 
	End If
	
	If Lcase(OutputFormat) &lt;&gt; &quot;odt&quot; And Len(Trim(OutputFormat)) &gt; 0 Then
		ExportToDOC_PDF
	End IF
		
Exit Sub
MyError:	
End Sub


&apos;Update the Table of Content
Sub UpdateTOC
On Error GoTo MyError:
   oDoc = ThisComponent
   oDoc.refresh() 
   oIndexes = oDoc.getDocumentIndexes() 
   oIndex = oIndexes.getByName(&quot;Table of Contents1&quot;) 
   oIndex.update() 
Exit Sub
MyError:

End Sub

&apos;This procedure Update TOC
Sub UpdateTOC1() 
oIndexes = ThisComponent.getDocumentIndexes() 

For n = 0 To oIndexes.Count - 1 
   oIndexes.getByIndex(n).update() 
Next n 

End Sub

&apos;This procedure align Cover page Image
Sub SetImageToCoverPage
	if ThisComponent.getDrawPage().GetCount &gt; 0 Then
		oGraphic  = ThisComponent.getDrawPage().getByIndex(ThisComponent.getDrawPage().GetCount -1)
		oGraphic.AnchorType = com.sun.star.text.TextContentAnchorType.AT_PAGE
	End If
End Sub

Sub Test1

	if ThisComponent.getDrawPage().GetCount &gt; 0 Then
		oGraphic  = ThisComponent.getDrawPage().getByIndex(ThisComponent.getDrawPage().GetCount -1)
		oGraphic.AnchorType = com.sun.star.text.TextContentAnchorType.AT_PAGE
	End If
	Exit Sub
dim oMainform 
oGraphics = Thiscomponent.GraphicObjects
Msgbox oGraphics.count
  For i = 0 To oGraphics.getCount() -1 step 1 
  	oGraphic = oGraphics.getByIndex(i)
  	if oGraphics.count - 1 = i Then
	  	oGraphic.AnchorType = com.sun.star.text.TextContentAnchorType.AT_PAGE
  	End If
  Next 	
End sub

Sub HideODMVariable
exit sub

PageCount = TotalPages
ThisComponent.currentController.getViewCursor().jumpToPage(PageCount)


dim document   as object
dim dispatcher as object

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

dim args1(0) as new com.sun.star.beans.PropertyValue
args1(0).Name = &quot;Text&quot;
args1(0).Value = &quot; &quot;

dispatcher.executeDispatch(document, &quot;.uno:InsertText&quot;, &quot;&quot;, 0, args1())

dispatcher.executeDispatch(document, &quot;.uno:SwBackspace&quot;, &quot;&quot;, 0, Array())

&apos;msgbox PageCount

&apos;oDoc = ThisComponent 
&apos;LGuide = oDoc.getTextFieldMasters().getByName(&quot;com.sun.star.text.fieldmaster.SetExpression.Right_Guideword_R&quot;)
&apos;LGuide.DependentTextFields(1).Content = &quot;Changed&quot;
end sub

&apos;Create Progress bar
Sub ShowProcessingDialog() 
  oDoc = ThisComponent &apos; needs document 
  oController = oDoc.getCurrentController() 
  oFrame = oController.getFrame() 
  oContainerWindow = oFrame.ContainerWindow 
  oToolkit = oContainerWindow.Toolkit 
  
  &apos; sub window with sub frame 
  oSubWindow = CreateNewWindow(oToolkit,oContainerWindow, 300,300,500,120) 
  oSubWindow.Title=&quot;Update Guidewords&quot;
  oSubFrame = CreateUnoService(&quot;com.sun.star.frame.Frame&quot;) 
  oSubFrame.initialize(oSubWindow) 
  oFrame.getFrames().append(oSubFrame) 
  
  &apos; container of controls (Frame)
  oContainer = CreateUnoService(&quot;com.sun.star.awt.UnoControlContainer&quot;) 
  oContainerModel = CreateUnoService(&quot;com.sun.star.awt.UnoControlContainerModel&quot;) 
  oContainerModel.BackgroundColor = &quot;&amp;HEEEEEE&quot; &apos;-1 
  oContainer.setModel(oContainerModel) 
  oContainer.setPosSize(0,0,500,120,com.sun.star.awt.PosSize.POSSIZE) 
  oContainer.createPeer(oToolkit,oSubWindow) 
  
  &apos; progressbar 
  oProgressBarModel = CreateUnoService(&quot;com.sun.star.awt.UnoControlProgressBarModel&quot;) 
  oProgressBar = CreateUnoService( &quot;com.sun.star.awt.UnoControlProgressBar&quot; ) 
  oProgressBar.setModel(oProgressBarModel) 
  oProgressBar.setPosSize(50,65,400,30, com.sun.star.awt.PosSize.POSSIZE ) 
  oContainer.addControl(&quot;progressbar&quot;,oProgressBar) 
  
  &apos; label 1
  oLabel = CreateUnoService(&quot;com.sun.star.awt.UnoControlFixedText&quot;) 
  oLabelModel = CreateUnoService(&quot;com.sun.star.awt.UnoControlFixedTextModel&quot;) 
  oLabelModel.Label = &quot;The Open Office window will be hidden while the headers are updated&quot;
  oLabel.setModel(oLabelModel) 
  oLabel.Alignment = 1
  oLabel.setPosSize(5,20,500,30,com.sun.star.awt.PosSize.POSSIZE) 
  oContainer.addControl(&quot;label&quot;,oLabel) 

  &apos; label 2
  oLabel = CreateUnoService(&quot;com.sun.star.awt.UnoControlFixedText&quot;) 
  oLabelModel = CreateUnoService(&quot;com.sun.star.awt.UnoControlFixedTextModel&quot;) 
  oLabelModel.Label = &quot;because this reduces the time it takes to do the update.&quot; 
  oLabel.setModel(oLabelModel) 
  oLabel.Alignment = 1
  oLabel.setPosSize(5,37,500,30,com.sun.star.awt.PosSize.POSSIZE) 
  oContainer.addControl(&quot;label&quot;,oLabel) 
    
  &apos; show window 
  oSubWindow.setEnable(False) 
  oSubWindow.setVisible(True) 
  &apos;oSubWindow.setVisible(False) 
End Sub 

&apos;Increments progressbar value
Sub MyProgressBar(ProgressValue)
	oProgressBarModel.ProgressValue = ProgressValue &apos; * 1
End Sub

&apos; create new non-modal dialog 
Function CreateNewWindow(oToolkit,oParent,nX,nY,nWidth,nHeight) As Object 
  aRect = CreateUnoStruct(&quot;com.sun.star.awt.Rectangle&quot;) 
  With aRect 
    .X = nX 
    .Y = nY 
    .Width = nWidth 
    .Height = nHeight 
  End With 
  aWinDesc = CreateUnoStruct(&quot;com.sun.star.awt.WindowDescriptor&quot;) 
  With aWinDesc 
    .Type = com.sun.star.awt.WindowClass.TOP 
    .WindowServiceName = &quot;dialog&quot; 
    .ParentIndex = -1 
    .Bounds = aRect 
    .Parent = oParent 
    .WindowAttributes = com.sun.star.awt.WindowAttribute.MOVEABLE + com.sun.star.awt.WindowAttribute.CLOSEABLE 
  End With 
  CreateNewWindow = oToolkit.createWindow(aWinDesc) 
End Function  

&apos;This procedure turn off non-printing characters
Sub TurnOffNonPrintingCharacters
	dim document   as object
	dim dispatcher as object
	
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;ControlCodes&quot;
	args1(0).Value = false
	
	dispatcher.executeDispatch(document, &quot;.uno:ControlCodes&quot;, &quot;&quot;, 0, args1())
end sub

&apos;This procedure enables/disables the &quot;Auto Recovery option&quot;
Sub AutoSaveEnableDisable(value as Boolean)

	dim document   as object
	dim dispatcher as object
	
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	
	rem ----------------------------------------------------------------------
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;AutoSave&quot;
	args1(0).Value = value
	
	&apos;args1(1).Name = &quot;TimeIntervall&quot;
	&apos;args1(1).Value = 7
	
	&apos;CommitChanges
	&apos;AcceptChanges
	&apos;TimeIntervall
	dispatcher.executeDispatch(document, &quot;.uno:AcceptChanges&quot;, &quot;&quot;, 0, args1())
	dispatcher.executeDispatch(document, &quot;.uno:CommitChanges&quot;, &quot;&quot;, 0, args1())

end sub

&apos;This procedure align the overlapping images
Sub AlingOverlappingImages 
dim frameCount, lclNo, curHoriPos, nxtHoriPos
oGraphics = ThisComponent.getTextFrames

frameCount = oGraphics.getCount() -1
lclNo = 0
  For i = 0 To oGraphics.getCount() -1 step 1 

    	If frameCount &gt; i Then
	    	oGraphic = oGraphics.getByIndex(i)
	    	curHoriPos = oGraphic.HoriOrientPosition    	
	    	nxt = oGraphics.getByIndex(i + 1)
	    	nxtHoriPos = nxt.HoriOrientPosition 
			If curHoriPos = nxtHoriPos And (curHoriPos + nxtHoriPos) &gt; 0 Then
				lclNo = lclNo + 1
				If lclNo = 1 Then
				 	oGraphic.HoriOrient = 3
				 	nxt.HoriOrient = 2
				elseif lclNo = 2 Then
				 	oGraphic.HoriOrient = 2
				 	nxt.HoriOrient = 1	
				End If
				if lclNo = 3 Then lclNo = 0
				
				CanSave = True
			End If
		End If
  Next    
End Sub
	
&apos;This procedure set the dialgue to correct Update Guide Words 
Sub StartDontForget2482
	&apos;Msgbox &quot;Please NOTE: Use the Update Guide Words menu item or tool bar item to correct the guide words before printing.&quot; , 0 + 64,  &quot;Guide Word Reminder&quot;
	TurnOffNonPrintingCharacters()
	dim clicked as byte
	
	If Lcase(RunMacroFirstTime) = &quot;true&quot; Then	
		If IsMacroRun = true Then
			clicked = msgbox (&quot;Headers are updated to contain the first and last word with the &quot; + &quot;&quot;&quot;&quot; + &quot;Update Guide Words&quot; + &quot;&quot;&quot;&quot; + &quot; tool bar item or Macro menu item.&quot; &amp; chr(10) &amp; chr(10) &amp; &quot;This should be done once at the beginning and after any changes that affect what information is on a page.&quot;  &amp; chr(10) &amp; chr(10) &amp;  &quot;Would you like to update the headers now?&quot;, 4 + 32 + 256 , &quot;Guide Word Reminder&quot;)
			If clicked = 6 Then &apos;If Yes clicked
				SetGuides
			Else
				If TotalPages &gt; 100 Then
					Msgbox(&quot;The headers will not appear to be correct until the repagination is complete.&quot; +  chr(10) + &quot;On long documents it may take a couple of minutes.&quot; &amp; chr(10) &amp; &quot;(Use File--&gt;Page Preview to force repagination.)&quot;,, &quot;Guide Word Reminder&quot;)
				End If
			End If
		Else
			If LCase(AutoMacro) = &quot;true&quot; Then
				SetGuides
			Else
				clicked = msgbox (&quot;Headers are updated to contain the first and last word with the &quot; + &quot;&quot;&quot;&quot; + &quot;Update Guide Words&quot; + &quot;&quot;&quot;&quot; + &quot; tool bar item or Macro menu item.&quot; &amp; chr(10) &amp; chr(10) &amp; &quot;This should be done once at the beginning and after any changes that affect what information is on a page.&quot;  &amp; chr(10) &amp; chr(10) &amp;  &quot;Would you like to update the headers now?&quot;, 4 + 32 + 256 , &quot;Guide Word Reminder&quot;)
				If clicked = 6 Then &apos;If Yes clicked
					SetGuides
				End If		
			End If	
		End If
	End If
	
	&apos;If Lcase(OutputFormat) &lt;&gt; &quot;odt&quot; Then
		&apos;ExportToDOC_PDF
	&apos;End IF	
End Sub

Sub StartDontForgetTD1485
	&apos;Msgbox &quot;Please NOTE: Use the Update Guide Words menu item or tool bar item to correct the guide words before printing.&quot; , 0 + 64,  &quot;Guide Word Reminder&quot;
	If LCase(AutoMacro) = &quot;true&quot; Then
		&apos;If IsMacroRun = true Then
			SetGuides
		&apos;End If	
	Else
		dim clicked as byte
		If IsMacroRun = true Then
			clicked = msgbox (&quot;Headers are updated to contain the first and last word with the &quot; + &quot;&quot;&quot;&quot; + &quot;Update Guide Words&quot; + &quot;&quot;&quot;&quot; + &quot; tool bar item or Macro menu item.&quot; &amp; chr(10) &amp; chr(10) &amp; &quot;This should be done once at the beginning and after any changes that affect what information is on a page.&quot;  &amp; chr(10) &amp; chr(10) &amp;  &quot;Would you like to update the headers now?&quot;, 4 + 32 + 256 , &quot;Guide Word Reminder&quot;)
			If clicked = 6 Then &apos;If Yes clicked
				SetGuides
			End If
		Else
			SetGuides
		End If
	End If	
	If Lcase(OutputFormat) &lt;&gt; &quot;odt&quot; Then
		ExportToDOC_PDF
	End IF	
End Sub

&apos;This procedure removes existing hidden guide words
Function IsMacroRun

	Dim oParEnum           &apos;Paragraph enumerator 
	Dim oPar               &apos;Current paragraph 
	oParEnum = ThisComponent.Text.createEnumeration() 
	Do While oParEnum.hasMoreElements() 
		oPar = oParEnum.nextElement() 
		If oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then 
			If InStr(oPar.ParaStyleName, &quot;Guide&quot;) &gt; 0 Then 
				IsMacroRun = true
				Exit Function
			End If 
		End If 
	Loop
	IsMacroRun = false
End Function

&apos;This procedure exports Odt file into Word/PDF based on the OutputFormat in given FilePath
Sub ExportToDOC_PDF
&apos;stardesktop.terminate 
On Error GoTo MyError:
	Dim FilePathWithName,filterType as string
	Dim oSvc as Object
   	oDoc = ThisComponent 
	
	FilePathWithName = FilePath &amp; &quot;.&quot; &amp; OutputFormat
   	fileURL = ConvertToURL(FilePathWithName)
   	
	if Lcase(OutputFormat) = &quot;doc&quot; Then
		filterType = &quot;MS WinWord 6.0&quot; 
	else
		filterType = &quot;writer_pdf_Export&quot;
	End If 
	&apos;msgbox(&quot;start&quot;)
   	oDoc.storeToURL(fileURL, Array(MakePropertyValue(&quot;FilterName&quot;,filterType)) 
	&apos;msgbox(&quot;end&quot;)
	If Lcase(IsPreview) = &quot;false&quot; Then
		oSvc = createUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;) 
		oSvc.execute(FilePathWithName, &quot;&quot;, 0) 
	End If
		&apos;msgbox(&quot;dispose&quot;)
	oDoc.dispose()
			&apos;msgbox(&quot;disposeEnd&quot;)
Exit Sub
MyError:
&apos;msgbox(&quot;hi&quot;)
End Sub

&apos;This function sets the Property Value as Word or PDF
Function MakePropertyValue( Optional cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue 
   Dim oPropertyValue As New com.sun.star.beans.PropertyValue 
   If Not IsMissing( cName ) Then 
      oPropertyValue.Name = cName 
   EndIf 
   If Not IsMissing( uValue ) Then 
      oPropertyValue.Value = uValue 
   EndIf 
   MakePropertyValue() = oPropertyValue 
End Function 

&apos;The main procedure to show the First and Last Guide words on Header
Sub SetGuides()
On Error GoTo MyError:
Dim isProgressClosed As Boolean

	oDoc = ThisComponent
	oContWindow = oDoc.CurrentController.Frame.ContainerWindow 
	
	&apos;msgbox &quot;The Open Office window will be hidden while the headers are updated since this cuts the time required for the update in half.&quot;,,&quot;Update Guide Words&quot;
	oContWindow.Visible = false 
	
	&apos;AutoSaveEnableDisable(false) &apos;Disable &quot;Auto Recovery&quot;
	
	mytime = now
PageCount = TotalPages
&apos;=========Progressbar
ShowProcessingDialog() 
ProgressValue = 5
oProgressBarModel.ProgressValueMax = PageCount * 4
oProgressBarModel.ProgressValue = ProgressValue
&apos;=========Progressbar
	
	AlingOverlappingImages()
	
	RemoveOldGuides()
	KeepNextParagraph()
	PageCount = TotalPages
	Redim LastParagraph(PageCount) As String	
	GetLastParagraph()
	keep = &quot;Keepnext&quot; &amp; chr(10) &amp; mytime &amp; chr(10) &amp; now
	mytime = now

	keep = keep &amp; chr(10) &amp; &quot;RemoveOld&quot; &amp; chr(10) &amp; mytime &amp; chr(10) &amp; now
	mytime = now
	&apos;PageCount = TotalPages
	LastPara(PageCount)
	
	keep = keep &amp; chr(10) &amp; &quot;Search&quot; &amp; chr(10) &amp; mytime &amp; chr(10) &amp; now
	mytime = now
	keep = keep &amp; chr(10) &amp; &quot;Insert&quot; &amp; chr(10) &amp; mytime &amp; chr(10) &amp; now
	ReSetTabs()
	
	oProgressBarModel.ProgressValue = PageCount * 4
	oDoc.store() 

	CloseProgressBar	
	&apos;AutoSaveEnableDisable(true) &apos;Enable &quot;Auto Recovery&quot;
	
	oContWindow.Visible = true 
	
	If Lcase(OutputFormat) &lt;&gt; &quot;odt&quot; Then
		ExportToDOC_PDF
	End IF
		
	&apos;msgbox keep
	&apos;&apos;msgbox mytime &amp; chr(10) &amp; now
Exit Sub
MyError:
	If isProgressClosed = False Then
		CloseProgressBar
	End If
	if Err &lt;&gt; 91 Then
		Msgbox &quot;Sorry! Could not update the Guide Words.&quot; , 0 + 64,  &quot;Update Guide Words&quot;
	End If
	oContWindow.Visible = true
End Sub  

&apos;This procedure dispose the Progressbar
Sub CloseProgressBar
  oSubWindow.setVisible(False) 
  oFrame.getFrames().remove(oSubFrame) 
  oSubWindow.dispose() 
End Sub

&apos;This procedure set the dialgue to correct Update Guide Words 
Sub StartDontForget100
	&apos;Msgbox &quot;Please NOTE: Use the Update Guide Words menu item or tool bar item to correct the guide words before printing.&quot; , 0 + 64,  &quot;Guide Word Reminder&quot;
	If LCase(AutoMacro) = &quot;true&quot; Then
		If IsMacroRun = false Then
			SetGuides
		End If	
	Else
		dim clicked as byte
		clicked = msgbox (&quot;Headers are updated to contain the first and last word with the &quot; + &quot;&quot;&quot;&quot; + &quot;Update Guide Words&quot; + &quot;&quot;&quot;&quot; + &quot; tool bar item or Macro menu item.&quot; &amp; chr(10) &amp; &quot;Would you like to update the headers now?&quot;, 4 + 32 + 256 , &quot;Guide Word Reminder&quot;)
		If clicked = 6 Then &apos;If Yes clicked
			If IsMacroRun = false Then
				SetGuides
			End If
		End If
	End If	
	If Lcase(OutputFormat) &lt;&gt; &quot;odt&quot; Then
		ExportToDOC_PDF
	End IF	
End Sub

&apos;This procedure set the dialgue to confirm user to correction of Update Guide Words while Printing
Sub IsGuidewordsCorrected
	dim clicked as byte
	clicked = msgbox ( &quot;If you have not corrected the guide words yet, you can correct them now.&quot; &amp; chr(10) &amp; &quot;Would you like to correct the guide words?&quot;, 4 + 32 + 256 , &quot;Guide Word Reminder&quot;)
	If clicked = 6 Then &apos;If Yes clicked
		SetGuides
	End If
End Sub

&apos;This function gives the Total Pages of the current file
Function TotalPages()
	Dim cont
	cont = ThisComponent.getCurrentController()
	TotalPages = cont.PageCount
End Function

&apos;This function gives the guidewords from the given paragraph
Function GuideWord(oCursor)
Dim myStyle
  oParaEnume = oCursor.createEnumeration() 
  While oParaEnume.hasMoreElements() 
    oPara = oParaEnume.nextElement() 
  &apos; enumeration for portions in the paragraph 
    oPortionEnume = oPara.createEnumeration() 
    While oPortionEnume.hasMoreElements() 
      	TextPortion = oPortionEnume.nextElement() &apos;reversalform-after
		&apos;If (GetStyleName(TextPortion.CharStyleName) = &quot;reversalform&quot; AND Len(Trim(GuideWord)) = 0) OR GetStyleName(TextPortion.CharStyleName) = HEADWORDSTYLE OR GetStyleName(TextPortion.CharStyleName) = HEADWORD_MINOR_STYLE OR  InStr(GetStyleName(TextPortion.CharStyleName), HOMOGRAPHNUMBER) &gt; 0  THEN
	    myStyle = GetStyleName(TextPortion.CharStyleName)
     	If (myStyle = &quot;reversalform&quot; AND Len(Trim(GuideWord)) = 0) OR myStyle = HEADWORDSTYLE OR myStyle = HEADWORD_MINOR_STYLE THEN
      		GuideWord = GuideWord &amp; Trim(TextPortion.String) &amp; &quot; &quot;
		ElseIf Len(Trim(TextPortion.String)) &gt; 0 Then
      		Exit Function
      	End If&apos;reversalform
    WEnd 
  WEnd
End Function

&apos;This procedure push the letter style content (A a, B b), if letter found in last paragraph of the current page.
Sub KeepNextParagraph 
On Error GoTo MyError:
Dim OldPage
OldPage = 0
	ThisComponent.currentController.getViewCursor().jumpToPage(2)
oDoc = ThisComponent 
oVC = oDoc.CurrentController.getViewCursor 
oVC.gotoStart(false) 
Do 

		&apos;=========Progressbar    
			ProgressValue=ProgressValue+1
			MyProgressBar(ProgressValue)
		&apos;=========Progressbar  
		
	page = oVC.getPage
	if page &lt;= OldPage Then &apos;before it was page = OldPage
		Exit sub
	End If	
	oVC.jumpToEndOfPage 

	Last = oDoc.Text.createTextCursorByRange(oVC) 
	Last.gotoStartOfParagraph(false)
	Last.gotoEndOfParagraph(true) 
	&apos;LastParagraph(page) = Last.String
	If Len(Trim(Last.String)) &gt; 0 Then
		If GetStyleName(Last.ParaStyleName) =  TITLEPARASTYLE Then
			Call PushToNextPage
			&apos;PageCount = TotalPages
			&apos;Redim Preserve LastParagraph(PageCount) As String			
			&apos;LastParagraph(page) = &quot;&quot;
			ThisComponent.currentController.getViewCursor().jumpToPage(page)
		End If
	End If	
	OldPage = page
Loop While oVC.jumpToNextPage 

Exit Sub
MyError:
	&apos;Msgbox &quot;Sorry! Could not update the Guide Words.&quot; , 0 + 64,  &quot;Update Guide Words&quot;	 
End Sub

&apos;This procedure gets the last paragraph of every page
Sub GetLastParagraph 
On Error GoTo MyError:
Dim OldPage
OldPage = 0
	ThisComponent.currentController.getViewCursor().jumpToPage(2)
oDoc = ThisComponent 
oVC = oDoc.CurrentController.getViewCursor 
oVC.gotoStart(false) 
Do 

		&apos;=========Progressbar    
			ProgressValue=ProgressValue+1
			MyProgressBar(ProgressValue)
		&apos;=========Progressbar  
		
	page = oVC.getPage
	if page &lt;= OldPage Then &apos;before it was page = OldPage
		Exit sub
	End If	
		
	oVC.jumpToEndOfPage 
	Last = oDoc.Text.createTextCursorByRange(oVC) 
	Last.gotoStartOfParagraph(false)
	Last.gotoEndOfParagraph(true) 
	LastParagraph(page) = Last.String
	OldPage = page
Loop While oVC.jumpToNextPage 
Exit Sub
MyError:
	&apos;Msgbox &quot;Sorry! Could not update the Guide Words.&quot; , 0 + 64,  &quot;Update Guide Words&quot;
End Sub


&apos;This procedure find the first paragraph of every page
Sub InsertGuidewords(HiddenParagraph,PageCount) 
dim PrevPageNo
&apos;Dim OldPage
&apos;OldPage = 0

	ThisComponent.currentController.getViewCursor().jumpToPage(2)
oDoc = ThisComponent 
oVC = oDoc.CurrentController.getViewCursor 
oVC.gotoStart(false) 
PageCount = TotalPages
Do 

		&apos;=========Progressbar    
			ProgressValue=ProgressValue+1
			MyProgressBar(ProgressValue)
		&apos;=========Progressbar  
		
	page = oVC.getPage
	&apos;if page &lt;= OldPage Then &apos;before it was page = OldPage
		&apos;Exit sub
	&apos;End If	
	if PrevPageNo &gt;= page Then
		page = PrevPageNo + 1
		ThisComponent.currentController.getViewCursor().jumpToPage(page)
	end if
	
	if PageCount = page then
		Exit Do
	End If	
	oVC.jumpToEndOfPage

		paraTextPageNo = split(HiddenParagraph(page,0),&quot;`~&quot;)
        If UBound(paraTextPageNo) = 1 Then
			&apos;For Last Guide Word
	    	paraPos = val(paraTextPageNo(0)) 
			paraText = Trim(paraTextPageNo(1))
			paraStyle = LASTGUIDESTYLE
			&apos;InsertGuide(paraText,paraPos,paraStyle)
	        	
			&apos;For First Guide Word
			paraTextPageNo = split(HiddenParagraph(page,1),&quot;`~&quot;)
			paraPos1 = val(paraTextPageNo(0)) 
			paraText1 = Trim(paraTextPageNo(1))
			paraStyle1 = FIRSTGUIDESTYLE
			&apos;InsertGuide(paraText1,paraPos1,paraStyle1)
			
		
			If Len(Trim(paraText)) = 0 And Len(Trim(paraText1)) &gt; 0 Then
				paraText = paraText1
			End If
			
			If Len(Trim(paraText1)) = 0 And Len(Trim(paraText)) &gt; 0 Then
				paraText1 = paraText
			End If			
			
			If LastParagraph(page -1) = LastParagraph(page) And Len(Trim(LastParagraph(page))) &gt; 0 Then
				InsertGuide(paraText1,paraPos1,paraStyle1)
				InsertGuide(paraText,paraPos,paraStyle)
			Else
				InsertGuide(paraText,0,paraStyle)
				Currpage = oVC.getPage
				If Currpage &lt;&gt; page Then
					ThisComponent.currentController.getViewCursor().jumpToPage(page)
					oVC.jumpToEndOfPage	
				End If				
				InsertGuide(paraText1,0,paraStyle1)
			End If
				
			&apos;&apos;InsertGuide(paraText1,paraPos1,paraStyle1)
		End If
		Currpage = oVC.getPage
		If Currpage &lt;&gt; page Then
			ThisComponent.currentController.getViewCursor().jumpToPage(page)	
		End If
		PrevPageNo = page
		&apos;OldPage = page
Loop While oVC.jumpToNextPage 	 
End Sub

&apos;This function finds whether guideword exists in given pragraph
Function IsGuide(oCursor)
Dim myStyle
  IsGuide = False
  oParaEnume = oCursor.createEnumeration() 
  While oParaEnume.hasMoreElements() 
    oPara = oParaEnume.nextElement() 
  &apos; enumeration for portions in the paragraph 
    oPortionEnume = oPara.createEnumeration() 
    While oPortionEnume.hasMoreElements() 
      oPortion = oPortionEnume.nextElement() 
      &apos;msgbox &quot;String: &quot; &amp; oPortion.getString() &amp; &quot;CharStyleName: &quot; &amp; oPortion.CharStyleName &apos;HOMOGRAPHNUMBER 
      &apos;If oPortion.ParaStyleName = ENTRYPARASTYLE AND GetStyleName(oPortion.CharStyleName) = &quot;reversalform&quot; OR GetStyleName(oPortion.CharStyleName) = HEADWORDSTYLE OR GetStyleName(oPortion.CharStyleName) = HEADWORD_MINOR_STYLE OR InStr(GetStyleName(oPortion.CharStyleName), HOMOGRAPHNUMBER) &gt; 0 THEN
	  myStyle = GetStyleName(oPortion.CharStyleName)	
      If oPortion.ParaStyleName = ENTRYPARASTYLE AND myStyle = &quot;reversalform&quot; OR myStyle = HEADWORDSTYLE OR myStyle = HEADWORD_MINOR_STYLE THEN
      		IsGuide = True
      End If
      Exit Function
    WEnd 
  WEnd
End Function

&apos;This procedure finds first and last guidewords in everypage.
Sub LastPara(PageCount) 
Dim HiddenParagraph(PageCount,1) As String
Dim OldPage
OldPage = 0

On Error GoTo MyError:
	ThisComponent.currentController.getViewCursor().jumpToPage(2)

oDoc = ThisComponent 
oVC = oDoc.CurrentController.getViewCursor 
oVC.gotoStart(false) 
Do

		&apos;=========Progressbar    
			ProgressValue=ProgressValue+1
			MyProgressBar(ProgressValue)
		&apos;=========Progressbar  
		
    page = oVC.getPage 
    
	if page &lt;= OldPage Then &apos;before it was page = OldPage
		InsertGuidewords(HiddenParagraph,PageCount)
		Exit sub
	End If	
	    
If page &gt; 1 Then

    LastParaString = LastParagraph(page)
 	First = oDoc.Text.createTextCursorByRange(oVC) 
 	IsFirstPara = True
 	IsEmptyPage = False
 	IsEmptyGuidewordPage = False

	If LastParagraph(page -1) = LastParagraph(page) And Len(Trim(LastParaString)) &gt; 0 Then
		First = PrevLast
		Last = PrevLast
	Else
	  
		Do
		
		  First.gotoEndOfParagraph(true) 
	
		  If IsFirstPara Then
		  	FirstParaString = First.String
		  	IsFirstPara = False
		  End If
		  If First.String =  LastParaString Then
		  	  	If	First.String = &quot;&quot; And LastParaString = &quot;&quot; Then
		  	  		IsEmptyPage = True
		  	  	ElseIf page &gt; 2 Then
		  	  		If First.String = PrevLast.String Then
		  	  			First = PrevLast
		  	  			IsEmptyGuidewordPage = True
		  	  		End If
		  	  	End If
		  	  	Exit Do
		  Else
			  If IsGuide(First) Then
			    &apos;MsgBox(page &amp; &quot; Left &quot; &amp; First.String)
			    Exit Do 
			  End If	
		  End IF	
		Loop While First.gotoNextParagraph(false) 
	    
		oVC.jumpToEndOfPage
	
	 	Last = oDoc.Text.createTextCursorByRange(oVC) 
		Do 
		&apos;Last = oDoc.Text.createTextCursorByRange(oVC) 
		Last.gotoStartOfParagraph(false)
		Last.gotoEndOfParagraph(true) 
	
		  If IsEmptyPage Then
		  	Exit Do
		  ElseIf IsEmptyGuidewordPage Then	   	  
		  	Last = PrevLast
		  	Exit Do
		  Else	  
			  If IsGuide(Last) Then
			    &apos;MsgBox((page &amp; &quot; Right &quot; &amp; Last.String) 
			    Exit Do
			  End If
		  End If	
		Loop While Last.gotoPreviousParagraph(false) 
	
	End If
	
    if page = PageCount Then
    	&apos;msgbox &quot;First : &quot; &amp; First.String &amp; Chr(13) &amp; &quot;Last : &quot; &amp; Last.String
    	If Last.String = &quot;&quot; Then
    		HiddenParagraph(page-1,0) = page-1 &amp; &quot;`~&quot; &amp; GuideWord(PrevLast)
    		HiddenParagraph(page-1,1) = page-1 &amp; &quot;`~&quot; &amp; GuideWord(PrevLast)   
		Else
	    	HiddenParagraph(page-1,0) = page-1 &amp; &quot;`~&quot; &amp; GuideWord(Last)
	    	HiddenParagraph(page-1,1) = page-1 &amp; &quot;`~&quot; &amp; GuideWord(First)   
		End IF
	else 
    	HiddenParagraph(page-1,0) = page-1 &amp; &quot;`~&quot; &amp; GuideWord(Last)
    	HiddenParagraph(page-1,1) = page-1 &amp; &quot;`~&quot; &amp; GuideWord(First)   
	end if   
	
    PrevFirst = First
    PrevLast = Last	
    OldPage = page	
End If	

Loop While oVC.jumpToNextPage 

	&apos;mytime = now
InsertGuidewords(HiddenParagraph,PageCount)
Exit Sub
MyError:
	InsertGuidewords(HiddenParagraph,PageCount)
	&apos;Msgbox &quot;Sorry! Could not update the Guide Words.&quot; , 0 + 64,  &quot;Update Guide Words&quot;
End Sub

&apos;This procedure called from KeepNextParagraph
&apos;This procedure push the letter style content (A a, B b), if letter found in last paragraph of the current page.
Sub PushToNextPage
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos;dispatcher.executeDispatch(document, &quot;.uno:GoToPrevPara&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:GotoStartOfPara&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:InsertPara&quot;, &quot;&quot;, 0, Array())
End Sub

&apos;This function returns first styleName from the StylesTree (entry~letData)
Function GetStyleName(StylesTree)
	Dim arrStyles
	arrStyles = split(StylesTree,&quot;_&quot;)
	If(Ubound(arrStyles) &gt; 0) Then
		GetStyleName = arrStyles(0)
	Else
		GetStyleName = &quot;&quot;
	End If
End Function

&apos;Insert the first or last guide word in given Position (Page)
Sub InsertGuide(par,pos,style)
	Dim guide as String

	If(Len(Trim(par)) &gt; 19) Then
		guide =  Left(par,16) &amp; CONTINUATION_CHARACTER 
	Else
		guide =  par		
	End If

	move(pos,style)

   	InsertPara(guide, style)
End Sub        

&apos;This procedure creates empty paragraphs to print the guidewords
Sub move(pos,style)
	dim document   as object
	dim dispatcher as object
	document = ThisComponent.CurrentController.Frame 
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;) 
	If pos = 0 Then
	    dispatcher.executeDispatch(document, &quot;.uno:GotoStartOfPara&quot;, &quot;&quot;, 0, Array())
		&apos;dispatcher.executeDispatch(document, &quot;.uno:GoUp&quot;, &quot;&quot;, 0, Array())     
		dispatcher.executeDispatch(document, &quot;.uno:GoUp&quot;, &quot;&quot;, 0, Array())     
	    dispatcher.executeDispatch(document, &quot;.uno:GotoEndOfPara&quot;, &quot;&quot;, 0, Array()) 
		dispatcher.executeDispatch(document, &quot;.uno:InsertPara&quot;, &quot;&quot;, 0, Array())
	Else &apos;If Page had no new paragraphs, this code will be executed
		If style = &quot;GuideL&quot; Then
			ThisComponent.currentController.getViewCursor().jumpToPage(pos)
			dispatcher.executeDispatch(document, &quot;.uno:GoDown&quot;, &quot;&quot;, 0, Array()) 
			dispatcher.executeDispatch(document, &quot;.uno:InsertPara&quot;, &quot;&quot;, 0, Array())
			dispatcher.executeDispatch(document, &quot;.uno:InsertPara&quot;, &quot;&quot;, 0, Array())

			dim args1(0) as new com.sun.star.beans.PropertyValue
			args1(0).Name = &quot;Text&quot;
			args1(0).Value = CHR$(9)
			dispatcher.executeDispatch(document, &quot;.uno:InsertText&quot;, &quot;&quot;, 0, args1())			
		Else
			dispatcher.executeDispatch(document, &quot;.uno:GoToStartOfLine&quot;, &quot;&quot;, 0, Array())
			dispatcher.executeDispatch(document, &quot;.uno:InsertPara&quot;, &quot;&quot;, 0, Array())
		End If
		
		dispatcher.executeDispatch(document, &quot;.uno:GoUp&quot;, &quot;&quot;, 0, Array()) 

	End If
End Sub

&apos;Insert the first or last guide word
Sub InsertPara(guide, style)
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Text&quot;
	args1(0).Value = guide 
	dispatcher.executeDispatch(document, &quot;.uno:InsertText&quot;, &quot;&quot;, 0, args1())

	dim args2(1) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;Template&quot;
	args2(0).Value = style&apos; &amp; &quot;D&quot;
	args2(1).Name = &quot;Family&quot; 
	args2(1).Value = 2 
	dispatcher.executeDispatch(document, &quot;.uno:StyleApply&quot;, &quot;&quot;, 0, args2())
End Sub


&apos;This procedure removes existing hidden guide words
Sub RemoveOldGuides
	Dim oParEnum           &apos;Paragraph enumerator 
	Dim oPar               &apos;Current paragraph 
	oParEnum = ThisComponent.Text.createEnumeration() 
	Do While oParEnum.hasMoreElements() 
		oPar = oParEnum.nextElement() 
		If oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then 
			If InStr(oPar.ParaStyleName, &quot;Guide&quot;) &gt; 0 Then 
			    &apos;oPar.Anchor.ParaStyleName = ENTRYPARASTYLE
				ThisComponent.Text.removeTextContent(oPar) 
			End If 
		End If 
	Loop
End Sub

&apos;This function returns Page Number of given Paragraph
Function pageNo(par)
	Dim cont, vc, st
	st = par.getStart()
	cont = ThisComponent.getCurrentController()
	cont.select(st)
	pageNo = cont.getViewCursor.getPage()
End Function

&apos;This procedure reset the Header/Footer&apos;s tabs based on the PageSize
Sub ReSetTabs

dim oStyle, oPageStyles, center, right
dim document   as object
dim dispatcher as object

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
oDoc = ThisComponent 

  oVC = oDoc.getCurrentController().getViewCursor()
  sPageStyleName = oVC.PageStyleName

  oPageStyles = oDoc.StyleFamilies.getByName(&quot;PageStyles&quot;)
  oStyle = oPageStyles.getByName(sPageStyleName)
  center =  cint((oStyle.Width / 2) - oStyle.LeftMargin)
  right = oStyle.Width - oStyle.RightMargin

oVC = oDoc.CurrentController.getViewCursor 
&apos;-------------------------------------------- FOR HEADER ---------------------------
If oStyle.HeaderIsOn Then
	oVC.JumpToPage(2)  
	dispatcher.executeDispatch(document, &quot;.uno:JumpToHeader&quot;, &quot;&quot;, 0, Array())
	dim args4(0) as new com.sun.star.beans.PropertyValue
	args4(0).Name = &quot;Tabstops.TabStops&quot;
	args4(0).Value = Array(Array(center,com.sun.star.style.TabAlign.CENTER,&quot;,&quot;,&quot; &quot;),Array(right,com.sun.star.style.TabAlign.RIGHT,&quot;,&quot;,&quot; &quot;))
	dispatcher.executeDispatch(document, &quot;.uno:Tabstops&quot;, &quot;&quot;, 0, args4())
	
	If oStyle.PageStyleLayout = 3 Then
		oVC.JumpToPage(3)
		dispatcher.executeDispatch(document, &quot;.uno:JumpToHeader&quot;, &quot;&quot;, 0, Array())
		dim args8(0) as new com.sun.star.beans.PropertyValue
		args8(0).Name = &quot;Tabstops.TabStops&quot;
		args8(0).Value = Array(Array(center,com.sun.star.style.TabAlign.CENTER,&quot;,&quot;,&quot; &quot;),Array(right,com.sun.star.style.TabAlign.RIGHT,&quot;,&quot;,&quot; &quot;))
		dispatcher.executeDispatch(document, &quot;.uno:Tabstops&quot;, &quot;&quot;, 0, args8())
	End If
End If
&apos;-------------------------------------------- FOR FOOTER ---------------------------
If oStyle.FooterIsOn Then
	oVC.JumpToPage(2)  
	dispatcher.executeDispatch(document, &quot;.uno:JumpToFooter&quot;, &quot;&quot;, 0, Array())
	dim args5(0) as new com.sun.star.beans.PropertyValue
	args5(0).Name = &quot;Tabstops.TabStops&quot;
	args5(0).Value = Array(Array(center,com.sun.star.style.TabAlign.CENTER,&quot;,&quot;,&quot; &quot;),Array(right,com.sun.star.style.TabAlign.RIGHT,&quot;,&quot;,&quot; &quot;))
	dispatcher.executeDispatch(document, &quot;.uno:Tabstops&quot;, &quot;&quot;, 0, args5())

	If oStyle.PageStyleLayout = 3 Then	
		oVC.JumpToPage(3)
		dispatcher.executeDispatch(document, &quot;.uno:JumpToFooter&quot;, &quot;&quot;, 0, Array())
		dim args6(0) as new com.sun.star.beans.PropertyValue
		args6(0).Name = &quot;Tabstops.TabStops&quot;
		args6(0).Value = Array(Array(center,com.sun.star.style.TabAlign.CENTER,&quot;,&quot;,&quot; &quot;),Array(right,com.sun.star.style.TabAlign.RIGHT,&quot;,&quot;,&quot; &quot;))
		dispatcher.executeDispatch(document, &quot;.uno:Tabstops&quot;, &quot;&quot;, 0, args6())
	End If
End If

end sub


</script:module>