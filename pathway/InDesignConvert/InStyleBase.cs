using System;
using System.Collections;
using System.IO;
using System.Xml;
using SIL.Tool;

namespace SIL.PublishingSolution
{
    public class InStyleBase
    {
        public XmlTextWriter _writer;

        ArrayList _allParagraphProperty;
        ArrayList _allCharacterProperty;

        /// -------------------------------------------------------------------------------------------
        /// <summary>
        /// create attributes collection
        /// 
        /// <list> 
        /// </list>
        /// </summary>
        /// <returns></returns>
        /// -------------------------------------------------------------------------------------------
        public void LoadAllProperty()
        {
            // Inialize style properties
            _allParagraphProperty = new ArrayList();
            _allCharacterProperty = new ArrayList();
            try
            {
                _allParagraphProperty.Add("Imported");
                _allParagraphProperty.Add("FillColor");
                _allParagraphProperty.Add("FontStyle");
                _allParagraphProperty.Add("PointSize");
                _allParagraphProperty.Add("HorizontalScale");
                _allParagraphProperty.Add("KerningMethod");
                _allParagraphProperty.Add("Ligatures");
                _allParagraphProperty.Add("PageNumberType");
                _allParagraphProperty.Add("StrokeWeight");
                _allParagraphProperty.Add("Tracking");
                _allParagraphProperty.Add("Composer");
                _allParagraphProperty.Add("DropCapCharacters");
                _allParagraphProperty.Add("DropCapLines");
                _allParagraphProperty.Add("BaselineShift");
                _allParagraphProperty.Add("Capitalization");
                _allParagraphProperty.Add("StrokeColor");
                _allParagraphProperty.Add("HyphenateLadderLimit");
                _allParagraphProperty.Add("VerticalScale");
                _allParagraphProperty.Add("LeftIndent");
                _allParagraphProperty.Add("RightIndent");
                _allParagraphProperty.Add("FirstLineIndent");
                _allParagraphProperty.Add("AutoLeading");
                _allParagraphProperty.Add("AppliedLanguage");
                _allParagraphProperty.Add("Hyphenation");
                _allParagraphProperty.Add("HyphenateAfterFirst");
                _allParagraphProperty.Add("HyphenateBeforeLast");
                _allParagraphProperty.Add("HyphenateCapitalizedWords");
                _allParagraphProperty.Add("HyphenateWordsLongerThan");
                _allParagraphProperty.Add("NoBreak");
                _allParagraphProperty.Add("HyphenationZone");
                _allParagraphProperty.Add("SpaceBefore");
                _allParagraphProperty.Add("SpaceAfter");
                _allParagraphProperty.Add("Underline");
                _allParagraphProperty.Add("OTFFigureStyle");
                _allParagraphProperty.Add("DesiredWordSpacing");
                _allParagraphProperty.Add("MaximumWordSpacing");
                _allParagraphProperty.Add("MinimumWordSpacing");
                _allParagraphProperty.Add("DesiredLetterSpacing");
                _allParagraphProperty.Add("MaximumLetterSpacing");
                _allParagraphProperty.Add("MinimumLetterSpacing");
                _allParagraphProperty.Add("DesiredGlyphScaling");
                _allParagraphProperty.Add("MaximumGlyphScaling");
                _allParagraphProperty.Add("MinimumGlyphScaling");
                _allParagraphProperty.Add("StartParagraph");
                _allParagraphProperty.Add("KeepAllLinesTogether");
                _allParagraphProperty.Add("KeepWithNext");
                _allParagraphProperty.Add("KeepFirstLines");
                _allParagraphProperty.Add("KeepLastLines");
                _allParagraphProperty.Add("Position");
                _allParagraphProperty.Add("StrikeThru");
                _allParagraphProperty.Add("CharacterAlignment");
                _allParagraphProperty.Add("KeepLinesTogether");
                _allParagraphProperty.Add("StrokeTint");
                _allParagraphProperty.Add("FillTint");
                _allParagraphProperty.Add("OverprintStroke");
                _allParagraphProperty.Add("OverprintFill");
                _allParagraphProperty.Add("GradientStrokeAngle");
                _allParagraphProperty.Add("GradientFillAngle");
                _allParagraphProperty.Add("GradientStrokeLength");
                _allParagraphProperty.Add("GradientFillLength");
                _allParagraphProperty.Add("GradientStrokeStart");
                _allParagraphProperty.Add("GradientFillStart");
                _allParagraphProperty.Add("Skew");
                _allParagraphProperty.Add("RuleAboveLineWeight");
                _allParagraphProperty.Add("RuleAboveTint");
                _allParagraphProperty.Add("RuleAboveOffset");
                _allParagraphProperty.Add("RuleAboveLeftIndent");
                _allParagraphProperty.Add("RuleAboveRightIndent");
                _allParagraphProperty.Add("RuleAboveWidth");
                _allParagraphProperty.Add("RuleBelowLineWeight");
                _allParagraphProperty.Add("RuleBelowTint");
                _allParagraphProperty.Add("RuleBelowOffset");
                _allParagraphProperty.Add("RuleBelowLeftIndent");
                _allParagraphProperty.Add("RuleBelowRightIndent");
                _allParagraphProperty.Add("RuleBelowWidth");
                _allParagraphProperty.Add("RuleAboveOverprint");
                _allParagraphProperty.Add("RuleBelowOverprint");
                _allParagraphProperty.Add("RuleAbove");
                _allParagraphProperty.Add("RuleBelow");
                _allParagraphProperty.Add("LastLineIndent");
                _allParagraphProperty.Add("HyphenateLastWord");
                _allParagraphProperty.Add("ParagraphBreakType");
                _allParagraphProperty.Add("SingleWordJustification");
                _allParagraphProperty.Add("OTFOrdinal");
                _allParagraphProperty.Add("OTFFraction");
                _allParagraphProperty.Add("OTFDiscretionaryLigature");
                _allParagraphProperty.Add("OTFTitling");
                _allParagraphProperty.Add("RuleAboveGapTint");
                _allParagraphProperty.Add("RuleAboveGapOverprint");
                _allParagraphProperty.Add("RuleBelowGapTint");
                _allParagraphProperty.Add("RuleBelowGapOverprint");
                _allParagraphProperty.Add("Justification");
                _allParagraphProperty.Add("DropcapDetail");
                _allParagraphProperty.Add("PositionalForm");
                _allParagraphProperty.Add("OTFMark");
                _allParagraphProperty.Add("HyphenWeight");
                _allParagraphProperty.Add("OTFLocale");
                _allParagraphProperty.Add("HyphenateAcrossColumns");
                _allParagraphProperty.Add("KeepRuleAboveInFrame");
                _allParagraphProperty.Add("IgnoreEdgeAlignment");
                _allParagraphProperty.Add("OTFSlashedZero");
                _allParagraphProperty.Add("OTFStylisticSets");
                _allParagraphProperty.Add("OTFHistorical");
                _allParagraphProperty.Add("OTFContextualAlternate");
                _allParagraphProperty.Add("UnderlineGapOverprint");
                _allParagraphProperty.Add("UnderlineGapTint");
                _allParagraphProperty.Add("UnderlineOffset");
                _allParagraphProperty.Add("UnderlineOverprint");
                _allParagraphProperty.Add("UnderlineTint");
                _allParagraphProperty.Add("UnderlineWeight");
                _allParagraphProperty.Add("StrikeThroughGapOverprint");
                _allParagraphProperty.Add("StrikeThroughGapTint");
                _allParagraphProperty.Add("StrikeThroughOffset");
                _allParagraphProperty.Add("StrikeThroughOverprint");
                _allParagraphProperty.Add("StrikeThroughTint");
                _allParagraphProperty.Add("StrikeThroughWeight");
                _allParagraphProperty.Add("MiterLimit");
                _allParagraphProperty.Add("StrokeAlignment");
                _allParagraphProperty.Add("EndJoin");
                _allParagraphProperty.Add("OTFSwash");
                _allParagraphProperty.Add("Tsume");
                _allParagraphProperty.Add("LeadingAki");
                _allParagraphProperty.Add("TrailingAki");
                _allParagraphProperty.Add("KinsokuType");
                _allParagraphProperty.Add("KinsokuHangType");
                _allParagraphProperty.Add("BunriKinshi");
                _allParagraphProperty.Add("RubyOpenTypePro");
                _allParagraphProperty.Add("RubyFontSize");
                _allParagraphProperty.Add("RubyAlignment");
                _allParagraphProperty.Add("RubyType");
                _allParagraphProperty.Add("RubyParentSpacing");
                _allParagraphProperty.Add("RubyXScale");
                _allParagraphProperty.Add("RubyYScale");
                _allParagraphProperty.Add("RubyXOffset");
                _allParagraphProperty.Add("RubyYOffset");
                _allParagraphProperty.Add("RubyPosition");
                _allParagraphProperty.Add("RubyAutoAlign");
                _allParagraphProperty.Add("RubyParentOverhangAmount");
                _allParagraphProperty.Add("RubyOverhang");
                _allParagraphProperty.Add("RubyAutoScaling");
                _allParagraphProperty.Add("RubyParentScalingPercent");
                _allParagraphProperty.Add("RubyTint");
                _allParagraphProperty.Add("RubyOverprintFill");
                _allParagraphProperty.Add("RubyStrokeTint");
                _allParagraphProperty.Add("RubyOverprintStroke");
                _allParagraphProperty.Add("RubyWeight");
                _allParagraphProperty.Add("KentenKind");
                _allParagraphProperty.Add("KentenFontSize");
                _allParagraphProperty.Add("KentenXScale");
                _allParagraphProperty.Add("KentenYScale");
                _allParagraphProperty.Add("KentenPlacement");
                _allParagraphProperty.Add("KentenAlignment");
                _allParagraphProperty.Add("KentenPosition");
                _allParagraphProperty.Add("KentenCustomCharacter");
                _allParagraphProperty.Add("KentenCharacterSet");
                _allParagraphProperty.Add("KentenTint");
                _allParagraphProperty.Add("KentenOverprintFill");
                _allParagraphProperty.Add("KentenStrokeTint");
                _allParagraphProperty.Add("KentenOverprintStroke");
                _allParagraphProperty.Add("KentenWeight");
                _allParagraphProperty.Add("Tatechuyoko");
                _allParagraphProperty.Add("TatechuyokoXOffset");
                _allParagraphProperty.Add("TatechuyokoYOffset");
                _allParagraphProperty.Add("AutoTcy");
                _allParagraphProperty.Add("AutoTcyIncludeRoman");
                _allParagraphProperty.Add("Jidori");
                _allParagraphProperty.Add("GridGyoudori");
                _allParagraphProperty.Add("GridAlignFirstLineOnly");
                _allParagraphProperty.Add("GridAlignment");
                _allParagraphProperty.Add("CharacterRotation");
                _allParagraphProperty.Add("RotateSingleByteCharacters");
                _allParagraphProperty.Add("Rensuuji");
                _allParagraphProperty.Add("ShataiMagnification");
                _allParagraphProperty.Add("ShataiDegreeAngle");
                _allParagraphProperty.Add("ShataiAdjustTsume");
                _allParagraphProperty.Add("ShataiAdjustRotation");
                _allParagraphProperty.Add("WarichuLines");
                _allParagraphProperty.Add("Warichu");
                _allParagraphProperty.Add("WarichuSize");
                _allParagraphProperty.Add("WarichuLineSpacing");
                _allParagraphProperty.Add("WarichuAlignment");
                _allParagraphProperty.Add("WarichuCharsBeforeBreak");
                _allParagraphProperty.Add("WarichuCharsAfterBreak");
                _allParagraphProperty.Add("OTFHVKana");
                _allParagraphProperty.Add("OTFProportionalMetrics");
                _allParagraphProperty.Add("OTFRomanItalics");
                _allParagraphProperty.Add("LeadingModel");
                _allParagraphProperty.Add("ScaleAffectsLineHeight");
                _allParagraphProperty.Add("ParagraphGyoudori");
                _allParagraphProperty.Add("CjkGridTracking");
                _allParagraphProperty.Add("GlyphForm");
                _allParagraphProperty.Add("RubyAutoTcyDigits");
                _allParagraphProperty.Add("RubyAutoTcyIncludeRoman");
                _allParagraphProperty.Add("RubyAutoTcyAutoScale");
                _allParagraphProperty.Add("TreatIdeographicSpaceAsSpace");
                _allParagraphProperty.Add("AllowArbitraryHyphenation");
                _allParagraphProperty.Add("BulletsAndNumberingListType");
                _allParagraphProperty.Add("NumberingStartAt");
                _allParagraphProperty.Add("NumberingLevel");
                _allParagraphProperty.Add("NumberingContinue");
                _allParagraphProperty.Add("NumberingApplyRestartPolicy");
                _allParagraphProperty.Add("BulletsAlignment");
                _allParagraphProperty.Add("NumberingAlignment");
                _allParagraphProperty.Add("NumberingExpression");
                _allParagraphProperty.Add("BulletsTextAfter");
                _allParagraphProperty.Add("DigitsType");
                _allParagraphProperty.Add("Kashidas");
                _allParagraphProperty.Add("DiacriticPosition");
                _allParagraphProperty.Add("CharacterDirection");
                _allParagraphProperty.Add("ParagraphDirection");
                _allParagraphProperty.Add("ParagraphJustification");
                _allParagraphProperty.Add("XOffsetDiacritic");
                _allParagraphProperty.Add("YOffsetDiacritic");
                _allParagraphProperty.Add("OTFOverlapSwash");
                _allParagraphProperty.Add("OTFStylisticAlternate");
                _allParagraphProperty.Add("OTFJustificationAlternate");
                _allParagraphProperty.Add("OTFStretchedAlternate");
                _allParagraphProperty.Add("KeyboardDirection");

                _allCharacterProperty.Add("FillColor");
                _allCharacterProperty.Add("FontStyle");
                _allCharacterProperty.Add("PointSize");
                _allCharacterProperty.Add("KerningMethod");
                _allCharacterProperty.Add("Ligatures");
                _allCharacterProperty.Add("Tracking");
                _allCharacterProperty.Add("Capitalization");
                _allCharacterProperty.Add("NoBreak");
                _allCharacterProperty.Add("Underline");
                _allCharacterProperty.Add("Position");
                _allCharacterProperty.Add("StrikeThru");
                _allCharacterProperty.Add("OTFSlashedZero");
            }
            catch (Exception ex)
            {
                Console.Write(ex.Message);
            }
        }

        public void CreateRootParagraphStyleGroup()
        {
            _writer.WriteStartElement("RootParagraphStyleGroup");
            _writer.WriteAttributeString("Self", "u69");
            _writer.WriteStartElement("ParagraphStyle");
            _writer.WriteAttributeString("Self", "ParagraphStyle/$ID/[No paragraph style]");
            _writer.WriteAttributeString("Name", "$ID/[No paragraph style]");
            _writer.WriteAttributeString("Imported", "false");
            _writer.WriteAttributeString("FillColor", "Color/Black");
            _writer.WriteAttributeString("FontStyle", "Regular");
            _writer.WriteAttributeString("PointSize", "12");
            _writer.WriteAttributeString("HorizontalScale", "100");
            _writer.WriteAttributeString("KerningMethod", "$ID/Metrics");
            _writer.WriteAttributeString("Ligatures", "true");
            _writer.WriteAttributeString("PageNumberType", "AutoPageNumber");
            _writer.WriteAttributeString("StrokeWeight", "1");
            _writer.WriteAttributeString("Tracking", "0");
            _writer.WriteAttributeString("Composer", "HL Composer");
            _writer.WriteAttributeString("DropCapCharacters", "0");
            _writer.WriteAttributeString("DropCapLines", "0");
            _writer.WriteAttributeString("BaselineShift", "0");
            _writer.WriteAttributeString("Capitalization", "Normal");
            _writer.WriteAttributeString("StrokeColor", "Swatch/None");
            _writer.WriteAttributeString("HyphenateLadderLimit", "3");
            _writer.WriteAttributeString("VerticalScale", "100");
            _writer.WriteAttributeString("LeftIndent", "0");
            _writer.WriteAttributeString("RightIndent", "0");
            _writer.WriteAttributeString("FirstLineIndent", "0");
            _writer.WriteAttributeString("AutoLeading", "120");
            _writer.WriteAttributeString("AppliedLanguage", "$ID/English: USA");
            _writer.WriteAttributeString("Hyphenation", "true");
            _writer.WriteAttributeString("HyphenateAfterFirst", "2");
            _writer.WriteAttributeString("HyphenateBeforeLast", "2");
            _writer.WriteAttributeString("HyphenateCapitalizedWords", "true");
            _writer.WriteAttributeString("HyphenateWordsLongerThan", "5");
            _writer.WriteAttributeString("NoBreak", "false");
            _writer.WriteAttributeString("HyphenationZone", "36");
            _writer.WriteAttributeString("SpaceBefore", "0");
            _writer.WriteAttributeString("SpaceAfter", "0");
            _writer.WriteAttributeString("Underline", "false");
            _writer.WriteAttributeString("OTFFigureStyle", "Default");
            _writer.WriteAttributeString("DesiredWordSpacing", "100");
            _writer.WriteAttributeString("MaximumWordSpacing", "133");
            _writer.WriteAttributeString("MinimumWordSpacing", "80");
            _writer.WriteAttributeString("DesiredLetterSpacing", "0");
            _writer.WriteAttributeString("MaximumLetterSpacing", "0");
            _writer.WriteAttributeString("MinimumLetterSpacing", "0");
            _writer.WriteAttributeString("DesiredGlyphScaling", "100");
            _writer.WriteAttributeString("MaximumGlyphScaling", "100");
            _writer.WriteAttributeString("MinimumGlyphScaling", "100");
            _writer.WriteAttributeString("StartParagraph", "Anywhere");
            _writer.WriteAttributeString("KeepAllLinesTogether", "false");
            _writer.WriteAttributeString("KeepWithNext", "0");
            _writer.WriteAttributeString("KeepFirstLines", "2");
            _writer.WriteAttributeString("KeepLastLines", "2");
            _writer.WriteAttributeString("Position", "Normal");
            _writer.WriteAttributeString("StrikeThru", "false");
            _writer.WriteAttributeString("CharacterAlignment", "AlignEmCenter");
            _writer.WriteAttributeString("KeepLinesTogether", "true"); //Samdoss
            _writer.WriteAttributeString("StrokeTint", "-1");
            _writer.WriteAttributeString("FillTint", "-1");
            _writer.WriteAttributeString("OverprintStroke", "false");
            _writer.WriteAttributeString("OverprintFill", "false");
            _writer.WriteAttributeString("GradientStrokeAngle", "0");
            _writer.WriteAttributeString("GradientFillAngle", "0");
            _writer.WriteAttributeString("GradientStrokeLength", "-1");
            _writer.WriteAttributeString("GradientFillLength", "-1");
            _writer.WriteAttributeString("GradientStrokeStart", "0 0");
            _writer.WriteAttributeString("GradientFillStart", "0 0");
            _writer.WriteAttributeString("Skew", "0");
            _writer.WriteAttributeString("RuleAboveLineWeight", "1");
            _writer.WriteAttributeString("RuleAboveTint", "-1");
            _writer.WriteAttributeString("RuleAboveOffset", "0");
            _writer.WriteAttributeString("RuleAboveLeftIndent", "0");
            _writer.WriteAttributeString("RuleAboveRightIndent", "0");
            _writer.WriteAttributeString("RuleAboveWidth", "ColumnWidth");
            _writer.WriteAttributeString("RuleBelowLineWeight", "1");
            _writer.WriteAttributeString("RuleBelowTint", "-1");
            _writer.WriteAttributeString("RuleBelowOffset", "0");
            _writer.WriteAttributeString("RuleBelowLeftIndent", "0");
            _writer.WriteAttributeString("RuleBelowRightIndent", "0");
            _writer.WriteAttributeString("RuleBelowWidth", "ColumnWidth");
            _writer.WriteAttributeString("RuleAboveOverprint", "false");
            _writer.WriteAttributeString("RuleBelowOverprint", "false");
            _writer.WriteAttributeString("RuleAbove", "false");
            _writer.WriteAttributeString("RuleBelow", "false");
            _writer.WriteAttributeString("LastLineIndent", "0");
            _writer.WriteAttributeString("HyphenateLastWord", "true");
            _writer.WriteAttributeString("ParagraphBreakType", "Anywhere");
            _writer.WriteAttributeString("SingleWordJustification", "FullyJustified");
            _writer.WriteAttributeString("OTFOrdinal", "false");
            _writer.WriteAttributeString("OTFFraction", "false");
            _writer.WriteAttributeString("OTFDiscretionaryLigature", "false");
            _writer.WriteAttributeString("OTFTitling", "false");
            _writer.WriteAttributeString("RuleAboveGapTint", "-1");
            _writer.WriteAttributeString("RuleAboveGapOverprint", "false");
            _writer.WriteAttributeString("RuleBelowGapTint", "-1");
            _writer.WriteAttributeString("RuleBelowGapOverprint", "false");
            _writer.WriteAttributeString("Justification", "LeftAlign");
            _writer.WriteAttributeString("DropcapDetail", "0");
            _writer.WriteAttributeString("PositionalForm", "None");
            _writer.WriteAttributeString("OTFMark", "true");
            _writer.WriteAttributeString("HyphenWeight", "5");
            _writer.WriteAttributeString("OTFLocale", "true");
            _writer.WriteAttributeString("HyphenateAcrossColumns", "true");
            _writer.WriteAttributeString("KeepRuleAboveInFrame", "false");
            _writer.WriteAttributeString("IgnoreEdgeAlignment", "false");
            _writer.WriteAttributeString("OTFSlashedZero", "false");
            _writer.WriteAttributeString("OTFStylisticSets", "0");
            _writer.WriteAttributeString("OTFHistorical", "false");
            _writer.WriteAttributeString("OTFContextualAlternate", "true");
            _writer.WriteAttributeString("UnderlineGapOverprint", "false");
            _writer.WriteAttributeString("UnderlineGapTint", "-1");
            _writer.WriteAttributeString("UnderlineOffset", "-9999");
            _writer.WriteAttributeString("UnderlineOverprint", "false");
            _writer.WriteAttributeString("UnderlineTint", "-1");
            _writer.WriteAttributeString("UnderlineWeight", "-9999");
            _writer.WriteAttributeString("StrikeThroughGapOverprint", "false");
            _writer.WriteAttributeString("StrikeThroughGapTint", "-1");
            _writer.WriteAttributeString("StrikeThroughOffset", "-9999");
            _writer.WriteAttributeString("StrikeThroughOverprint", "false");
            _writer.WriteAttributeString("StrikeThroughTint", "-1");
            _writer.WriteAttributeString("StrikeThroughWeight", "-9999");
            _writer.WriteAttributeString("MiterLimit", "4");
            _writer.WriteAttributeString("StrokeAlignment", "OutsideAlignment");
            _writer.WriteAttributeString("EndJoin", "MiterEndJoin");
            _writer.WriteAttributeString("OTFSwash", "false");
            _writer.WriteAttributeString("Tsume", "0");
            _writer.WriteAttributeString("LeadingAki", "-1");
            _writer.WriteAttributeString("TrailingAki", "-1");
            _writer.WriteAttributeString("KinsokuType", "KinsokuPushInFirst");
            _writer.WriteAttributeString("KinsokuHangType", "None");
            _writer.WriteAttributeString("BunriKinshi", "true");
            _writer.WriteAttributeString("RubyOpenTypePro", "true");
            _writer.WriteAttributeString("RubyFontSize", "-1");
            _writer.WriteAttributeString("RubyAlignment", "RubyJIS");
            _writer.WriteAttributeString("RubyType", "PerCharacterRuby");
            _writer.WriteAttributeString("RubyParentSpacing", "RubyParent121Aki");
            _writer.WriteAttributeString("RubyXScale", "100");
            _writer.WriteAttributeString("RubyYScale", "100");
            _writer.WriteAttributeString("RubyXOffset", "0");
            _writer.WriteAttributeString("RubyYOffset", "0");
            _writer.WriteAttributeString("RubyPosition", "AboveRight");
            _writer.WriteAttributeString("RubyAutoAlign", "true");
            _writer.WriteAttributeString("RubyParentOverhangAmount", "RubyOverhangOneRuby");
            _writer.WriteAttributeString("RubyOverhang", "false");
            _writer.WriteAttributeString("RubyAutoScaling", "false");
            _writer.WriteAttributeString("RubyParentScalingPercent", "66");
            _writer.WriteAttributeString("RubyTint", "-1");
            _writer.WriteAttributeString("RubyOverprintFill", "Auto");
            _writer.WriteAttributeString("RubyStrokeTint", "-1");
            _writer.WriteAttributeString("RubyOverprintStroke", "Auto");
            _writer.WriteAttributeString("RubyWeight", "-1");
            _writer.WriteAttributeString("KentenKind", "None");
            _writer.WriteAttributeString("KentenFontSize", "-1");
            _writer.WriteAttributeString("KentenXScale", "100");
            _writer.WriteAttributeString("KentenYScale", "100");
            _writer.WriteAttributeString("KentenPlacement", "0");
            _writer.WriteAttributeString("KentenAlignment", "AlignKentenCenter");
            _writer.WriteAttributeString("KentenPosition", "AboveRight");
            _writer.WriteAttributeString("KentenCustomCharacter", "");
            _writer.WriteAttributeString("KentenCharacterSet", "CharacterInput");
            _writer.WriteAttributeString("KentenTint", "-1");
            _writer.WriteAttributeString("KentenOverprintFill", "Auto");
            _writer.WriteAttributeString("KentenStrokeTint", "-1");
            _writer.WriteAttributeString("KentenOverprintStroke", "Auto");
            _writer.WriteAttributeString("KentenWeight", "-1");
            _writer.WriteAttributeString("Tatechuyoko", "false");
            _writer.WriteAttributeString("TatechuyokoXOffset", "0");
            _writer.WriteAttributeString("TatechuyokoYOffset", "0");
            _writer.WriteAttributeString("AutoTcy", "0");
            _writer.WriteAttributeString("AutoTcyIncludeRoman", "false");
            _writer.WriteAttributeString("Jidori", "0");
            _writer.WriteAttributeString("GridGyoudori", "0");
            _writer.WriteAttributeString("GridAlignFirstLineOnly", "false");
            _writer.WriteAttributeString("GridAlignment", "None");
            _writer.WriteAttributeString("CharacterRotation", "0");
            _writer.WriteAttributeString("RotateSingleByteCharacters", "false");
            _writer.WriteAttributeString("Rensuuji", "true");
            _writer.WriteAttributeString("ShataiMagnification", "0");
            _writer.WriteAttributeString("ShataiDegreeAngle", "4500");
            _writer.WriteAttributeString("ShataiAdjustTsume", "true");
            _writer.WriteAttributeString("ShataiAdjustRotation", "false");
            _writer.WriteAttributeString("Warichu", "false");
            _writer.WriteAttributeString("WarichuLines", "2");
            _writer.WriteAttributeString("WarichuSize", "50");
            _writer.WriteAttributeString("WarichuLineSpacing", "0");
            _writer.WriteAttributeString("WarichuAlignment", "Auto");
            _writer.WriteAttributeString("WarichuCharsBeforeBreak", "2");
            _writer.WriteAttributeString("WarichuCharsAfterBreak", "2");
            _writer.WriteAttributeString("OTFHVKana", "false");
            _writer.WriteAttributeString("OTFProportionalMetrics", "false");
            _writer.WriteAttributeString("OTFRomanItalics", "false");
            _writer.WriteAttributeString("LeadingModel", "LeadingModelAkiBelow");
            _writer.WriteAttributeString("ScaleAffectsLineHeight", "false");
            _writer.WriteAttributeString("ParagraphGyoudori", "false");
            _writer.WriteAttributeString("CjkGridTracking", "false");
            _writer.WriteAttributeString("GlyphForm", "None");
            _writer.WriteAttributeString("RubyAutoTcyDigits", "0");
            _writer.WriteAttributeString("RubyAutoTcyIncludeRoman", "false");
            _writer.WriteAttributeString("RubyAutoTcyAutoScale", "true");
            _writer.WriteAttributeString("TreatIdeographicSpaceAsSpace", "false");
            _writer.WriteAttributeString("AllowArbitraryHyphenation", "false");
            _writer.WriteAttributeString("BulletsAndNumberingListType", "NoList");
            _writer.WriteAttributeString("NumberingStartAt", "1");
            _writer.WriteAttributeString("NumberingLevel", "1");
            _writer.WriteAttributeString("NumberingContinue", "true");
            _writer.WriteAttributeString("NumberingApplyRestartPolicy", "true");
            _writer.WriteAttributeString("BulletsAlignment", "LeftAlign");
            _writer.WriteAttributeString("NumberingAlignment", "LeftAlign");
            _writer.WriteAttributeString("NumberingExpression", "^#.^t");
            _writer.WriteAttributeString("BulletsTextAfter", "^t");
            _writer.WriteAttributeString("DigitsType", "DefaultDigits");
            _writer.WriteAttributeString("Kashidas", "DefaultKashidas");
            _writer.WriteAttributeString("DiacriticPosition", "OpentypePosition");
            _writer.WriteAttributeString("CharacterDirection", "DefaultDirection");
            _writer.WriteAttributeString("ParagraphDirection", "LeftToRightDirection");
            _writer.WriteAttributeString("ParagraphJustification", "DefaultJustification");
            _writer.WriteAttributeString("XOffsetDiacritic", "0");
            _writer.WriteAttributeString("YOffsetDiacritic", "0");
            _writer.WriteAttributeString("OTFOverlapSwash", "false");
            _writer.WriteAttributeString("OTFStylisticAlternate", "false");
            _writer.WriteAttributeString("OTFJustificationAlternate", "false");
            _writer.WriteAttributeString("OTFStretchedAlternate", "false");
            _writer.WriteAttributeString("KeyboardDirection", "DefaultDirection");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("Leading");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Auto");
            _writer.WriteEndElement();
            _writer.WriteStartElement("AppliedFont");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Times New Roman");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RuleAboveColor");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RuleBelowColor");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RuleAboveType");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("StrokeStyle/$ID/Solid");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RuleBelowType");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("StrokeStyle/$ID/Solid");
            _writer.WriteEndElement();
            _writer.WriteStartElement("BalanceRaggedLines");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("NoBalancing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RuleAboveGapColor");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("Swatch/None");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RuleBelowGapColor");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("Swatch/None");
            _writer.WriteEndElement();
            _writer.WriteStartElement("UnderlineColor");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("UnderlineGapColor");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("Swatch/None");
            _writer.WriteEndElement();
            _writer.WriteStartElement("UnderlineType");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("StrokeStyle/$ID/Solid");
            _writer.WriteEndElement();
            _writer.WriteStartElement("StrikeThroughColor");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("StrikeThroughGapColor");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("Swatch/None");
            _writer.WriteEndElement();
            _writer.WriteStartElement("StrikeThroughType");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("StrokeStyle/$ID/Solid");
            _writer.WriteEndElement();
            _writer.WriteStartElement("Mojikumi");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Nothing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("KinsokuSet");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Nothing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RubyFont");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RubyFontStyle");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Nothing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RubyFill");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("RubyStroke");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("KentenFont");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/");
            _writer.WriteEndElement();
            _writer.WriteStartElement("KentenFontStyle");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Nothing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("KentenFillColor");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("KentenStrokeColor");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Text Color");
            _writer.WriteEndElement();
            _writer.WriteStartElement("BulletChar");
            _writer.WriteAttributeString("BulletCharacterType", "UnicodeOnly");
            _writer.WriteAttributeString("BulletCharacterValue", "8226");
            _writer.WriteEndElement();
            _writer.WriteStartElement("NumberingFormat");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("1, 2, 3, 4...");
            _writer.WriteEndElement();
            _writer.WriteStartElement("BulletsFont");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/");
            _writer.WriteEndElement();
            _writer.WriteStartElement("BulletsFontStyle");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Nothing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("AppliedNumberingList");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("NumberingList/$ID/[Default]");
            _writer.WriteEndElement();
            _writer.WriteStartElement("NumberingRestartPolicies");
            _writer.WriteAttributeString("RestartPolicy", "AnyPreviousLevel");
            _writer.WriteAttributeString("LowerLevel", "0");
            _writer.WriteAttributeString("UpperLevel", "0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("BulletsCharacterStyle");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("CharacterStyle/$ID/[No character style]");
            _writer.WriteEndElement();
            _writer.WriteStartElement("NumberingCharacterStyle");
            _writer.WriteAttributeString("type", "object");
            _writer.WriteString("CharacterStyle/$ID/[No character style]");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ParagraphStyle");
            _writer.WriteAttributeString("Self", "ParagraphStyle/$ID/NormalParagraphStyle");
            _writer.WriteAttributeString("Name", "$ID/NormalParagraphStyle");
            _writer.WriteAttributeString("Imported", "false");
            _writer.WriteAttributeString("NextStyle", "ParagraphStyle/$ID/NormalParagraphStyle");
            _writer.WriteAttributeString("KeyboardShortcut", "0 0");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BasedOn");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/[No paragraph style]");
            _writer.WriteEndElement();
            _writer.WriteStartElement("AppliedFont");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Times New Roman");
            _writer.WriteEndElement();
            _writer.WriteStartElement("PreviewColor");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Nothing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("Leading");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Auto");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
        }

        public void EndIDStyles()
        {
            _writer.WriteEndDocument();
            _writer.Flush();
            _writer.Close();
        }

        public void CreateTrapPreset()
        {
            _writer.WriteStartElement("TrapPreset");
            _writer.WriteAttributeString("Self", "TrapPreset/$ID/k[No Trap Preset]");
            _writer.WriteAttributeString("Name", "$ID/k[No Trap Preset]");
            _writer.WriteAttributeString("DefaultTrapWidth", "0.25");
            _writer.WriteAttributeString("BlackWidth", "0.5");
            _writer.WriteAttributeString("TrapJoin", "MiterEndJoin");
            _writer.WriteAttributeString("TrapEnd", "MiterTrapEnds");
            _writer.WriteAttributeString("ObjectsToImages", "true");
            _writer.WriteAttributeString("ImagesToImages", "true");
            _writer.WriteAttributeString("InternalImages", "false");
            _writer.WriteAttributeString("OneBitImages", "true");
            _writer.WriteAttributeString("ImagePlacement", "CenterEdges");
            _writer.WriteAttributeString("StepThreshold", "10");
            _writer.WriteAttributeString("BlackColorThreshold", "100");
            _writer.WriteAttributeString("BlackDensity", "1.6");
            _writer.WriteAttributeString("SlidingTrapThreshold", "70");
            _writer.WriteAttributeString("ColorReduction", "100");
            _writer.WriteEndElement();
            _writer.WriteStartElement("TrapPreset");
            _writer.WriteAttributeString("Self", "TrapPreset/$ID/kDefaultTrapStyleName");
            _writer.WriteAttributeString("Name", "$ID/kDefaultTrapStyleName");
            _writer.WriteAttributeString("DefaultTrapWidth", "0.25");
            _writer.WriteAttributeString("BlackWidth", "0.5");
            _writer.WriteAttributeString("TrapJoin", "MiterEndJoin");
            _writer.WriteAttributeString("TrapEnd", "MiterTrapEnds");
            _writer.WriteAttributeString("ObjectsToImages", "true");
            _writer.WriteAttributeString("ImagesToImages", "true");
            _writer.WriteAttributeString("InternalImages", "false");
            _writer.WriteAttributeString("OneBitImages", "true");
            _writer.WriteAttributeString("ImagePlacement", "CenterEdges");
            _writer.WriteAttributeString("StepThreshold", "10");
            _writer.WriteAttributeString("BlackColorThreshold", "100");
            _writer.WriteAttributeString("BlackDensity", "1.6");
            _writer.WriteAttributeString("SlidingTrapThreshold", "70");
            _writer.WriteAttributeString("ColorReduction", "100");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
        }

        public void CreateRootObjectStyleGroup()
        {
            _writer.WriteStartElement("RootObjectStyleGroup");
            _writer.WriteAttributeString("Self", "u83");
            _writer.WriteStartElement("ObjectStyle");
            _writer.WriteAttributeString("Self", "ObjectStyle/$ID/[None]");
            _writer.WriteAttributeString("Name", "$ID/[None]");
            _writer.WriteAttributeString("AppliedParagraphStyle", "ParagraphStyle/$ID/[No paragraph style]");
            _writer.WriteAttributeString("FillColor", "Swatch/None");
            _writer.WriteAttributeString("FillTint", "-1");
            _writer.WriteAttributeString("StrokeWeight", "0");
            _writer.WriteAttributeString("MiterLimit", "4");
            _writer.WriteAttributeString("EndCap", "ButtEndCap");
            _writer.WriteAttributeString("EndJoin", "MiterEndJoin");
            _writer.WriteAttributeString("StrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("LeftLineEnd", "None");
            _writer.WriteAttributeString("RightLineEnd", "None");
            _writer.WriteAttributeString("StrokeColor", "Swatch/None");
            _writer.WriteAttributeString("StrokeTint", "-1");
            _writer.WriteAttributeString("CornerRadius", "12");
            _writer.WriteAttributeString("GapColor", "Swatch/None");
            _writer.WriteAttributeString("GapTint", "-1");
            _writer.WriteAttributeString("StrokeAlignment", "CenterAlignment");
            _writer.WriteAttributeString("Nonprinting", "false");
            _writer.WriteAttributeString("GradientFillAngle", "0");
            _writer.WriteAttributeString("GradientStrokeAngle", "0");
            _writer.WriteAttributeString("AppliedNamedGrid", "n");
            _writer.WriteAttributeString("CornerOption", "None");
            _writer.WriteStartElement("TextFramePreference");
            _writer.WriteAttributeString("TextColumnCount", "1");
            _writer.WriteAttributeString("TextColumnGutter", "12");
            _writer.WriteAttributeString("TextColumnFixedWidth", "144");
            _writer.WriteAttributeString("UseFixedColumnWidth", "false");
            _writer.WriteAttributeString("FirstBaselineOffset", "AscentOffset");
            _writer.WriteAttributeString("MinimumFirstBaselineOffset", "0");
            _writer.WriteAttributeString("VerticalJustification", "TopAlign");
            _writer.WriteAttributeString("VerticalThreshold", "0");
            _writer.WriteAttributeString("IgnoreWrap", "false");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("InsetSpacing");
            _writer.WriteAttributeString("type", "list");
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("BaselineFrameGridOption");
            _writer.WriteAttributeString("UseCustomBaselineFrameGrid", "false");
            _writer.WriteAttributeString("StartingOffsetForBaselineFrameGrid", "0");
            _writer.WriteAttributeString("BaselineFrameGridRelativeOption", "TopOfInset");
            _writer.WriteAttributeString("BaselineFrameGridIncrement", "12");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BaselineFrameGridColor");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("LightBlue");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("AnchoredObjectSetting");
            _writer.WriteAttributeString("AnchoredPosition", "InlinePosition");
            _writer.WriteAttributeString("SpineRelative", "false");
            _writer.WriteAttributeString("LockPosition", "false");
            _writer.WriteAttributeString("PinPosition", "true");
            _writer.WriteAttributeString("AnchorPoint", "BottomRightAnchor");
            _writer.WriteAttributeString("HorizontalAlignment", "LeftAlign");
            _writer.WriteAttributeString("HorizontalReferencePoint", "TextFrame");
            _writer.WriteAttributeString("VerticalAlignment", "BottomAlign");
            _writer.WriteAttributeString("VerticalReferencePoint", "LineBaseline");
            _writer.WriteAttributeString("AnchorXoffset", "0");
            _writer.WriteAttributeString("AnchorYoffset", "0");
            _writer.WriteAttributeString("AnchorSpaceAbove", "0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("TextWrapPreference");
            _writer.WriteAttributeString("Inverse", "false");
            _writer.WriteAttributeString("ApplyToMasterPageOnly", "false");
            _writer.WriteAttributeString("TextWrapSide", "BothSides");
            _writer.WriteAttributeString("TextWrapMode", "None");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("TextWrapOffset");
            _writer.WriteAttributeString("Top", "0");
            _writer.WriteAttributeString("Left", "0");
            _writer.WriteAttributeString("Bottom", "0");
            _writer.WriteAttributeString("Right", "0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ContourOption");
            _writer.WriteAttributeString("ContourType", "SameAsClipping");
            _writer.WriteAttributeString("IncludeInsideEdges", "false");
            _writer.WriteAttributeString("ContourPathName", "$ID/");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("StoryPreference");
            _writer.WriteAttributeString("OpticalMarginAlignment", "false");
            _writer.WriteAttributeString("OpticalMarginSize", "12");
            _writer.WriteAttributeString("FrameType", "TextFrameType");
            _writer.WriteAttributeString("StoryOrientation", "Horizontal");
            _writer.WriteAttributeString("StoryDirection", "UnknownDirection");
            _writer.WriteEndElement();
            _writer.WriteStartElement("FrameFittingOption");
            _writer.WriteAttributeString("LeftCrop", "0");
            _writer.WriteAttributeString("TopCrop", "0");
            _writer.WriteAttributeString("RightCrop", "0");
            _writer.WriteAttributeString("BottomCrop", "0");
            _writer.WriteAttributeString("FittingOnEmptyFrame", "None");
            _writer.WriteAttributeString("FittingAlignment", "TopLeftAnchor");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyle");
            _writer.WriteAttributeString("Self", "ObjectStyle/$ID/[Normal Graphics Frame]");
            _writer.WriteAttributeString("Name", "$ID/[Normal Graphics Frame]");
            _writer.WriteAttributeString("AppliedParagraphStyle", "ParagraphStyle/$ID/[No paragraph style]");
            _writer.WriteAttributeString("ApplyNextParagraphStyle", "false");
            _writer.WriteAttributeString("EnableFill", "true");
            _writer.WriteAttributeString("EnableStroke", "true");
            _writer.WriteAttributeString("EnableParagraphStyle", "false");
            _writer.WriteAttributeString("EnableTextFrameGeneralOptions", "false");
            _writer.WriteAttributeString("EnableTextFrameBaselineOptions", "false");
            _writer.WriteAttributeString("EnableStoryOptions", "false");
            _writer.WriteAttributeString("EnableTextWrapAndOthers", "false");
            _writer.WriteAttributeString("EnableAnchoredObjectOptions", "false");
            _writer.WriteAttributeString("FillColor", "Swatch/None");
            _writer.WriteAttributeString("FillTint", "-1");
            _writer.WriteAttributeString("StrokeWeight", "1");
            _writer.WriteAttributeString("MiterLimit", "4");
            _writer.WriteAttributeString("EndCap", "ButtEndCap");
            _writer.WriteAttributeString("EndJoin", "MiterEndJoin");
            _writer.WriteAttributeString("StrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("LeftLineEnd", "None");
            _writer.WriteAttributeString("RightLineEnd", "None");
            _writer.WriteAttributeString("StrokeColor", "Color/Black");
            _writer.WriteAttributeString("StrokeTint", "-1");
            _writer.WriteAttributeString("CornerRadius", "12");
            _writer.WriteAttributeString("OverprintStroke", "false");
            _writer.WriteAttributeString("GapColor", "Swatch/None");
            _writer.WriteAttributeString("GapTint", "-1");
            _writer.WriteAttributeString("StrokeAlignment", "CenterAlignment");
            _writer.WriteAttributeString("Nonprinting", "false");
            _writer.WriteAttributeString("GradientFillAngle", "0");
            _writer.WriteAttributeString("GradientStrokeAngle", "0");
            _writer.WriteAttributeString("AppliedNamedGrid", "n");
            _writer.WriteAttributeString("KeyboardShortcut", "0 0");
            _writer.WriteAttributeString("EnableFrameFittingOptions", "false");
            _writer.WriteAttributeString("CornerOption", "None");
            _writer.WriteAttributeString("EnableStrokeAndCornerOptions", "true");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BasedOn");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/[None]");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("TextFramePreference");
            _writer.WriteAttributeString("TextColumnCount", "1");
            _writer.WriteAttributeString("TextColumnGutter", "12");
            _writer.WriteAttributeString("TextColumnFixedWidth", "144");
            _writer.WriteAttributeString("UseFixedColumnWidth", "false");
            _writer.WriteAttributeString("FirstBaselineOffset", "AscentOffset");
            _writer.WriteAttributeString("MinimumFirstBaselineOffset", "0");
            _writer.WriteAttributeString("VerticalJustification", "TopAlign");
            _writer.WriteAttributeString("VerticalThreshold", "0");
            _writer.WriteAttributeString("IgnoreWrap", "false");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("InsetSpacing");
            _writer.WriteAttributeString("type", "list");
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("BaselineFrameGridOption");
            _writer.WriteAttributeString("UseCustomBaselineFrameGrid", "false");
            _writer.WriteAttributeString("StartingOffsetForBaselineFrameGrid", "0");
            _writer.WriteAttributeString("BaselineFrameGridRelativeOption", "TopOfInset");
            _writer.WriteAttributeString("BaselineFrameGridIncrement", "12");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BaselineFrameGridColor");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("LightBlue");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();

            //_writer.WriteStartElement("AnchoredObjectSetting");
            //_writer.WriteAttributeString("AnchoredPosition", "InlinePosition");
            //_writer.WriteAttributeString("SpineRelative", "false");
            //_writer.WriteAttributeString("LockPosition", "false");
            //_writer.WriteAttributeString("PinPosition", "true");
            //_writer.WriteAttributeString("AnchorPoint", "BottomRightAnchor");
            //_writer.WriteAttributeString("HorizontalAlignment", "LeftAlign");
            //_writer.WriteAttributeString("HorizontalReferencePoint", "TextFrame");
            //_writer.WriteAttributeString("VerticalAlignment", "BottomAlign");
            //_writer.WriteAttributeString("VerticalReferencePoint", "LineBaseline");
            //_writer.WriteAttributeString("AnchorXoffset", "0");
            //_writer.WriteAttributeString("AnchorYoffset", "0");
            //_writer.WriteAttributeString("AnchorSpaceAbove", "0");
            //_writer.WriteEndElement();

            //Task TD-2346 By Samdoss - 3
            _writer.WriteStartElement("AnchoredObjectSetting");
            _writer.WriteAttributeString("AnchoredPosition", "Anchored");
            _writer.WriteAttributeString("SpineRelative", "false");
            _writer.WriteAttributeString("LockPosition", "false");
            _writer.WriteAttributeString("PinPosition", "false");
            _writer.WriteAttributeString("AnchorPoint", "TopCenterAnchor");
            //CenterAlign, RightAlign , LeftAlign
            _writer.WriteAttributeString("HorizontalAlignment", "CenterAlign");
            _writer.WriteAttributeString("HorizontalReferencePoint", "ColumnEdge");
            _writer.WriteAttributeString("VerticalAlignment", "CenterAlign");
            _writer.WriteAttributeString("VerticalReferencePoint", "LineBaseline");
            //InLIne  //AboveLine
            _writer.WriteAttributeString("AnchorXoffset", "0");
            _writer.WriteAttributeString("AnchorYoffset", "0");
            _writer.WriteAttributeString("AnchorSpaceAbove", "4");

            _writer.WriteEndElement();



            _writer.WriteStartElement("TextWrapPreference");
            _writer.WriteAttributeString("Inverse", "false");
            _writer.WriteAttributeString("ApplyToMasterPageOnly", "false");
            _writer.WriteAttributeString("TextWrapSide", "BothSides");
            _writer.WriteAttributeString("TextWrapMode", "None");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("TextWrapOffset");
            _writer.WriteAttributeString("Top", "0");
            _writer.WriteAttributeString("Left", "0");
            _writer.WriteAttributeString("Bottom", "0");
            _writer.WriteAttributeString("Right", "0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ContourOption");
            _writer.WriteAttributeString("ContourType", "SameAsClipping");
            _writer.WriteAttributeString("IncludeInsideEdges", "false");
            _writer.WriteAttributeString("ContourPathName", "$ID/");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("StoryPreference");
            _writer.WriteAttributeString("OpticalMarginAlignment", "false");
            _writer.WriteAttributeString("OpticalMarginSize", "12");
            _writer.WriteAttributeString("FrameType", "Unknown");
            _writer.WriteAttributeString("StoryOrientation", "Unknown");
            _writer.WriteAttributeString("StoryDirection", "UnknownDirection");
            _writer.WriteEndElement();
            _writer.WriteStartElement("FrameFittingOption");
            _writer.WriteAttributeString("LeftCrop", "0");
            _writer.WriteAttributeString("TopCrop", "0");
            _writer.WriteAttributeString("RightCrop", "0");
            _writer.WriteAttributeString("BottomCrop", "0");
            _writer.WriteAttributeString("FittingOnEmptyFrame", "None");
            _writer.WriteAttributeString("FittingAlignment", "TopLeftAnchor");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleObjectEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleStrokeEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleFillEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleContentEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyle");
            _writer.WriteAttributeString("Self", "ObjectStyle/$ID/[Normal Text Frame]");
            _writer.WriteAttributeString("Name", "$ID/[Normal Text Frame]");
            _writer.WriteAttributeString("AppliedParagraphStyle", "ParagraphStyle/$ID/NormalParagraphStyle");
            _writer.WriteAttributeString("ApplyNextParagraphStyle", "false");
            _writer.WriteAttributeString("EnableFill", "true");
            _writer.WriteAttributeString("EnableStroke", "true");
            _writer.WriteAttributeString("EnableParagraphStyle", "false");
            _writer.WriteAttributeString("EnableTextFrameGeneralOptions", "true");
            _writer.WriteAttributeString("EnableTextFrameBaselineOptions", "true");
            _writer.WriteAttributeString("EnableStoryOptions", "false");
            _writer.WriteAttributeString("EnableTextWrapAndOthers", "false");
            _writer.WriteAttributeString("EnableAnchoredObjectOptions", "false");
            _writer.WriteAttributeString("FillColor", "Swatch/None");
            _writer.WriteAttributeString("FillTint", "-1");
            _writer.WriteAttributeString("StrokeWeight", "0");
            _writer.WriteAttributeString("MiterLimit", "4");
            _writer.WriteAttributeString("EndCap", "ButtEndCap");
            _writer.WriteAttributeString("EndJoin", "MiterEndJoin");
            _writer.WriteAttributeString("StrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("LeftLineEnd", "None");
            _writer.WriteAttributeString("RightLineEnd", "None");
            _writer.WriteAttributeString("StrokeColor", "Swatch/None");
            _writer.WriteAttributeString("StrokeTint", "-1");
            _writer.WriteAttributeString("CornerRadius", "12");
            _writer.WriteAttributeString("GapColor", "Swatch/None");
            _writer.WriteAttributeString("GapTint", "-1");
            _writer.WriteAttributeString("StrokeAlignment", "CenterAlignment");
            _writer.WriteAttributeString("Nonprinting", "false");
            _writer.WriteAttributeString("GradientFillAngle", "0");
            _writer.WriteAttributeString("GradientStrokeAngle", "0");
            _writer.WriteAttributeString("AppliedNamedGrid", "n");
            _writer.WriteAttributeString("KeyboardShortcut", "0 0");
            _writer.WriteAttributeString("EnableFrameFittingOptions", "false");
            _writer.WriteAttributeString("CornerOption", "None");
            _writer.WriteAttributeString("EnableStrokeAndCornerOptions", "true");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BasedOn");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/[None]");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("TextFramePreference");
            _writer.WriteAttributeString("TextColumnCount", "1");
            _writer.WriteAttributeString("TextColumnGutter", "12");
            _writer.WriteAttributeString("TextColumnFixedWidth", "144");
            _writer.WriteAttributeString("UseFixedColumnWidth", "false");
            _writer.WriteAttributeString("FirstBaselineOffset", "AscentOffset");
            _writer.WriteAttributeString("MinimumFirstBaselineOffset", "0");
            _writer.WriteAttributeString("VerticalJustification", "TopAlign");
            _writer.WriteAttributeString("VerticalThreshold", "0");
            _writer.WriteAttributeString("IgnoreWrap", "false");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("InsetSpacing");
            _writer.WriteAttributeString("type", "list");
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("BaselineFrameGridOption");
            _writer.WriteAttributeString("UseCustomBaselineFrameGrid", "false");
            _writer.WriteAttributeString("StartingOffsetForBaselineFrameGrid", "0");
            _writer.WriteAttributeString("BaselineFrameGridRelativeOption", "TopOfInset");
            _writer.WriteAttributeString("BaselineFrameGridIncrement", "12");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BaselineFrameGridColor");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("LightBlue");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();



            _writer.WriteStartElement("AnchoredObjectSetting");
            _writer.WriteAttributeString("AnchoredPosition", "InlinePosition");
            _writer.WriteAttributeString("SpineRelative", "false");
            _writer.WriteAttributeString("LockPosition", "false");
            _writer.WriteAttributeString("PinPosition", "true");
            _writer.WriteAttributeString("AnchorPoint", "BottomRightAnchor");
            _writer.WriteAttributeString("HorizontalAlignment", "LeftAlign");
            _writer.WriteAttributeString("HorizontalReferencePoint", "TextFrame");
            _writer.WriteAttributeString("VerticalAlignment", "BottomAlign");
            _writer.WriteAttributeString("VerticalReferencePoint", "LineBaseline");
            _writer.WriteAttributeString("AnchorXoffset", "0");
            _writer.WriteAttributeString("AnchorYoffset", "0");
            _writer.WriteAttributeString("AnchorSpaceAbove", "0");
            _writer.WriteEndElement();




            _writer.WriteStartElement("TextWrapPreference");
            _writer.WriteAttributeString("Inverse", "false");
            _writer.WriteAttributeString("ApplyToMasterPageOnly", "false");
            _writer.WriteAttributeString("TextWrapSide", "BothSides");
            _writer.WriteAttributeString("TextWrapMode", "None");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("TextWrapOffset");
            _writer.WriteAttributeString("Top", "0");
            _writer.WriteAttributeString("Left", "0");
            _writer.WriteAttributeString("Bottom", "0");
            _writer.WriteAttributeString("Right", "0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ContourOption");
            _writer.WriteAttributeString("ContourType", "SameAsClipping");
            _writer.WriteAttributeString("IncludeInsideEdges", "false");
            _writer.WriteAttributeString("ContourPathName", "$ID/");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("StoryPreference");
            _writer.WriteAttributeString("OpticalMarginAlignment", "false");
            _writer.WriteAttributeString("OpticalMarginSize", "12");
            _writer.WriteAttributeString("FrameType", "TextFrameType");
            _writer.WriteAttributeString("StoryOrientation", "Unknown");
            _writer.WriteAttributeString("StoryDirection", "UnknownDirection");
            _writer.WriteEndElement();
            _writer.WriteStartElement("FrameFittingOption");
            _writer.WriteAttributeString("LeftCrop", "0");
            _writer.WriteAttributeString("TopCrop", "0");
            _writer.WriteAttributeString("RightCrop", "0");
            _writer.WriteAttributeString("BottomCrop", "0");
            _writer.WriteAttributeString("FittingOnEmptyFrame", "None");
            _writer.WriteAttributeString("FittingAlignment", "TopLeftAnchor");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleObjectEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleStrokeEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleFillEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleContentEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyle");
            _writer.WriteAttributeString("Self", "ObjectStyle/$ID/[Normal Grid]");
            _writer.WriteAttributeString("Name", "$ID/[Normal Grid]");
            _writer.WriteAttributeString("AppliedParagraphStyle", "ParagraphStyle/$ID/NormalParagraphStyle");
            _writer.WriteAttributeString("ApplyNextParagraphStyle", "false");
            _writer.WriteAttributeString("EnableFill", "true");
            _writer.WriteAttributeString("EnableStroke", "true");
            _writer.WriteAttributeString("EnableParagraphStyle", "false");
            _writer.WriteAttributeString("EnableTextFrameGeneralOptions", "true");
            _writer.WriteAttributeString("EnableTextFrameBaselineOptions", "true");
            _writer.WriteAttributeString("EnableStoryOptions", "true");
            _writer.WriteAttributeString("EnableTextWrapAndOthers", "false");
            _writer.WriteAttributeString("EnableAnchoredObjectOptions", "false");
            _writer.WriteAttributeString("FillColor", "Swatch/None");
            _writer.WriteAttributeString("FillTint", "-1");
            _writer.WriteAttributeString("StrokeWeight", "0");
            _writer.WriteAttributeString("MiterLimit", "4");
            _writer.WriteAttributeString("EndCap", "ButtEndCap");
            _writer.WriteAttributeString("EndJoin", "MiterEndJoin");
            _writer.WriteAttributeString("StrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("LeftLineEnd", "None");
            _writer.WriteAttributeString("RightLineEnd", "None");
            _writer.WriteAttributeString("StrokeColor", "Swatch/None");
            _writer.WriteAttributeString("StrokeTint", "-1");
            _writer.WriteAttributeString("CornerRadius", "12");
            _writer.WriteAttributeString("GapColor", "Swatch/None");
            _writer.WriteAttributeString("GapTint", "-1");
            _writer.WriteAttributeString("StrokeAlignment", "CenterAlignment");
            _writer.WriteAttributeString("Nonprinting", "false");
            _writer.WriteAttributeString("GradientFillAngle", "0");
            _writer.WriteAttributeString("GradientStrokeAngle", "0");
            _writer.WriteAttributeString("AppliedNamedGrid", "n");
            _writer.WriteAttributeString("KeyboardShortcut", "0 0");
            _writer.WriteAttributeString("EnableFrameFittingOptions", "false");
            _writer.WriteAttributeString("CornerOption", "None");
            _writer.WriteAttributeString("EnableStrokeAndCornerOptions", "true");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BasedOn");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/[None]");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("TextFramePreference");
            _writer.WriteAttributeString("TextColumnCount", "1");
            _writer.WriteAttributeString("TextColumnGutter", "12");
            _writer.WriteAttributeString("TextColumnFixedWidth", "144");
            _writer.WriteAttributeString("UseFixedColumnWidth", "false");
            _writer.WriteAttributeString("FirstBaselineOffset", "AscentOffset");
            _writer.WriteAttributeString("MinimumFirstBaselineOffset", "0");
            _writer.WriteAttributeString("VerticalJustification", "TopAlign");
            _writer.WriteAttributeString("VerticalThreshold", "0");
            _writer.WriteAttributeString("IgnoreWrap", "false");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("InsetSpacing");
            _writer.WriteAttributeString("type", "list");
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ListItem");
            _writer.WriteAttributeString("type", "unit");
            _writer.WriteString("0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("BaselineFrameGridOption");
            _writer.WriteAttributeString("UseCustomBaselineFrameGrid", "false");
            _writer.WriteAttributeString("StartingOffsetForBaselineFrameGrid", "0");
            _writer.WriteAttributeString("BaselineFrameGridRelativeOption", "TopOfInset");
            _writer.WriteAttributeString("BaselineFrameGridIncrement", "12");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BaselineFrameGridColor");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("LightBlue");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();



            _writer.WriteStartElement("AnchoredObjectSetting");
            _writer.WriteAttributeString("AnchoredPosition", "InlinePosition");
            _writer.WriteAttributeString("SpineRelative", "false");
            _writer.WriteAttributeString("LockPosition", "false");
            _writer.WriteAttributeString("PinPosition", "true");
            _writer.WriteAttributeString("AnchorPoint", "BottomRightAnchor");
            _writer.WriteAttributeString("HorizontalAlignment", "LeftAlign");
            _writer.WriteAttributeString("HorizontalReferencePoint", "TextFrame");
            _writer.WriteAttributeString("VerticalAlignment", "BottomAlign");
            _writer.WriteAttributeString("VerticalReferencePoint", "LineBaseline");
            _writer.WriteAttributeString("AnchorXoffset", "0");
            _writer.WriteAttributeString("AnchorYoffset", "0");
            _writer.WriteAttributeString("AnchorSpaceAbove", "0");
            _writer.WriteEndElement();




            _writer.WriteStartElement("TextWrapPreference");
            _writer.WriteAttributeString("Inverse", "false");
            _writer.WriteAttributeString("ApplyToMasterPageOnly", "false");
            _writer.WriteAttributeString("TextWrapSide", "BothSides");
            _writer.WriteAttributeString("TextWrapMode", "None");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("TextWrapOffset");
            _writer.WriteAttributeString("Top", "0");
            _writer.WriteAttributeString("Left", "0");
            _writer.WriteAttributeString("Bottom", "0");
            _writer.WriteAttributeString("Right", "0");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("ContourOption");
            _writer.WriteAttributeString("ContourType", "SameAsClipping");
            _writer.WriteAttributeString("IncludeInsideEdges", "false");
            _writer.WriteAttributeString("ContourPathName", "$ID/");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteStartElement("StoryPreference");
            _writer.WriteAttributeString("OpticalMarginAlignment", "false");
            _writer.WriteAttributeString("OpticalMarginSize", "12");
            _writer.WriteAttributeString("FrameType", "FrameGridType");
            _writer.WriteAttributeString("StoryOrientation", "Unknown");
            _writer.WriteAttributeString("StoryDirection", "UnknownDirection");
            _writer.WriteEndElement();
            _writer.WriteStartElement("FrameFittingOption");
            _writer.WriteAttributeString("LeftCrop", "0");
            _writer.WriteAttributeString("TopCrop", "0");
            _writer.WriteAttributeString("RightCrop", "0");
            _writer.WriteAttributeString("BottomCrop", "0");
            _writer.WriteAttributeString("FittingOnEmptyFrame", "None");
            _writer.WriteAttributeString("FittingAlignment", "TopLeftAnchor");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleObjectEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleStrokeEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleFillEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteStartElement("ObjectStyleContentEffectsCategorySettings");
            _writer.WriteAttributeString("EnableTransparency", "true");
            _writer.WriteAttributeString("EnableDropShadow", "true");
            _writer.WriteAttributeString("EnableFeather", "true");
            _writer.WriteAttributeString("EnableInnerShadow", "true");
            _writer.WriteAttributeString("EnableOuterGlow", "true");
            _writer.WriteAttributeString("EnableInnerGlow", "true");
            _writer.WriteAttributeString("EnableBevelEmboss", "true");
            _writer.WriteAttributeString("EnableSatin", "true");
            _writer.WriteAttributeString("EnableDirectionalFeather", "true");
            _writer.WriteAttributeString("EnableGradientFeather", "true");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
        }

        public void CreateRootTableStyleGroup()
        {
            _writer.WriteStartElement("RootTableStyleGroup");
            _writer.WriteAttributeString("Self", "u7a");
            _writer.WriteStartElement("TableStyle");
            _writer.WriteAttributeString("Self", "TableStyle/$ID/[No table style]");
            _writer.WriteAttributeString("Name", "$ID/[No table style]");
            _writer.WriteAttributeString("StrokeOrder", "BestJoins");
            _writer.WriteAttributeString("TopBorderStrokeWeight", "1");
            _writer.WriteAttributeString("TopBorderStrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("TopBorderStrokeColor", "Color/Black");
            _writer.WriteAttributeString("TopBorderStrokeTint", "100");
            _writer.WriteAttributeString("TopBorderStrokeOverprint", "false");
            _writer.WriteAttributeString("TopBorderStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("TopBorderStrokeGapTint", "100");
            _writer.WriteAttributeString("TopBorderStrokeGapOverprint", "false");
            _writer.WriteAttributeString("LeftBorderStrokeWeight", "1");
            _writer.WriteAttributeString("LeftBorderStrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("LeftBorderStrokeColor", "Color/Black");
            _writer.WriteAttributeString("LeftBorderStrokeTint", "100");
            _writer.WriteAttributeString("LeftBorderStrokeOverprint", "false");
            _writer.WriteAttributeString("LeftBorderStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("LeftBorderStrokeGapTint", "100");
            _writer.WriteAttributeString("LeftBorderStrokeGapOverprint", "false");
            _writer.WriteAttributeString("BottomBorderStrokeWeight", "1");
            _writer.WriteAttributeString("BottomBorderStrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("BottomBorderStrokeColor", "Color/Black");
            _writer.WriteAttributeString("BottomBorderStrokeTint", "100");
            _writer.WriteAttributeString("BottomBorderStrokeOverprint", "false");
            _writer.WriteAttributeString("BottomBorderStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("BottomBorderStrokeGapTint", "100");
            _writer.WriteAttributeString("BottomBorderStrokeGapOverprint", "false");
            _writer.WriteAttributeString("RightBorderStrokeWeight", "1");
            _writer.WriteAttributeString("RightBorderStrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("RightBorderStrokeColor", "Color/Black");
            _writer.WriteAttributeString("RightBorderStrokeTint", "100");
            _writer.WriteAttributeString("RightBorderStrokeOverprint", "false");
            _writer.WriteAttributeString("RightBorderStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("RightBorderStrokeGapTint", "100");
            _writer.WriteAttributeString("RightBorderStrokeGapOverprint", "false");
            _writer.WriteAttributeString("SpaceBefore", "4");
            _writer.WriteAttributeString("SpaceAfter", "-4");
            _writer.WriteAttributeString("SkipFirstAlternatingStrokeRows", "0");
            _writer.WriteAttributeString("SkipLastAlternatingStrokeRows", "0");
            _writer.WriteAttributeString("StartRowStrokeCount", "0");
            _writer.WriteAttributeString("StartRowStrokeColor", "Color/Black");
            _writer.WriteAttributeString("StartRowStrokeWeight", "1");
            _writer.WriteAttributeString("StartRowStrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("StartRowStrokeTint", "100");
            _writer.WriteAttributeString("StartRowStrokeGapOverprint", "false");
            _writer.WriteAttributeString("StartRowStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("StartRowStrokeGapTint", "100");
            _writer.WriteAttributeString("StartRowStrokeOverprint", "false");
            _writer.WriteAttributeString("EndRowStrokeCount", "0");
            _writer.WriteAttributeString("EndRowStrokeColor", "Color/Black");
            _writer.WriteAttributeString("EndRowStrokeWeight", "0.25");
            _writer.WriteAttributeString("EndRowStrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("EndRowStrokeTint", "100");
            _writer.WriteAttributeString("EndRowStrokeOverprint", "false");
            _writer.WriteAttributeString("EndRowStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("EndRowStrokeGapTint", "100");
            _writer.WriteAttributeString("EndRowStrokeGapOverprint", "false");
            _writer.WriteAttributeString("SkipFirstAlternatingStrokeColumns", "0");
            _writer.WriteAttributeString("SkipLastAlternatingStrokeColumns", "0");
            _writer.WriteAttributeString("StartColumnStrokeCount", "0");
            _writer.WriteAttributeString("StartColumnStrokeColor", "Color/Black");
            _writer.WriteAttributeString("StartColumnStrokeWeight", "1");
            _writer.WriteAttributeString("StartColumnStrokeType", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("StartColumnStrokeTint", "100");
            _writer.WriteAttributeString("StartColumnStrokeOverprint", "false");
            _writer.WriteAttributeString("StartColumnStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("StartColumnStrokeGapTint", "100");
            _writer.WriteAttributeString("StartColumnStrokeGapOverprint", "false");
            _writer.WriteAttributeString("EndColumnStrokeCount", "0");
            _writer.WriteAttributeString("EndColumnStrokeColor", "Color/Black");
            _writer.WriteAttributeString("EndColumnStrokeWeight", "0.25");
            _writer.WriteAttributeString("EndColumnLineStyle", "StrokeStyle/$ID/Solid");
            _writer.WriteAttributeString("EndColumnStrokeTint", "100");
            _writer.WriteAttributeString("EndColumnStrokeOverprint", "false");
            _writer.WriteAttributeString("EndColumnStrokeGapColor", "Color/Paper");
            _writer.WriteAttributeString("EndColumnStrokeGapTint", "100");
            _writer.WriteAttributeString("EndColumnStrokeGapOverprint", "false");
            _writer.WriteAttributeString("ColumnFillsPriority", "false");
            _writer.WriteAttributeString("SkipFirstAlternatingFillRows", "0");
            _writer.WriteAttributeString("SkipLastAlternatingFillRows", "0");
            _writer.WriteAttributeString("StartRowFillColor", "Color/Black");
            _writer.WriteAttributeString("StartRowFillCount", "0");
            _writer.WriteAttributeString("StartRowFillTint", "20");
            _writer.WriteAttributeString("StartRowFillOverprint", "false");
            _writer.WriteAttributeString("EndRowFillCount", "0");
            _writer.WriteAttributeString("EndRowFillColor", "Swatch/None");
            _writer.WriteAttributeString("EndRowFillTint", "100");
            _writer.WriteAttributeString("EndRowFillOverprint", "false");
            _writer.WriteAttributeString("SkipFirstAlternatingFillColumns", "0");
            _writer.WriteAttributeString("SkipLastAlternatingFillColumns", "0");
            _writer.WriteAttributeString("StartColumnFillCount", "0");
            _writer.WriteAttributeString("StartColumnFillColor", "Color/Black");
            _writer.WriteAttributeString("StartColumnFillTint", "20");
            _writer.WriteAttributeString("StartColumnFillOverprint", "false");
            _writer.WriteAttributeString("EndColumnFillCount", "0");
            _writer.WriteAttributeString("EndColumnFillColor", "Swatch/None");
            _writer.WriteAttributeString("EndColumnFillTint", "100");
            _writer.WriteAttributeString("EndColumnFillOverprint", "false");
            _writer.WriteAttributeString("HeaderRegionSameAsBodyRegion", "true");
            _writer.WriteAttributeString("FooterRegionSameAsBodyRegion", "true");
            _writer.WriteAttributeString("LeftColumnRegionSameAsBodyRegion", "true");
            _writer.WriteAttributeString("RightColumnRegionSameAsBodyRegion", "true");
            _writer.WriteAttributeString("HeaderRegionCellStyle", "n");
            _writer.WriteAttributeString("FooterRegionCellStyle", "n");
            _writer.WriteAttributeString("LeftColumnRegionCellStyle", "n");
            _writer.WriteAttributeString("RightColumnRegionCellStyle", "n");
            _writer.WriteAttributeString("BodyRegionCellStyle", "CellStyle/$ID/[None]");
            _writer.WriteEndElement();
            _writer.WriteStartElement("TableStyle");
            _writer.WriteAttributeString("Self", "TableStyle/$ID/[Basic Table]");
            _writer.WriteAttributeString("Name", "$ID/[Basic Table]");
            _writer.WriteAttributeString("KeyboardShortcut", "0 0");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BasedOn");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/[No table style]");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();
        }

        public void CreateRootCellStyleGroup()
        {
            _writer.WriteStartElement("RootCellStyleGroup");
            _writer.WriteAttributeString("Self", "u78");
            _writer.WriteStartElement("CellStyle");
            _writer.WriteAttributeString("Self", "CellStyle/$ID/[None]");
            _writer.WriteAttributeString("AppliedParagraphStyle", "ParagraphStyle/$ID/[No paragraph style]");
            _writer.WriteAttributeString("Name", "$ID/[None]");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
        }

        public void CreateTOCStyle()
        {
            _writer.WriteStartElement("TOCStyle");
            _writer.WriteAttributeString("Self", "TOCStyle/$ID/DefaultTOCStyleName");
            _writer.WriteAttributeString("TitleStyle", "ParagraphStyle/$ID/[No paragraph style]");
            _writer.WriteAttributeString("Title", "Contents");
            _writer.WriteAttributeString("Name", "$ID/DefaultTOCStyleName");
            _writer.WriteAttributeString("RunIn", "false");
            _writer.WriteAttributeString("IncludeHidden", "false");
            _writer.WriteAttributeString("IncludeBookDocuments", "false");
            _writer.WriteAttributeString("CreateBookmarks", "true");
            _writer.WriteAttributeString("SetStoryDirection", "Horizontal");
            _writer.WriteAttributeString("NumberedParagraphs", "IncludeFullParagraph");
            _writer.WriteEndElement();
        }

        public void CreateRootCharacterStyleGroup()
        {
            _writer.WriteStartElement("RootCharacterStyleGroup");
            _writer.WriteAttributeString("Self", "u6a");
            _writer.WriteStartElement("CharacterStyle");
            _writer.WriteAttributeString("Self", "CharacterStyle/$ID/[No character style]");
            _writer.WriteAttributeString("Imported", "false");
            _writer.WriteAttributeString("Name", "$ID/[No character style]");
            _writer.WriteEndElement();

            _writer.WriteStartElement("CharacterStyle");
            _writer.WriteAttributeString("Self", "CharacterStyle/$ID/NormalCharacterStyle");
            _writer.WriteAttributeString("Name", "$ID/NormalCharacterStyle");
            _writer.WriteAttributeString("Imported", "false");
            _writer.WriteAttributeString("NextStyle", "CharacterStyle/$ID/NormalCharacterStyle");
            _writer.WriteAttributeString("KeyboardShortcut", "0 0");
            _writer.WriteStartElement("Properties");
            _writer.WriteStartElement("BasedOn");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("$ID/[No character style]");
            _writer.WriteEndElement();
            _writer.WriteStartElement("AppliedFont");
            _writer.WriteAttributeString("type", "string");
            _writer.WriteString("Times New Roman");
            _writer.WriteEndElement();
            _writer.WriteStartElement("PreviewColor");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Nothing");
            _writer.WriteEndElement();
            _writer.WriteStartElement("Leading");
            _writer.WriteAttributeString("type", "enumeration");
            _writer.WriteString("Auto");
            _writer.WriteEndElement();
            _writer.WriteEndElement();
            _writer.WriteEndElement();

            ////Style for ChapterNumber which is used for InDesig reference and hide the content.
            //_writer.WriteStartElement("CharacterStyle");
            //_writer.WriteAttributeString("Self", "CharacterStyle/hideChapterNumber_Paragraph_scrSection_columns_scrBook_scrBody");
            //_writer.WriteAttributeString("Name", "$ID/NormalCharacterStyle");
            //_writer.WriteAttributeString("Imported", "false");
            //_writer.WriteAttributeString("NextStyle", "CharacterStyle/hideChapterNumber_Paragraph_scrSection_columns_scrBook_scrBody");
            //_writer.WriteAttributeString("KeyboardShortcut", "0 0");
            //_writer.WriteAttributeString("PointSize", "0.1");
            //_writer.WriteAttributeString("FillColor", "Color/Paper");
            //_writer.WriteStartElement("Properties");
            //_writer.WriteStartElement("BasedOn");
            //_writer.WriteAttributeString("type", "object");
            //_writer.WriteString("CharacterStyle/Paragraph_scrSection_columns_scrBook_scrBody");
            //_writer.WriteEndElement();
            //_writer.WriteStartElement("AppliedFont");
            //_writer.WriteAttributeString("type", "string");
            //_writer.WriteString("Times New Roman");
            //_writer.WriteEndElement();
            //_writer.WriteStartElement("PreviewColor");
            //_writer.WriteAttributeString("type", "enumeration");
            //_writer.WriteString("Nothing");
            //_writer.WriteEndElement();
            //_writer.WriteStartElement("Leading");
            //_writer.WriteAttributeString("type", "unit");
            //_writer.WriteString("Auto");
            //_writer.WriteEndElement();
            //_writer.WriteEndElement();
            //_writer.WriteEndElement();

           // _writer.WriteEndElement(); // End of RootCharacterStyleGroup
        }

        public void CreateFile(string projectPath)
        {
            string styleXMLWithPath = Common.PathCombine(projectPath, "Styles.xml");
            _writer = new XmlTextWriter(styleXMLWithPath, null) { Formatting = Formatting.Indented };
            _writer.WriteStartDocument();
            _writer.WriteStartElement("idPkg:Styles");
            _writer.WriteAttributeString("xmlns:idPkg", "http://ns.adobe.com/AdobeInDesign/idml/1.0/packaging");
            _writer.WriteAttributeString("DOMVersion", "6.0");
        }

    }
}