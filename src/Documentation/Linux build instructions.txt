SETTING UP GIT CLIENT
---------------------
The first step is probably to make sure the computer is up to date with:
sudo apt-get update && sudo apt-get upgrade -y
In order to make git work on Linux, I had to use
sudo apt-get -y install git git-gui gitk git-flow
This installs the git client. (Note that on Lucid git-arch must be used instead of git.)

CLONING THE SOURCE REPO
-----------------------
mkdir git
cd git
git clone https://github.com/sillsdev/pathway.git
cd pathway
git flow init
If you are on xenial, you want to update the build control with:
cp Build/xenial-pkg/* debian/.
(Please don't check in debian/control and debian/rules for xenial as the originals are used for release.sh)
Make sure the dependencies are installed with:
Let the system know your info for commits
git config --global user.name yourname
git config --global user.email youremailaddress@yourdomain.xyz
gedit .git/config
(Open the Build/Add2Config file and include it in the .git/config file)

GET PACKAGES
------------
sudo apt install nuget -y
sudo apt install mono-complete -y
wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
sudo cp nuget.exe /usr/lib/nuget/NuGet.exe
nuget add sources -name https://www.nuget.org/api/v3 -value https://www.nuget.org/api/v3
(from pathway folder)
nuget restore Pathway.sln

SETTING UP BUILD SYSTEM
-----------------------
To set up Linux for building packages, I used:
sudo apt-get -y install devscripts debhelper autotools-dev cli-common mono-reference-assemblies-4.0
sudo apt-get -y install mono-xbuild mono-mcs mono-devel

BUILDING PATHWAY
----------------
You will want to make sure you are on the develop branch:
git checkout develop
You can use the gui by launching a terminal and using git gui, the build commands are on the Tools menu. Or you can perform the commands from a terminal window:
If the package has already been installed it can be removed with
make clean clean-build
You may want to update the changelog and add a new couplet of three lines with a version, the description and the date:
gedit debian/changelog
Once this is all setup, the command to build the package is:
bash Build/makeDeps.sh 1.15.3.4980

Once the package is built, you can install it with:
sudo dpkg -i ../*.deb
(The first time it will likely complain about missing dependencies. You can install them with)
sudo apt-get install -f -y
Then use the sudo dpkg command above a second time to install Pathway.

TESTS
-----
To run the tests, install the test runner:
sudo apt-get -y install nunit
Then build the debug version:
make debug
Then run the tests with:
make tests
Or you can run the tests from the by creating a project and loading the output/Debug/Tests.dll assembly
nunit-gui
(You may want to exclude tests marked "SkipOnLinux" by setting that category as excluded.)

GUI DEVELOPMENT
---------------
sudo apt-get -y install monodevelop monodevelop-nunit
Please make sure, before you commit, to revert changes on DistFiles.csproj with
git checkout DistFiles/DistFiles.csproj
or by useing the git gui command.

OTHER BUILD PROCESSES
---------------------
If you want to build something other than the current target. Here are some commands:
debuild -eBUILD_NUMBER=1.1.2.2205 -etarget=Daily -i -us -uc -b
It should be executed in the ~/git/pathway folder (or whereever the Pathway.sln file is located).
You will replace the build number with the appropriate # for the build you are making.
You can also change -etarget=Daily (this updates the build # in all the AssemblyInfo.cs files as well as building Release7BTE). You can use Release7SE, Corporate7BTE or Corporate7SE to build these other packages.
If you put it in another location, you will need to add
-ebinsrc=~/git1/pathway
replacing git1 with the folder you have used.
For 64-bit build the
-ePlatform=Any\ CPU
For 32-bit build
-ePlatform=x86
parameter should be given to the build.

INSTALLING
----------
The .deb package will be built in the ~/git/pathway folder (the parent of the one that executed the debuild command).
If you launch this file (double click on it), you can install Pathway or you can use:
dpkg -i *.deb
After installing Pathway, create the CurrentUser registry key by typing:
ConfigurationTool
at the terminal prompt (CTRL-ALT-T).

SETTING UP PATHWAY XELATEX
--------------------------
msbuild /t:TlGetInstaller src\BuildPathwaySprint.csproj
msbuild /t:TlInstall src\BuildPathwaySprint.csproj
or
cd ~/git/pathway/pathway/XeLaTexConvert
make tlsetup

BUILDING PATHWAY XELATEX
------------------------
msbuild /t:Clean src\BuildPathwaySprint.csproj
msbuild /p:BUILD_NUMBER=1.15.3.5138 /p:Configuration=PathwayXeLaTeX /p:Platform=x86 /p:Edition=BTE Pathway.sln
or
cd ~/git/pathway/src/XeLaTexConvert
make clean clean-build
debuild -ePlatform=x86 -eDEB_BUILD_OPTIONS=nostrip -eOutputPath=. -eBUILD_NUMBER=1.15.5.5415 -ebinsrc=. -i -us -uc -b
Use Platform=Any\ CPU for 64-bit

INSTALLING PATHWAY XELATEX
--------------------------
The .deb package will be build in the ~/git/pathway/pathway folder (the parent of the XeLaTexConvert that executed the debuild command).
If you launch this file (double click on it), you will install pathway-xelatex

SETTING UP THE DEBUGGER
-----------------------
Install nightly build using these instructions:
http://linux.lsdev.sil.org/wiki/index.php/FieldWorks_Nightly
Review the instructions at:
http://linux.lsdev.sil.org/wiki/index.php/Install_and_use_Monodevelop
a simple way to create the desktop icon:
http://askubuntu.com/questions/13758/how-can-i-edit-create-new-launcher-items-in-unity-by-hand#answer-128284
After creating the file, and making it executable, right click on it and set the command:
bash -c 'cd /usr/lib/fieldworks; RUNMODE="INSTALLED" . environ; PATH=/usr/bin:$PATH; export FIELDWORKS_ENVIRON="$HOME/fwrepo/fw/environ"; monodevelop'
Launch Monodevelop Fw using this short cut icon open publishing solution.
Right click on the Startup project (bolded). Choose Properties. Under Run, General create a variale PATH with this value:
/usr/lib/fieldworks/icu-bin:/usr/local/bin:/usr/lib/fieldworks/mono/bin:/usr/lib/fieldworks/Output_i686/Debug:/usr/lib/fieldworks/Lib/src/icu/installi686/bin:/usr/lib/fieldworks/Lib/src/icu/source/buildi686/bin:/usr/lib/fieldworks/Bin/nant/bin:/usr/lib/libcom/COM/buildi686/bin:$PATH
(if you execute cd /usr/lib/fieldworks; RUNMODE="INSTALLED" . environ in a terminal window and type export, you can examine the PATH variable to see what was added on the front. This is what needs to be set here.)
Under Run, Custom, create an Execute task with this commands:
/usr/lib/fieldworks/FieldWorks.exe -app flex
You can set the current folder to your home folder.
In the Run, Exceptions dialog you can control which exceptions are trapped. Often if you are trapping all exceptions, you can note the exception and continue after closing the dialoge.



(This assumes flex has been launched at least once so the initial setup is done.)




