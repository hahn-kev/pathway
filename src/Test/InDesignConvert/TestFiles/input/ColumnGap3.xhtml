<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="utf-8" lang="utf-8">
<head>
<link rel="stylesheet" href="ColumnGap.css" type="text/css" />
</head>
<body>

	<div class="t1">
	Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
Junction tables, which handle many to many relationships, should be named by concatenating the names of the tables that have a one to many relationship with the junction table. For example, you might have "Provider" and "Patient" tables. Since providers can have many patients and patients can have many providers (specialists) a table is needed to hold the data for those relationships in a junction table. This table should be named ProviderPatient. Since this convention can result in lengthy table names, abbreviations sometimes may be used at your discretion. 
	</div>

</body>
</html>
