//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 csst3.g 2016-06-28 15:31:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace SIL.PublishingSolution.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
public partial class csst3Parser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ANY", "ATTRIB", "ATTRIBEQUAL", "BEGINSWITH", "CLASS", "COLOR", "COMMENT", "EM", "FUNCTION", "HASVALUE", "ID", "IDENT", "IMPORT", "LINE_COMMENT", "MEDIA", "NUM", "PAGE", "PARENTOF", "PRECEDES", "PROPERTY", "PSEUDO", "REGION", "RULE", "SIBLING", "STRING", "TAG", "UNIT", "WS", "'#'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'.'", "':'", "'::'", "';'", "'='", "'>'", "'@'", "'@import'", "'@include'", "'@media'", "'@page'", "'['", "']'", "'{'", "'|='", "'}'", "'~'", "'~='"
	};
	public const int EOF=-1;
	public const int ANY=4;
	public const int ATTRIB=5;
	public const int ATTRIBEQUAL=6;
	public const int BEGINSWITH=7;
	public const int CLASS=8;
	public const int COLOR=9;
	public const int COMMENT=10;
	public const int EM=11;
	public const int FUNCTION=12;
	public const int HASVALUE=13;
	public const int ID=14;
	public const int IDENT=15;
	public const int IMPORT=16;
	public const int LINE_COMMENT=17;
	public const int MEDIA=18;
	public const int NUM=19;
	public const int PAGE=20;
	public const int PARENTOF=21;
	public const int PRECEDES=22;
	public const int PROPERTY=23;
	public const int PSEUDO=24;
	public const int REGION=25;
	public const int RULE=26;
	public const int SIBLING=27;
	public const int STRING=28;
	public const int TAG=29;
	public const int UNIT=30;
	public const int WS=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;

	public csst3Parser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public csst3Parser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return csst3Parser.tokenNames; } }
	public override string GrammarFileName { get { return "csst3.g"; } }


	private System.Collections.Generic.List<System.String> errors = new System.Collections.Generic.List<System.String>();
	override public void DisplayRecognitionError(System.String[] tokenNames, RecognitionException e) {
	    System.String hdr = GetErrorHeader(e);
	    System.String msg = GetErrorMessage(e, tokenNames);
	    errors.Add(hdr + " " + msg);
	}
	public System.Collections.Generic.List<System.String> GetErrors() {
	    return errors;
	}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_stylesheet();
	partial void LeaveRule_stylesheet();
	// $ANTLR start "stylesheet"
	// csst3.g:48:1: public stylesheet : ( importRule | media | pageRule | ruleset )+ ;
	[GrammarRule("stylesheet")]
	public AstParserRuleReturnScope<CommonTree, IToken> stylesheet()
	{
		EnterRule_stylesheet();
		EnterRule("stylesheet", 1);
		TraceIn("stylesheet", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> importRule1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> media2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> pageRule3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ruleset4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stylesheet");
		DebugLocation(48, 1);
		try
		{
			// csst3.g:49:2: ( ( importRule | media | pageRule | ruleset )+ )
			DebugEnterAlt(1);
			// csst3.g:49:4: ( importRule | media | pageRule | ruleset )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(49, 4);
			// csst3.g:49:4: ( importRule | media | pageRule | ruleset )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=5;
				try { DebugEnterDecision(1, false);
				switch (input.LA(1))
				{
				case 46:
				case 47:
					{
					alt1 = 1;
					}
					break;
				case 48:
					{
					alt1 = 2;
					}
					break;
				case 49:
					{
					alt1 = 3;
					}
					break;
				case IDENT:
				case UNIT:
				case 32:
				case 36:
				case 39:
				case 40:
				case 41:
					{
					alt1 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:49:5: importRule
					{
					DebugLocation(49, 5);
					PushFollow(Follow._importRule_in_stylesheet174);
					importRule1=importRule();
					PopFollow();

					adaptor.AddChild(root_0, importRule1.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:49:18: media
					{
					DebugLocation(49, 18);
					PushFollow(Follow._media_in_stylesheet178);
					media2=media();
					PopFollow();

					adaptor.AddChild(root_0, media2.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// csst3.g:49:26: pageRule
					{
					DebugLocation(49, 26);
					PushFollow(Follow._pageRule_in_stylesheet182);
					pageRule3=pageRule();
					PopFollow();

					adaptor.AddChild(root_0, pageRule3.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// csst3.g:49:37: ruleset
					{
					DebugLocation(49, 37);
					PushFollow(Follow._ruleset_in_stylesheet186);
					ruleset4=ruleset();
					PopFollow();

					adaptor.AddChild(root_0, ruleset4.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stylesheet", 1);
			LeaveRule("stylesheet", 1);
			LeaveRule_stylesheet();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "stylesheet"); }
		return retval;

	}
	// $ANTLR end "stylesheet"

	partial void EnterRule_importRule();
	partial void LeaveRule_importRule();
	// $ANTLR start "importRule"
	// csst3.g:52:1: importRule : ( ( '@import' | '@include' ) STRING ';' -> ^( IMPORT STRING ) | ( '@import' | '@include' ) function ';' -> ^( IMPORT function ) );
	[GrammarRule("importRule")]
	private AstParserRuleReturnScope<CommonTree, IToken> importRule()
	{
		EnterRule_importRule();
		EnterRule("importRule", 2);
		TraceIn("importRule", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal5 = default(IToken);
		IToken string_literal6 = default(IToken);
		IToken STRING7 = default(IToken);
		IToken char_literal8 = default(IToken);
		IToken string_literal9 = default(IToken);
		IToken string_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> function11 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal5_tree = default(CommonTree);
		CommonTree string_literal6_tree = default(CommonTree);
		CommonTree STRING7_tree = default(CommonTree);
		CommonTree char_literal8_tree = default(CommonTree);
		CommonTree string_literal9_tree = default(CommonTree);
		CommonTree string_literal10_tree = default(CommonTree);
		CommonTree char_literal12_tree = default(CommonTree);
		RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
		RewriteRuleITokenStream stream_47=new RewriteRuleITokenStream(adaptor,"token 47");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
		try { DebugEnterRule(GrammarFileName, "importRule");
		DebugLocation(52, 1);
		try
		{
			// csst3.g:53:2: ( ( '@import' | '@include' ) STRING ';' -> ^( IMPORT STRING ) | ( '@import' | '@include' ) function ';' -> ^( IMPORT function ) )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==46))
			{
				int LA4_2 = input.LA(2);

				if ((LA4_2==STRING))
				{
					alt4 = 1;
				}
				else if ((LA4_2==IDENT))
				{
					alt4 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA4_1==47))
			{
				int LA4_2 = input.LA(2);

				if ((LA4_2==STRING))
				{
					alt4 = 1;
				}
				else if ((LA4_2==IDENT))
				{
					alt4 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:53:4: ( '@import' | '@include' ) STRING ';'
				{
				DebugLocation(53, 4);
				// csst3.g:53:4: ( '@import' | '@include' )
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==46))
				{
					alt2 = 1;
				}
				else if ((LA2_1==47))
				{
					alt2 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:53:5: '@import'
					{
					DebugLocation(53, 5);
					string_literal5=(IToken)Match(input,46,Follow._46_in_importRule200);  
					stream_46.Add(string_literal5);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:53:17: '@include'
					{
					DebugLocation(53, 17);
					string_literal6=(IToken)Match(input,47,Follow._47_in_importRule204);  
					stream_47.Add(string_literal6);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }

				DebugLocation(53, 30);
				STRING7=(IToken)Match(input,STRING,Follow._STRING_in_importRule208);  
				stream_STRING.Add(STRING7);

				DebugLocation(53, 37);
				char_literal8=(IToken)Match(input,42,Follow._42_in_importRule210);  
				stream_42.Add(char_literal8);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 53:41: -> ^( IMPORT STRING )
				{
					DebugLocation(53, 44);
					// csst3.g:53:44: ^( IMPORT STRING )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(53, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(53, 54);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:54:4: ( '@import' | '@include' ) function ';'
				{
				DebugLocation(54, 4);
				// csst3.g:54:4: ( '@import' | '@include' )
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==46))
				{
					alt3 = 1;
				}
				else if ((LA3_1==47))
				{
					alt3 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:54:5: '@import'
					{
					DebugLocation(54, 5);
					string_literal9=(IToken)Match(input,46,Follow._46_in_importRule226);  
					stream_46.Add(string_literal9);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:54:17: '@include'
					{
					DebugLocation(54, 17);
					string_literal10=(IToken)Match(input,47,Follow._47_in_importRule230);  
					stream_47.Add(string_literal10);


					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(54, 30);
				PushFollow(Follow._function_in_importRule234);
				function11=function();
				PopFollow();

				stream_function.Add(function11.Tree);
				DebugLocation(54, 39);
				char_literal12=(IToken)Match(input,42,Follow._42_in_importRule236);  
				stream_42.Add(char_literal12);



				{
				// AST REWRITE
				// elements: function
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 54:43: -> ^( IMPORT function )
				{
					DebugLocation(54, 46);
					// csst3.g:54:46: ^( IMPORT function )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(54, 49);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(54, 56);
					adaptor.AddChild(root_1, stream_function.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importRule", 2);
			LeaveRule("importRule", 2);
			LeaveRule_importRule();
		}
		DebugLocation(55, 1);
		} finally { DebugExitRule(GrammarFileName, "importRule"); }
		return retval;

	}
	// $ANTLR end "importRule"

	partial void EnterRule_media();
	partial void LeaveRule_media();
	// $ANTLR start "media"
	// csst3.g:57:1: media : '@media' IDENT '{' ( pageRule | ruleset )+ '}' -> ^( MEDIA IDENT ( pageRule )* ( ruleset )* ) ;
	[GrammarRule("media")]
	private AstParserRuleReturnScope<CommonTree, IToken> media()
	{
		EnterRule_media();
		EnterRule("media", 3);
		TraceIn("media", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal13 = default(IToken);
		IToken IDENT14 = default(IToken);
		IToken char_literal15 = default(IToken);
		IToken char_literal18 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> pageRule16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ruleset17 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal13_tree = default(CommonTree);
		CommonTree IDENT14_tree = default(CommonTree);
		CommonTree char_literal15_tree = default(CommonTree);
		CommonTree char_literal18_tree = default(CommonTree);
		RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_pageRule=new RewriteRuleSubtreeStream(adaptor,"rule pageRule");
		RewriteRuleSubtreeStream stream_ruleset=new RewriteRuleSubtreeStream(adaptor,"rule ruleset");
		try { DebugEnterRule(GrammarFileName, "media");
		DebugLocation(57, 1);
		try
		{
			// csst3.g:58:2: ( '@media' IDENT '{' ( pageRule | ruleset )+ '}' -> ^( MEDIA IDENT ( pageRule )* ( ruleset )* ) )
			DebugEnterAlt(1);
			// csst3.g:58:4: '@media' IDENT '{' ( pageRule | ruleset )+ '}'
			{
			DebugLocation(58, 4);
			string_literal13=(IToken)Match(input,48,Follow._48_in_media257);  
			stream_48.Add(string_literal13);

			DebugLocation(58, 13);
			IDENT14=(IToken)Match(input,IDENT,Follow._IDENT_in_media259);  
			stream_IDENT.Add(IDENT14);

			DebugLocation(58, 19);
			char_literal15=(IToken)Match(input,52,Follow._52_in_media261);  
			stream_52.Add(char_literal15);

			DebugLocation(58, 23);
			// csst3.g:58:23: ( pageRule | ruleset )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==49))
				{
					alt5 = 1;
				}
				else if ((LA5_1==IDENT||LA5_1==UNIT||LA5_1==32||LA5_1==36||(LA5_1>=39 && LA5_1<=41)))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:58:24: pageRule
					{
					DebugLocation(58, 24);
					PushFollow(Follow._pageRule_in_media264);
					pageRule16=pageRule();
					PopFollow();

					stream_pageRule.Add(pageRule16.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:58:35: ruleset
					{
					DebugLocation(58, 35);
					PushFollow(Follow._ruleset_in_media268);
					ruleset17=ruleset();
					PopFollow();

					stream_ruleset.Add(ruleset17.Tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(58, 45);
			char_literal18=(IToken)Match(input,54,Follow._54_in_media272);  
			stream_54.Add(char_literal18);



			{
			// AST REWRITE
			// elements: IDENT, pageRule, ruleset
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 58:49: -> ^( MEDIA IDENT ( pageRule )* ( ruleset )* )
			{
				DebugLocation(58, 52);
				// csst3.g:58:52: ^( MEDIA IDENT ( pageRule )* ( ruleset )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(58, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEDIA, "MEDIA"), root_1);

				DebugLocation(58, 61);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(58, 67);
				// csst3.g:58:67: ( pageRule )*
				while ( stream_pageRule.HasNext )
				{
					DebugLocation(58, 67);
					adaptor.AddChild(root_1, stream_pageRule.NextTree());

				}
				stream_pageRule.Reset();
				DebugLocation(58, 77);
				// csst3.g:58:77: ( ruleset )*
				while ( stream_ruleset.HasNext )
				{
					DebugLocation(58, 77);
					adaptor.AddChild(root_1, stream_ruleset.NextTree());

				}
				stream_ruleset.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media", 3);
			LeaveRule("media", 3);
			LeaveRule_media();
		}
		DebugLocation(59, 1);
		} finally { DebugExitRule(GrammarFileName, "media"); }
		return retval;

	}
	// $ANTLR end "media"

	partial void EnterRule_pageRule();
	partial void LeaveRule_pageRule();
	// $ANTLR start "pageRule"
	// csst3.g:61:1: pageRule : '@page' ( IDENT )* ( pseudo )* '{' ( properties )? ( region )* '}' -> ^( PAGE ( IDENT )* ( pseudo )* ( properties )* ( region )* ) ;
	[GrammarRule("pageRule")]
	private AstParserRuleReturnScope<CommonTree, IToken> pageRule()
	{
		EnterRule_pageRule();
		EnterRule("pageRule", 4);
		TraceIn("pageRule", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal19 = default(IToken);
		IToken IDENT20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken char_literal25 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> pseudo21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> properties23 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> region24 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal19_tree = default(CommonTree);
		CommonTree IDENT20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_49=new RewriteRuleITokenStream(adaptor,"token 49");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_pseudo=new RewriteRuleSubtreeStream(adaptor,"rule pseudo");
		RewriteRuleSubtreeStream stream_properties=new RewriteRuleSubtreeStream(adaptor,"rule properties");
		RewriteRuleSubtreeStream stream_region=new RewriteRuleSubtreeStream(adaptor,"rule region");
		try { DebugEnterRule(GrammarFileName, "pageRule");
		DebugLocation(61, 1);
		try
		{
			// csst3.g:62:3: ( '@page' ( IDENT )* ( pseudo )* '{' ( properties )? ( region )* '}' -> ^( PAGE ( IDENT )* ( pseudo )* ( properties )* ( region )* ) )
			DebugEnterAlt(1);
			// csst3.g:62:5: '@page' ( IDENT )* ( pseudo )* '{' ( properties )? ( region )* '}'
			{
			DebugLocation(62, 5);
			string_literal19=(IToken)Match(input,49,Follow._49_in_pageRule300);  
			stream_49.Add(string_literal19);

			DebugLocation(62, 13);
			// csst3.g:62:13: ( IDENT )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==IDENT))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:62:13: IDENT
					{
					DebugLocation(62, 13);
					IDENT20=(IToken)Match(input,IDENT,Follow._IDENT_in_pageRule302);  
					stream_IDENT.Add(IDENT20);


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(62, 20);
			// csst3.g:62:20: ( pseudo )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>=40 && LA7_1<=41)))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:62:20: pseudo
					{
					DebugLocation(62, 20);
					PushFollow(Follow._pseudo_in_pageRule305);
					pseudo21=pseudo();
					PopFollow();

					stream_pseudo.Add(pseudo21.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(62, 28);
			char_literal22=(IToken)Match(input,52,Follow._52_in_pageRule308);  
			stream_52.Add(char_literal22);

			DebugLocation(62, 32);
			// csst3.g:62:32: ( properties )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==IDENT))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:62:32: properties
				{
				DebugLocation(62, 32);
				PushFollow(Follow._properties_in_pageRule310);
				properties23=properties();
				PopFollow();

				stream_properties.Add(properties23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(62, 44);
			// csst3.g:62:44: ( region )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==45))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:62:44: region
					{
					DebugLocation(62, 44);
					PushFollow(Follow._region_in_pageRule313);
					region24=region();
					PopFollow();

					stream_region.Add(region24.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(62, 52);
			char_literal25=(IToken)Match(input,54,Follow._54_in_pageRule316);  
			stream_54.Add(char_literal25);



			{
			// AST REWRITE
			// elements: IDENT, pseudo, properties, region
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 62:56: -> ^( PAGE ( IDENT )* ( pseudo )* ( properties )* ( region )* )
			{
				DebugLocation(62, 59);
				// csst3.g:62:59: ^( PAGE ( IDENT )* ( pseudo )* ( properties )* ( region )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(62, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PAGE, "PAGE"), root_1);

				DebugLocation(62, 67);
				// csst3.g:62:67: ( IDENT )*
				while ( stream_IDENT.HasNext )
				{
					DebugLocation(62, 67);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();
				DebugLocation(62, 74);
				// csst3.g:62:74: ( pseudo )*
				while ( stream_pseudo.HasNext )
				{
					DebugLocation(62, 74);
					adaptor.AddChild(root_1, stream_pseudo.NextTree());

				}
				stream_pseudo.Reset();
				DebugLocation(62, 82);
				// csst3.g:62:82: ( properties )*
				while ( stream_properties.HasNext )
				{
					DebugLocation(62, 82);
					adaptor.AddChild(root_1, stream_properties.NextTree());

				}
				stream_properties.Reset();
				DebugLocation(62, 94);
				// csst3.g:62:94: ( region )*
				while ( stream_region.HasNext )
				{
					DebugLocation(62, 94);
					adaptor.AddChild(root_1, stream_region.NextTree());

				}
				stream_region.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageRule", 4);
			LeaveRule("pageRule", 4);
			LeaveRule_pageRule();
		}
		DebugLocation(63, 1);
		} finally { DebugExitRule(GrammarFileName, "pageRule"); }
		return retval;

	}
	// $ANTLR end "pageRule"

	partial void EnterRule_region();
	partial void LeaveRule_region();
	// $ANTLR start "region"
	// csst3.g:65:1: region : '@' IDENT '{' ( properties )? '}' -> ^( REGION IDENT ( properties )* ) ;
	[GrammarRule("region")]
	private AstParserRuleReturnScope<CommonTree, IToken> region()
	{
		EnterRule_region();
		EnterRule("region", 5);
		TraceIn("region", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal26 = default(IToken);
		IToken IDENT27 = default(IToken);
		IToken char_literal28 = default(IToken);
		IToken char_literal30 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> properties29 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree IDENT27_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_properties=new RewriteRuleSubtreeStream(adaptor,"rule properties");
		try { DebugEnterRule(GrammarFileName, "region");
		DebugLocation(65, 1);
		try
		{
			// csst3.g:66:2: ( '@' IDENT '{' ( properties )? '}' -> ^( REGION IDENT ( properties )* ) )
			DebugEnterAlt(1);
			// csst3.g:66:4: '@' IDENT '{' ( properties )? '}'
			{
			DebugLocation(66, 4);
			char_literal26=(IToken)Match(input,45,Follow._45_in_region347);  
			stream_45.Add(char_literal26);

			DebugLocation(66, 8);
			IDENT27=(IToken)Match(input,IDENT,Follow._IDENT_in_region349);  
			stream_IDENT.Add(IDENT27);

			DebugLocation(66, 14);
			char_literal28=(IToken)Match(input,52,Follow._52_in_region351);  
			stream_52.Add(char_literal28);

			DebugLocation(66, 18);
			// csst3.g:66:18: ( properties )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==IDENT))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:66:18: properties
				{
				DebugLocation(66, 18);
				PushFollow(Follow._properties_in_region353);
				properties29=properties();
				PopFollow();

				stream_properties.Add(properties29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(66, 30);
			char_literal30=(IToken)Match(input,54,Follow._54_in_region356);  
			stream_54.Add(char_literal30);



			{
			// AST REWRITE
			// elements: IDENT, properties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 66:34: -> ^( REGION IDENT ( properties )* )
			{
				DebugLocation(66, 37);
				// csst3.g:66:37: ^( REGION IDENT ( properties )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(66, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(REGION, "REGION"), root_1);

				DebugLocation(66, 47);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(66, 53);
				// csst3.g:66:53: ( properties )*
				while ( stream_properties.HasNext )
				{
					DebugLocation(66, 53);
					adaptor.AddChild(root_1, stream_properties.NextTree());

				}
				stream_properties.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("region", 5);
			LeaveRule("region", 5);
			LeaveRule_region();
		}
		DebugLocation(67, 1);
		} finally { DebugExitRule(GrammarFileName, "region"); }
		return retval;

	}
	// $ANTLR end "region"

	partial void EnterRule_ruleset();
	partial void LeaveRule_ruleset();
	// $ANTLR start "ruleset"
	// csst3.g:69:1: ruleset : selectors '{' ( properties )? '}' -> ^( RULE selectors ( properties )* ) ;
	[GrammarRule("ruleset")]
	private AstParserRuleReturnScope<CommonTree, IToken> ruleset()
	{
		EnterRule_ruleset();
		EnterRule("ruleset", 6);
		TraceIn("ruleset", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> selectors31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> properties33 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_selectors=new RewriteRuleSubtreeStream(adaptor,"rule selectors");
		RewriteRuleSubtreeStream stream_properties=new RewriteRuleSubtreeStream(adaptor,"rule properties");
		try { DebugEnterRule(GrammarFileName, "ruleset");
		DebugLocation(69, 1);
		try
		{
			// csst3.g:70:3: ( selectors '{' ( properties )? '}' -> ^( RULE selectors ( properties )* ) )
			DebugEnterAlt(1);
			// csst3.g:70:5: selectors '{' ( properties )? '}'
			{
			DebugLocation(70, 5);
			PushFollow(Follow._selectors_in_ruleset381);
			selectors31=selectors();
			PopFollow();

			stream_selectors.Add(selectors31.Tree);
			DebugLocation(70, 15);
			char_literal32=(IToken)Match(input,52,Follow._52_in_ruleset383);  
			stream_52.Add(char_literal32);

			DebugLocation(70, 19);
			// csst3.g:70:19: ( properties )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==IDENT))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:70:19: properties
				{
				DebugLocation(70, 19);
				PushFollow(Follow._properties_in_ruleset385);
				properties33=properties();
				PopFollow();

				stream_properties.Add(properties33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(70, 31);
			char_literal34=(IToken)Match(input,54,Follow._54_in_ruleset388);  
			stream_54.Add(char_literal34);



			{
			// AST REWRITE
			// elements: selectors, properties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 70:35: -> ^( RULE selectors ( properties )* )
			{
				DebugLocation(70, 38);
				// csst3.g:70:38: ^( RULE selectors ( properties )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(70, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RULE, "RULE"), root_1);

				DebugLocation(70, 46);
				adaptor.AddChild(root_1, stream_selectors.NextTree());
				DebugLocation(70, 56);
				// csst3.g:70:56: ( properties )*
				while ( stream_properties.HasNext )
				{
					DebugLocation(70, 56);
					adaptor.AddChild(root_1, stream_properties.NextTree());

				}
				stream_properties.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ruleset", 6);
			LeaveRule("ruleset", 6);
			LeaveRule_ruleset();
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleset"); }
		return retval;

	}
	// $ANTLR end "ruleset"

	partial void EnterRule_selectors();
	partial void LeaveRule_selectors();
	// $ANTLR start "selectors"
	// csst3.g:73:1: selectors : selector ( ',' selector )* ;
	[GrammarRule("selectors")]
	private AstParserRuleReturnScope<CommonTree, IToken> selectors()
	{
		EnterRule_selectors();
		EnterRule("selectors", 7);
		TraceIn("selectors", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal36 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> selector35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> selector37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal36_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "selectors");
		DebugLocation(73, 1);
		try
		{
			// csst3.g:74:2: ( selector ( ',' selector )* )
			DebugEnterAlt(1);
			// csst3.g:74:4: selector ( ',' selector )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(74, 4);
			PushFollow(Follow._selector_in_selectors413);
			selector35=selector();
			PopFollow();

			adaptor.AddChild(root_0, selector35.Tree);
			DebugLocation(74, 13);
			// csst3.g:74:13: ( ',' selector )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==38))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:74:14: ',' selector
					{
					DebugLocation(74, 14);
					char_literal36=(IToken)Match(input,38,Follow._38_in_selectors416); 
					char_literal36_tree = (CommonTree)adaptor.Create(char_literal36);
					adaptor.AddChild(root_0, char_literal36_tree);
					DebugLocation(74, 18);
					PushFollow(Follow._selector_in_selectors418);
					selector37=selector();
					PopFollow();

					adaptor.AddChild(root_0, selector37.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectors", 7);
			LeaveRule("selectors", 7);
			LeaveRule_selectors();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "selectors"); }
		return retval;

	}
	// $ANTLR end "selectors"

	partial void EnterRule_selector();
	partial void LeaveRule_selector();
	// $ANTLR start "selector"
	// csst3.g:77:1: selector : ( elem ( selectorOperation )* ( pseudo )* -> elem ( selectorOperation )* ( pseudo )* | pseudo -> ANY pseudo );
	[GrammarRule("selector")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector()
	{
		EnterRule_selector();
		EnterRule("selector", 8);
		TraceIn("selector", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> elem38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> selectorOperation39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> pseudo40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> pseudo41 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_elem=new RewriteRuleSubtreeStream(adaptor,"rule elem");
		RewriteRuleSubtreeStream stream_selectorOperation=new RewriteRuleSubtreeStream(adaptor,"rule selectorOperation");
		RewriteRuleSubtreeStream stream_pseudo=new RewriteRuleSubtreeStream(adaptor,"rule pseudo");
		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(77, 1);
		try
		{
			// csst3.g:78:2: ( elem ( selectorOperation )* ( pseudo )* -> elem ( selectorOperation )* ( pseudo )* | pseudo -> ANY pseudo )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==IDENT||LA15_1==UNIT||LA15_1==32||LA15_1==36||LA15_1==39))
			{
				alt15 = 1;
			}
			else if (((LA15_1>=40 && LA15_1<=41)))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:78:4: elem ( selectorOperation )* ( pseudo )*
				{
				DebugLocation(78, 4);
				PushFollow(Follow._elem_in_selector432);
				elem38=elem();
				PopFollow();

				stream_elem.Add(elem38.Tree);
				DebugLocation(78, 9);
				// csst3.g:78:9: ( selectorOperation )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==IDENT||LA13_1==UNIT||LA13_1==32||(LA13_1>=36 && LA13_1<=37)||LA13_1==39||LA13_1==44||LA13_1==55))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:78:9: selectorOperation
						{
						DebugLocation(78, 9);
						PushFollow(Follow._selectorOperation_in_selector434);
						selectorOperation39=selectorOperation();
						PopFollow();

						stream_selectorOperation.Add(selectorOperation39.Tree);

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(78, 28);
				// csst3.g:78:28: ( pseudo )*
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if (((LA14_1>=40 && LA14_1<=41)))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch ( alt14 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:78:28: pseudo
						{
						DebugLocation(78, 28);
						PushFollow(Follow._pseudo_in_selector437);
						pseudo40=pseudo();
						PopFollow();

						stream_pseudo.Add(pseudo40.Tree);

						}
						break;

					default:
						goto loop14;
					}
				}

				loop14:
					;

				} finally { DebugExitSubRule(14); }



				{
				// AST REWRITE
				// elements: elem, selectorOperation, pseudo
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 78:36: -> elem ( selectorOperation )* ( pseudo )*
				{
					DebugLocation(78, 40);
					adaptor.AddChild(root_0, stream_elem.NextTree());
					DebugLocation(78, 45);
					// csst3.g:78:45: ( selectorOperation )*
					while ( stream_selectorOperation.HasNext )
					{
						DebugLocation(78, 45);
						adaptor.AddChild(root_0, stream_selectorOperation.NextTree());

					}
					stream_selectorOperation.Reset();
					DebugLocation(78, 64);
					// csst3.g:78:64: ( pseudo )*
					while ( stream_pseudo.HasNext )
					{
						DebugLocation(78, 64);
						adaptor.AddChild(root_0, stream_pseudo.NextTree());

					}
					stream_pseudo.Reset();

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:79:4: pseudo
				{
				DebugLocation(79, 4);
				PushFollow(Follow._pseudo_in_selector454);
				pseudo41=pseudo();
				PopFollow();

				stream_pseudo.Add(pseudo41.Tree);


				{
				// AST REWRITE
				// elements: pseudo
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 79:11: -> ANY pseudo
				{
					DebugLocation(79, 14);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ANY, "ANY"));
					DebugLocation(79, 18);
					adaptor.AddChild(root_0, stream_pseudo.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector", 8);
			LeaveRule("selector", 8);
			LeaveRule_selector();
		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return retval;

	}
	// $ANTLR end "selector"

	partial void EnterRule_selectorOperation();
	partial void LeaveRule_selectorOperation();
	// $ANTLR start "selectorOperation"
	// csst3.g:82:1: selectorOperation : ( selectop )? elem -> ( selectop )* elem ;
	[GrammarRule("selectorOperation")]
	private AstParserRuleReturnScope<CommonTree, IToken> selectorOperation()
	{
		EnterRule_selectorOperation();
		EnterRule("selectorOperation", 9);
		TraceIn("selectorOperation", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> selectop42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> elem43 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_selectop=new RewriteRuleSubtreeStream(adaptor,"rule selectop");
		RewriteRuleSubtreeStream stream_elem=new RewriteRuleSubtreeStream(adaptor,"rule elem");
		try { DebugEnterRule(GrammarFileName, "selectorOperation");
		DebugLocation(82, 1);
		try
		{
			// csst3.g:83:2: ( ( selectop )? elem -> ( selectop )* elem )
			DebugEnterAlt(1);
			// csst3.g:83:4: ( selectop )? elem
			{
			DebugLocation(83, 4);
			// csst3.g:83:4: ( selectop )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==37||LA16_1==44||LA16_1==55))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:83:4: selectop
				{
				DebugLocation(83, 4);
				PushFollow(Follow._selectop_in_selectorOperation472);
				selectop42=selectop();
				PopFollow();

				stream_selectop.Add(selectop42.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(83, 14);
			PushFollow(Follow._elem_in_selectorOperation475);
			elem43=elem();
			PopFollow();

			stream_elem.Add(elem43.Tree);


			{
			// AST REWRITE
			// elements: selectop, elem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 83:19: -> ( selectop )* elem
			{
				DebugLocation(83, 22);
				// csst3.g:83:22: ( selectop )*
				while ( stream_selectop.HasNext )
				{
					DebugLocation(83, 22);
					adaptor.AddChild(root_0, stream_selectop.NextTree());

				}
				stream_selectop.Reset();
				DebugLocation(83, 32);
				adaptor.AddChild(root_0, stream_elem.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectorOperation", 9);
			LeaveRule("selectorOperation", 9);
			LeaveRule_selectorOperation();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "selectorOperation"); }
		return retval;

	}
	// $ANTLR end "selectorOperation"

	partial void EnterRule_selectop();
	partial void LeaveRule_selectop();
	// $ANTLR start "selectop"
	// csst3.g:86:1: selectop : ( '>' -> PARENTOF | '+' -> PRECEDES | '~' -> SIBLING );
	[GrammarRule("selectop")]
	private AstParserRuleReturnScope<CommonTree, IToken> selectop()
	{
		EnterRule_selectop();
		EnterRule("selectop", 10);
		TraceIn("selectop", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal44 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken char_literal46 = default(IToken);

		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_37=new RewriteRuleITokenStream(adaptor,"token 37");
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		try { DebugEnterRule(GrammarFileName, "selectop");
		DebugLocation(86, 1);
		try
		{
			// csst3.g:87:2: ( '>' -> PARENTOF | '+' -> PRECEDES | '~' -> SIBLING )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case 44:
				{
				alt17 = 1;
				}
				break;
			case 37:
				{
				alt17 = 2;
				}
				break;
			case 55:
				{
				alt17 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:87:4: '>'
				{
				DebugLocation(87, 4);
				char_literal44=(IToken)Match(input,44,Follow._44_in_selectop493);  
				stream_44.Add(char_literal44);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 87:8: -> PARENTOF
				{
					DebugLocation(87, 11);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(PARENTOF, "PARENTOF"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:88:11: '+'
				{
				DebugLocation(88, 11);
				char_literal45=(IToken)Match(input,37,Follow._37_in_selectop509);  
				stream_37.Add(char_literal45);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 88:16: -> PRECEDES
				{
					DebugLocation(88, 19);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(PRECEDES, "PRECEDES"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// csst3.g:89:11: '~'
				{
				DebugLocation(89, 11);
				char_literal46=(IToken)Match(input,55,Follow._55_in_selectop526);  
				stream_55.Add(char_literal46);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 89:15: -> SIBLING
				{
					DebugLocation(89, 18);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SIBLING, "SIBLING"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectop", 10);
			LeaveRule("selectop", 10);
			LeaveRule_selectop();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "selectop"); }
		return retval;

	}
	// $ANTLR end "selectop"

	partial void EnterRule_properties();
	partial void LeaveRule_properties();
	// $ANTLR start "properties"
	// csst3.g:92:1: properties : declaration ( ';' ( declaration )? )* -> ( declaration )+ ;
	[GrammarRule("properties")]
	private AstParserRuleReturnScope<CommonTree, IToken> properties()
	{
		EnterRule_properties();
		EnterRule("properties", 11);
		TraceIn("properties", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> declaration47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> declaration49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "properties");
		DebugLocation(92, 1);
		try
		{
			// csst3.g:93:2: ( declaration ( ';' ( declaration )? )* -> ( declaration )+ )
			DebugEnterAlt(1);
			// csst3.g:93:4: declaration ( ';' ( declaration )? )*
			{
			DebugLocation(93, 4);
			PushFollow(Follow._declaration_in_properties541);
			declaration47=declaration();
			PopFollow();

			stream_declaration.Add(declaration47.Tree);
			DebugLocation(93, 16);
			// csst3.g:93:16: ( ';' ( declaration )? )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==42))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:93:17: ';' ( declaration )?
					{
					DebugLocation(93, 17);
					char_literal48=(IToken)Match(input,42,Follow._42_in_properties544);  
					stream_42.Add(char_literal48);

					DebugLocation(93, 21);
					// csst3.g:93:21: ( declaration )?
					int alt18=2;
					try { DebugEnterSubRule(18);
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if ((LA18_1==IDENT))
					{
						alt18 = 1;
					}
					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:93:21: declaration
						{
						DebugLocation(93, 21);
						PushFollow(Follow._declaration_in_properties546);
						declaration49=declaration();
						PopFollow();

						stream_declaration.Add(declaration49.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(18); }


					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 93:36: -> ( declaration )+
			{
				DebugLocation(93, 40);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(93, 40);
					adaptor.AddChild(root_0, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("properties", 11);
			LeaveRule("properties", 11);
			LeaveRule_properties();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "properties"); }
		return retval;

	}
	// $ANTLR end "properties"

	partial void EnterRule_elem();
	partial void LeaveRule_elem();
	// $ANTLR start "elem"
	// csst3.g:96:1: elem : ( ( IDENT | UNIT ) ( attrib )* -> ^( TAG ( IDENT )* ( UNIT )* ( attrib )* ) | '#' ( IDENT | UNIT ) ( attrib )* -> ^( ID ( IDENT )* ( UNIT )* ( attrib )* ) | '.' ( IDENT | UNIT ) ( attrib )* -> ^( CLASS ( IDENT )* ( UNIT )* ( attrib )* ) | '*' ( attrib )* -> ^( ANY ( attrib )* ) );
	[GrammarRule("elem")]
	private AstParserRuleReturnScope<CommonTree, IToken> elem()
	{
		EnterRule_elem();
		EnterRule("elem", 12);
		TraceIn("elem", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT50 = default(IToken);
		IToken UNIT51 = default(IToken);
		IToken char_literal53 = default(IToken);
		IToken IDENT54 = default(IToken);
		IToken UNIT55 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken IDENT58 = default(IToken);
		IToken UNIT59 = default(IToken);
		IToken char_literal61 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attrib52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attrib56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attrib60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attrib62 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT50_tree = default(CommonTree);
		CommonTree UNIT51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		CommonTree IDENT54_tree = default(CommonTree);
		CommonTree UNIT55_tree = default(CommonTree);
		CommonTree char_literal57_tree = default(CommonTree);
		CommonTree IDENT58_tree = default(CommonTree);
		CommonTree UNIT59_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_UNIT=new RewriteRuleITokenStream(adaptor,"token UNIT");
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleITokenStream stream_36=new RewriteRuleITokenStream(adaptor,"token 36");
		RewriteRuleSubtreeStream stream_attrib=new RewriteRuleSubtreeStream(adaptor,"rule attrib");
		try { DebugEnterRule(GrammarFileName, "elem");
		DebugLocation(96, 1);
		try
		{
			// csst3.g:97:2: ( ( IDENT | UNIT ) ( attrib )* -> ^( TAG ( IDENT )* ( UNIT )* ( attrib )* ) | '#' ( IDENT | UNIT ) ( attrib )* -> ^( ID ( IDENT )* ( UNIT )* ( attrib )* ) | '.' ( IDENT | UNIT ) ( attrib )* -> ^( CLASS ( IDENT )* ( UNIT )* ( attrib )* ) | '*' ( attrib )* -> ^( ANY ( attrib )* ) )
			int alt27=4;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case IDENT:
			case UNIT:
				{
				alt27 = 1;
				}
				break;
			case 32:
				{
				alt27 = 2;
				}
				break;
			case 39:
				{
				alt27 = 3;
				}
				break;
			case 36:
				{
				alt27 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:97:8: ( IDENT | UNIT ) ( attrib )*
				{
				DebugLocation(97, 8);
				// csst3.g:97:8: ( IDENT | UNIT )
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==IDENT))
				{
					alt20 = 1;
				}
				else if ((LA20_1==UNIT))
				{
					alt20 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:97:9: IDENT
					{
					DebugLocation(97, 9);
					IDENT50=(IToken)Match(input,IDENT,Follow._IDENT_in_elem572);  
					stream_IDENT.Add(IDENT50);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:97:17: UNIT
					{
					DebugLocation(97, 17);
					UNIT51=(IToken)Match(input,UNIT,Follow._UNIT_in_elem576);  
					stream_UNIT.Add(UNIT51);


					}
					break;

				}
				} finally { DebugExitSubRule(20); }

				DebugLocation(97, 23);
				// csst3.g:97:23: ( attrib )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_1 = input.LA(1);

					if ((LA21_1==50))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:97:23: attrib
						{
						DebugLocation(97, 23);
						PushFollow(Follow._attrib_in_elem579);
						attrib52=attrib();
						PopFollow();

						stream_attrib.Add(attrib52.Tree);

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }



				{
				// AST REWRITE
				// elements: IDENT, UNIT, attrib
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 97:31: -> ^( TAG ( IDENT )* ( UNIT )* ( attrib )* )
				{
					DebugLocation(97, 34);
					// csst3.g:97:34: ^( TAG ( IDENT )* ( UNIT )* ( attrib )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(97, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG, "TAG"), root_1);

					DebugLocation(97, 41);
					// csst3.g:97:41: ( IDENT )*
					while ( stream_IDENT.HasNext )
					{
						DebugLocation(97, 41);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();
					DebugLocation(97, 48);
					// csst3.g:97:48: ( UNIT )*
					while ( stream_UNIT.HasNext )
					{
						DebugLocation(97, 48);
						adaptor.AddChild(root_1, stream_UNIT.NextNode());

					}
					stream_UNIT.Reset();
					DebugLocation(97, 54);
					// csst3.g:97:54: ( attrib )*
					while ( stream_attrib.HasNext )
					{
						DebugLocation(97, 54);
						adaptor.AddChild(root_1, stream_attrib.NextTree());

					}
					stream_attrib.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:98:4: '#' ( IDENT | UNIT ) ( attrib )*
				{
				DebugLocation(98, 4);
				char_literal53=(IToken)Match(input,32,Follow._32_in_elem602);  
				stream_32.Add(char_literal53);

				DebugLocation(98, 8);
				// csst3.g:98:8: ( IDENT | UNIT )
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==IDENT))
				{
					alt22 = 1;
				}
				else if ((LA22_1==UNIT))
				{
					alt22 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:98:9: IDENT
					{
					DebugLocation(98, 9);
					IDENT54=(IToken)Match(input,IDENT,Follow._IDENT_in_elem605);  
					stream_IDENT.Add(IDENT54);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:98:17: UNIT
					{
					DebugLocation(98, 17);
					UNIT55=(IToken)Match(input,UNIT,Follow._UNIT_in_elem609);  
					stream_UNIT.Add(UNIT55);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(98, 23);
				// csst3.g:98:23: ( attrib )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_1 = input.LA(1);

					if ((LA23_1==50))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:98:23: attrib
						{
						DebugLocation(98, 23);
						PushFollow(Follow._attrib_in_elem612);
						attrib56=attrib();
						PopFollow();

						stream_attrib.Add(attrib56.Tree);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }



				{
				// AST REWRITE
				// elements: IDENT, UNIT, attrib
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 98:31: -> ^( ID ( IDENT )* ( UNIT )* ( attrib )* )
				{
					DebugLocation(98, 34);
					// csst3.g:98:34: ^( ID ( IDENT )* ( UNIT )* ( attrib )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(98, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ID, "ID"), root_1);

					DebugLocation(98, 40);
					// csst3.g:98:40: ( IDENT )*
					while ( stream_IDENT.HasNext )
					{
						DebugLocation(98, 40);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();
					DebugLocation(98, 47);
					// csst3.g:98:47: ( UNIT )*
					while ( stream_UNIT.HasNext )
					{
						DebugLocation(98, 47);
						adaptor.AddChild(root_1, stream_UNIT.NextNode());

					}
					stream_UNIT.Reset();
					DebugLocation(98, 53);
					// csst3.g:98:53: ( attrib )*
					while ( stream_attrib.HasNext )
					{
						DebugLocation(98, 53);
						adaptor.AddChild(root_1, stream_attrib.NextTree());

					}
					stream_attrib.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// csst3.g:99:4: '.' ( IDENT | UNIT ) ( attrib )*
				{
				DebugLocation(99, 4);
				char_literal57=(IToken)Match(input,39,Follow._39_in_elem635);  
				stream_39.Add(char_literal57);

				DebugLocation(99, 8);
				// csst3.g:99:8: ( IDENT | UNIT )
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==IDENT))
				{
					alt24 = 1;
				}
				else if ((LA24_1==UNIT))
				{
					alt24 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:99:9: IDENT
					{
					DebugLocation(99, 9);
					IDENT58=(IToken)Match(input,IDENT,Follow._IDENT_in_elem638);  
					stream_IDENT.Add(IDENT58);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:99:17: UNIT
					{
					DebugLocation(99, 17);
					UNIT59=(IToken)Match(input,UNIT,Follow._UNIT_in_elem642);  
					stream_UNIT.Add(UNIT59);


					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(99, 23);
				// csst3.g:99:23: ( attrib )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_1 = input.LA(1);

					if ((LA25_1==50))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:99:23: attrib
						{
						DebugLocation(99, 23);
						PushFollow(Follow._attrib_in_elem645);
						attrib60=attrib();
						PopFollow();

						stream_attrib.Add(attrib60.Tree);

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }



				{
				// AST REWRITE
				// elements: IDENT, UNIT, attrib
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 99:31: -> ^( CLASS ( IDENT )* ( UNIT )* ( attrib )* )
				{
					DebugLocation(99, 34);
					// csst3.g:99:34: ^( CLASS ( IDENT )* ( UNIT )* ( attrib )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(99, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS, "CLASS"), root_1);

					DebugLocation(99, 43);
					// csst3.g:99:43: ( IDENT )*
					while ( stream_IDENT.HasNext )
					{
						DebugLocation(99, 43);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();
					DebugLocation(99, 50);
					// csst3.g:99:50: ( UNIT )*
					while ( stream_UNIT.HasNext )
					{
						DebugLocation(99, 50);
						adaptor.AddChild(root_1, stream_UNIT.NextNode());

					}
					stream_UNIT.Reset();
					DebugLocation(99, 56);
					// csst3.g:99:56: ( attrib )*
					while ( stream_attrib.HasNext )
					{
						DebugLocation(99, 56);
						adaptor.AddChild(root_1, stream_attrib.NextTree());

					}
					stream_attrib.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// csst3.g:100:4: '*' ( attrib )*
				{
				DebugLocation(100, 4);
				char_literal61=(IToken)Match(input,36,Follow._36_in_elem668);  
				stream_36.Add(char_literal61);

				DebugLocation(100, 8);
				// csst3.g:100:8: ( attrib )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_1 = input.LA(1);

					if ((LA26_1==50))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:100:8: attrib
						{
						DebugLocation(100, 8);
						PushFollow(Follow._attrib_in_elem670);
						attrib62=attrib();
						PopFollow();

						stream_attrib.Add(attrib62.Tree);

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }



				{
				// AST REWRITE
				// elements: attrib
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 100:16: -> ^( ANY ( attrib )* )
				{
					DebugLocation(100, 19);
					// csst3.g:100:19: ^( ANY ( attrib )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(100, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANY, "ANY"), root_1);

					DebugLocation(100, 26);
					// csst3.g:100:26: ( attrib )*
					while ( stream_attrib.HasNext )
					{
						DebugLocation(100, 26);
						adaptor.AddChild(root_1, stream_attrib.NextTree());

					}
					stream_attrib.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elem", 12);
			LeaveRule("elem", 12);
			LeaveRule_elem();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "elem"); }
		return retval;

	}
	// $ANTLR end "elem"

	partial void EnterRule_pseudo();
	partial void LeaveRule_pseudo();
	// $ANTLR start "pseudo"
	// csst3.g:103:1: pseudo : ( ( ':' | '::' ) IDENT -> ^( PSEUDO IDENT ) | ( ':' | '::' ) function -> ^( PSEUDO function ) );
	[GrammarRule("pseudo")]
	private AstParserRuleReturnScope<CommonTree, IToken> pseudo()
	{
		EnterRule_pseudo();
		EnterRule("pseudo", 13);
		TraceIn("pseudo", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal63 = default(IToken);
		IToken string_literal64 = default(IToken);
		IToken IDENT65 = default(IToken);
		IToken char_literal66 = default(IToken);
		IToken string_literal67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> function68 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal63_tree = default(CommonTree);
		CommonTree string_literal64_tree = default(CommonTree);
		CommonTree IDENT65_tree = default(CommonTree);
		CommonTree char_literal66_tree = default(CommonTree);
		CommonTree string_literal67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
		try { DebugEnterRule(GrammarFileName, "pseudo");
		DebugLocation(103, 1);
		try
		{
			// csst3.g:104:2: ( ( ':' | '::' ) IDENT -> ^( PSEUDO IDENT ) | ( ':' | '::' ) function -> ^( PSEUDO function ) )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==40))
			{
				int LA30_2 = input.LA(2);

				if ((LA30_2==IDENT))
				{
					int LA30_3 = input.LA(3);

					if ((LA30_3==34))
					{
						alt30 = 2;
					}
					else if ((LA30_3==35||LA30_3==38||(LA30_3>=40 && LA30_3<=41)||LA30_3==52))
					{
						alt30 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA30_1==41))
			{
				int LA30_2 = input.LA(2);

				if ((LA30_2==IDENT))
				{
					int LA30_3 = input.LA(3);

					if ((LA30_3==34))
					{
						alt30 = 2;
					}
					else if ((LA30_3==35||LA30_3==38||(LA30_3>=40 && LA30_3<=41)||LA30_3==52))
					{
						alt30 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:104:4: ( ':' | '::' ) IDENT
				{
				DebugLocation(104, 4);
				// csst3.g:104:4: ( ':' | '::' )
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==40))
				{
					alt28 = 1;
				}
				else if ((LA28_1==41))
				{
					alt28 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:104:5: ':'
					{
					DebugLocation(104, 5);
					char_literal63=(IToken)Match(input,40,Follow._40_in_pseudo694);  
					stream_40.Add(char_literal63);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:104:9: '::'
					{
					DebugLocation(104, 9);
					string_literal64=(IToken)Match(input,41,Follow._41_in_pseudo696);  
					stream_41.Add(string_literal64);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(104, 15);
				IDENT65=(IToken)Match(input,IDENT,Follow._IDENT_in_pseudo699);  
				stream_IDENT.Add(IDENT65);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 104:21: -> ^( PSEUDO IDENT )
				{
					DebugLocation(104, 24);
					// csst3.g:104:24: ^( PSEUDO IDENT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(104, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PSEUDO, "PSEUDO"), root_1);

					DebugLocation(104, 34);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:105:4: ( ':' | '::' ) function
				{
				DebugLocation(105, 4);
				// csst3.g:105:4: ( ':' | '::' )
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==40))
				{
					alt29 = 1;
				}
				else if ((LA29_1==41))
				{
					alt29 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:105:5: ':'
					{
					DebugLocation(105, 5);
					char_literal66=(IToken)Match(input,40,Follow._40_in_pseudo715);  
					stream_40.Add(char_literal66);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:105:9: '::'
					{
					DebugLocation(105, 9);
					string_literal67=(IToken)Match(input,41,Follow._41_in_pseudo717);  
					stream_41.Add(string_literal67);


					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(105, 15);
				PushFollow(Follow._function_in_pseudo720);
				function68=function();
				PopFollow();

				stream_function.Add(function68.Tree);


				{
				// AST REWRITE
				// elements: function
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 105:24: -> ^( PSEUDO function )
				{
					DebugLocation(105, 27);
					// csst3.g:105:27: ^( PSEUDO function )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(105, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PSEUDO, "PSEUDO"), root_1);

					DebugLocation(105, 37);
					adaptor.AddChild(root_1, stream_function.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pseudo", 13);
			LeaveRule("pseudo", 13);
			LeaveRule_pseudo();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "pseudo"); }
		return retval;

	}
	// $ANTLR end "pseudo"

	partial void EnterRule_attrib();
	partial void LeaveRule_attrib();
	// $ANTLR start "attrib"
	// csst3.g:108:1: attrib : '[' IDENT ( attribRelate ( STRING | IDENT ) )? ']' -> ^( ATTRIB IDENT ( attribRelate ( STRING )* ( IDENT )* )? ) ;
	[GrammarRule("attrib")]
	private AstParserRuleReturnScope<CommonTree, IToken> attrib()
	{
		EnterRule_attrib();
		EnterRule("attrib", 14);
		TraceIn("attrib", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal69 = default(IToken);
		IToken IDENT70 = default(IToken);
		IToken STRING72 = default(IToken);
		IToken IDENT73 = default(IToken);
		IToken char_literal74 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribRelate71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree IDENT70_tree = default(CommonTree);
		CommonTree STRING72_tree = default(CommonTree);
		CommonTree IDENT73_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		RewriteRuleITokenStream stream_50=new RewriteRuleITokenStream(adaptor,"token 50");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleSubtreeStream stream_attribRelate=new RewriteRuleSubtreeStream(adaptor,"rule attribRelate");
		try { DebugEnterRule(GrammarFileName, "attrib");
		DebugLocation(108, 1);
		try
		{
			// csst3.g:109:2: ( '[' IDENT ( attribRelate ( STRING | IDENT ) )? ']' -> ^( ATTRIB IDENT ( attribRelate ( STRING )* ( IDENT )* )? ) )
			DebugEnterAlt(1);
			// csst3.g:109:4: '[' IDENT ( attribRelate ( STRING | IDENT ) )? ']'
			{
			DebugLocation(109, 4);
			char_literal69=(IToken)Match(input,50,Follow._50_in_attrib741);  
			stream_50.Add(char_literal69);

			DebugLocation(109, 8);
			IDENT70=(IToken)Match(input,IDENT,Follow._IDENT_in_attrib743);  
			stream_IDENT.Add(IDENT70);

			DebugLocation(109, 14);
			// csst3.g:109:14: ( attribRelate ( STRING | IDENT ) )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==43||LA32_1==53||LA32_1==56))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:109:15: attribRelate ( STRING | IDENT )
				{
				DebugLocation(109, 15);
				PushFollow(Follow._attribRelate_in_attrib746);
				attribRelate71=attribRelate();
				PopFollow();

				stream_attribRelate.Add(attribRelate71.Tree);
				DebugLocation(109, 28);
				// csst3.g:109:28: ( STRING | IDENT )
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==STRING))
				{
					alt31 = 1;
				}
				else if ((LA31_1==IDENT))
				{
					alt31 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:109:29: STRING
					{
					DebugLocation(109, 29);
					STRING72=(IToken)Match(input,STRING,Follow._STRING_in_attrib749);  
					stream_STRING.Add(STRING72);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// csst3.g:109:38: IDENT
					{
					DebugLocation(109, 38);
					IDENT73=(IToken)Match(input,IDENT,Follow._IDENT_in_attrib753);  
					stream_IDENT.Add(IDENT73);


					}
					break;

				}
				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(109, 47);
			char_literal74=(IToken)Match(input,51,Follow._51_in_attrib758);  
			stream_51.Add(char_literal74);



			{
			// AST REWRITE
			// elements: IDENT, attribRelate, STRING, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 109:51: -> ^( ATTRIB IDENT ( attribRelate ( STRING )* ( IDENT )* )? )
			{
				DebugLocation(109, 54);
				// csst3.g:109:54: ^( ATTRIB IDENT ( attribRelate ( STRING )* ( IDENT )* )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(109, 57);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIB, "ATTRIB"), root_1);

				DebugLocation(109, 64);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(109, 70);
				// csst3.g:109:70: ( attribRelate ( STRING )* ( IDENT )* )?
				if (stream_attribRelate.HasNext||stream_STRING.HasNext||stream_IDENT.HasNext)
				{
					DebugLocation(109, 71);
					adaptor.AddChild(root_1, stream_attribRelate.NextTree());
					DebugLocation(109, 84);
					// csst3.g:109:84: ( STRING )*
					while ( stream_STRING.HasNext )
					{
						DebugLocation(109, 84);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();
					DebugLocation(109, 92);
					// csst3.g:109:92: ( IDENT )*
					while ( stream_IDENT.HasNext )
					{
						DebugLocation(109, 92);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

				}
				stream_attribRelate.Reset();
				stream_STRING.Reset();
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attrib", 14);
			LeaveRule("attrib", 14);
			LeaveRule_attrib();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "attrib"); }
		return retval;

	}
	// $ANTLR end "attrib"

	partial void EnterRule_attribRelate();
	partial void LeaveRule_attribRelate();
	// $ANTLR start "attribRelate"
	// csst3.g:112:1: attribRelate : ( '=' -> ATTRIBEQUAL | '~=' -> HASVALUE | '|=' -> BEGINSWITH );
	[GrammarRule("attribRelate")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribRelate()
	{
		EnterRule_attribRelate();
		EnterRule("attribRelate", 15);
		TraceIn("attribRelate", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal75 = default(IToken);
		IToken string_literal76 = default(IToken);
		IToken string_literal77 = default(IToken);

		CommonTree char_literal75_tree = default(CommonTree);
		CommonTree string_literal76_tree = default(CommonTree);
		CommonTree string_literal77_tree = default(CommonTree);
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		try { DebugEnterRule(GrammarFileName, "attribRelate");
		DebugLocation(112, 1);
		try
		{
			// csst3.g:113:2: ( '=' -> ATTRIBEQUAL | '~=' -> HASVALUE | '|=' -> BEGINSWITH )
			int alt33=3;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case 43:
				{
				alt33 = 1;
				}
				break;
			case 56:
				{
				alt33 = 2;
				}
				break;
			case 53:
				{
				alt33 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:113:4: '='
				{
				DebugLocation(113, 4);
				char_literal75=(IToken)Match(input,43,Follow._43_in_attribRelate791);  
				stream_43.Add(char_literal75);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 113:9: -> ATTRIBEQUAL
				{
					DebugLocation(113, 12);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(ATTRIBEQUAL, "ATTRIBEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:114:4: '~='
				{
				DebugLocation(114, 4);
				string_literal76=(IToken)Match(input,56,Follow._56_in_attribRelate801);  
				stream_56.Add(string_literal76);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 114:9: -> HASVALUE
				{
					DebugLocation(114, 12);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(HASVALUE, "HASVALUE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// csst3.g:115:4: '|='
				{
				DebugLocation(115, 4);
				string_literal77=(IToken)Match(input,53,Follow._53_in_attribRelate810);  
				stream_53.Add(string_literal77);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 115:9: -> BEGINSWITH
				{
					DebugLocation(115, 12);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(BEGINSWITH, "BEGINSWITH"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribRelate", 15);
			LeaveRule("attribRelate", 15);
			LeaveRule_attribRelate();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "attribRelate"); }
		return retval;

	}
	// $ANTLR end "attribRelate"

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();
	// $ANTLR start "declaration"
	// csst3.g:118:1: declaration : IDENT ':' args -> ^( PROPERTY IDENT args ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 16);
		TraceIn("declaration", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT78 = default(IToken);
		IToken char_literal79 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> args80 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT78_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"rule args");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(118, 1);
		try
		{
			// csst3.g:119:2: ( IDENT ':' args -> ^( PROPERTY IDENT args ) )
			DebugEnterAlt(1);
			// csst3.g:119:4: IDENT ':' args
			{
			DebugLocation(119, 4);
			IDENT78=(IToken)Match(input,IDENT,Follow._IDENT_in_declaration828);  
			stream_IDENT.Add(IDENT78);

			DebugLocation(119, 10);
			char_literal79=(IToken)Match(input,40,Follow._40_in_declaration830);  
			stream_40.Add(char_literal79);

			DebugLocation(119, 14);
			PushFollow(Follow._args_in_declaration832);
			args80=args();
			PopFollow();

			stream_args.Add(args80.Tree);


			{
			// AST REWRITE
			// elements: IDENT, args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 119:19: -> ^( PROPERTY IDENT args )
			{
				DebugLocation(119, 22);
				// csst3.g:119:22: ^( PROPERTY IDENT args )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(119, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY, "PROPERTY"), root_1);

				DebugLocation(119, 34);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(119, 40);
				adaptor.AddChild(root_1, stream_args.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 16);
			LeaveRule("declaration", 16);
			LeaveRule_declaration();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_args();
	partial void LeaveRule_args();
	// $ANTLR start "args"
	// csst3.g:122:1: args : expr ( ( ',' )? expr )* -> ( expr )* ;
	[GrammarRule("args")]
	private AstParserRuleReturnScope<CommonTree, IToken> args()
	{
		EnterRule_args();
		EnterRule("args", 17);
		TraceIn("args", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal82 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr83 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_38=new RewriteRuleITokenStream(adaptor,"token 38");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(122, 1);
		try
		{
			// csst3.g:123:2: ( expr ( ( ',' )? expr )* -> ( expr )* )
			DebugEnterAlt(1);
			// csst3.g:123:4: expr ( ( ',' )? expr )*
			{
			DebugLocation(123, 4);
			PushFollow(Follow._expr_in_args855);
			expr81=expr();
			PopFollow();

			stream_expr.Add(expr81.Tree);
			DebugLocation(123, 9);
			// csst3.g:123:9: ( ( ',' )? expr )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==COLOR||LA35_1==IDENT||LA35_1==NUM||LA35_1==STRING||LA35_1==38))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:123:10: ( ',' )? expr
					{
					DebugLocation(123, 10);
					// csst3.g:123:10: ( ',' )?
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, false);
					int LA34_1 = input.LA(1);

					if ((LA34_1==38))
					{
						alt34 = 1;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:123:10: ','
						{
						DebugLocation(123, 10);
						char_literal82=(IToken)Match(input,38,Follow._38_in_args858);  
						stream_38.Add(char_literal82);


						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(123, 15);
					PushFollow(Follow._expr_in_args861);
					expr83=expr();
					PopFollow();

					stream_expr.Add(expr83.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 123:22: -> ( expr )*
			{
				DebugLocation(123, 25);
				// csst3.g:123:25: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(123, 25);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args", 17);
			LeaveRule("args", 17);
			LeaveRule_args();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return retval;

	}
	// $ANTLR end "args"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// csst3.g:126:1: expr : ( ( NUM ( unit )? ) | IDENT | COLOR | STRING | function );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 18);
		TraceIn("expr", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUM84 = default(IToken);
		IToken IDENT86 = default(IToken);
		IToken COLOR87 = default(IToken);
		IToken STRING88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unit85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUM84_tree = default(CommonTree);
		CommonTree IDENT86_tree = default(CommonTree);
		CommonTree COLOR87_tree = default(CommonTree);
		CommonTree STRING88_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(126, 1);
		try
		{
			// csst3.g:127:2: ( ( NUM ( unit )? ) | IDENT | COLOR | STRING | function )
			int alt37=5;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case NUM:
				{
				alt37 = 1;
				}
				break;
			case IDENT:
				{
				int LA37_2 = input.LA(2);

				if ((LA37_2==34))
				{
					alt37 = 5;
				}
				else if ((LA37_2==COLOR||LA37_2==IDENT||LA37_2==NUM||LA37_2==STRING||LA37_2==35||LA37_2==38||LA37_2==42||LA37_2==45||LA37_2==54))
				{
					alt37 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 37, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COLOR:
				{
				alt37 = 3;
				}
				break;
			case STRING:
				{
				alt37 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:127:4: ( NUM ( unit )? )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(127, 4);
				// csst3.g:127:4: ( NUM ( unit )? )
				DebugEnterAlt(1);
				// csst3.g:127:5: NUM ( unit )?
				{
				DebugLocation(127, 5);
				NUM84=(IToken)Match(input,NUM,Follow._NUM_in_expr880); 
				NUM84_tree = (CommonTree)adaptor.Create(NUM84);
				adaptor.AddChild(root_0, NUM84_tree);
				DebugLocation(127, 9);
				// csst3.g:127:9: ( unit )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==UNIT||LA36_1==33))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:127:9: unit
					{
					DebugLocation(127, 9);
					PushFollow(Follow._unit_in_expr882);
					unit85=unit();
					PopFollow();

					adaptor.AddChild(root_0, unit85.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(36); }


				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:128:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(128, 4);
				IDENT86=(IToken)Match(input,IDENT,Follow._IDENT_in_expr889); 
				IDENT86_tree = (CommonTree)adaptor.Create(IDENT86);
				adaptor.AddChild(root_0, IDENT86_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// csst3.g:129:4: COLOR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(129, 4);
				COLOR87=(IToken)Match(input,COLOR,Follow._COLOR_in_expr894); 
				COLOR87_tree = (CommonTree)adaptor.Create(COLOR87);
				adaptor.AddChild(root_0, COLOR87_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// csst3.g:130:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(130, 4);
				STRING88=(IToken)Match(input,STRING,Follow._STRING_in_expr899); 
				STRING88_tree = (CommonTree)adaptor.Create(STRING88);
				adaptor.AddChild(root_0, STRING88_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// csst3.g:131:4: function
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(131, 4);
				PushFollow(Follow._function_in_expr904);
				function89=function();
				PopFollow();

				adaptor.AddChild(root_0, function89.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 18);
			LeaveRule("expr", 18);
			LeaveRule_expr();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_unit();
	partial void LeaveRule_unit();
	// $ANTLR start "unit"
	// csst3.g:134:1: unit : ( '%' | UNIT ) ;
	[GrammarRule("unit")]
	private AstParserRuleReturnScope<CommonTree, IToken> unit()
	{
		EnterRule_unit();
		EnterRule("unit", 19);
		TraceIn("unit", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set90 = default(IToken);

		CommonTree set90_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unit");
		DebugLocation(134, 1);
		try
		{
			// csst3.g:135:2: ( ( '%' | UNIT ) )
			DebugEnterAlt(1);
			// csst3.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(135, 2);

			set90=(IToken)input.LT(1);
			if (input.LA(1)==UNIT||input.LA(1)==33)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set90));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unit", 19);
			LeaveRule("unit", 19);
			LeaveRule_unit();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "unit"); }
		return retval;

	}
	// $ANTLR end "unit"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// csst3.g:138:1: function : ( IDENT '(' ( args )? ')' -> IDENT '(' ( args )* ')' | IDENT '(' ( selector )? ')' -> IDENT '(' ( selector )* ')' );
	[GrammarRule("function")]
	private AstParserRuleReturnScope<CommonTree, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 20);
		TraceIn("function", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT91 = default(IToken);
		IToken char_literal92 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken IDENT95 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> args93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> selector97 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		CommonTree char_literal94_tree = default(CommonTree);
		CommonTree IDENT95_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"rule args");
		RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(138, 1);
		try
		{
			// csst3.g:139:2: ( IDENT '(' ( args )? ')' -> IDENT '(' ( args )* ')' | IDENT '(' ( selector )? ')' -> IDENT '(' ( selector )* ')' )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			try
			{
				alt40 = dfa40.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:139:4: IDENT '(' ( args )? ')'
				{
				DebugLocation(139, 4);
				IDENT91=(IToken)Match(input,IDENT,Follow._IDENT_in_function932);  
				stream_IDENT.Add(IDENT91);

				DebugLocation(139, 10);
				char_literal92=(IToken)Match(input,34,Follow._34_in_function934);  
				stream_34.Add(char_literal92);

				DebugLocation(139, 14);
				// csst3.g:139:14: ( args )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==COLOR||LA38_1==IDENT||LA38_1==NUM||LA38_1==STRING))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:139:14: args
					{
					DebugLocation(139, 14);
					PushFollow(Follow._args_in_function936);
					args93=args();
					PopFollow();

					stream_args.Add(args93.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(139, 20);
				char_literal94=(IToken)Match(input,35,Follow._35_in_function939);  
				stream_35.Add(char_literal94);



				{
				// AST REWRITE
				// elements: IDENT, 34, args, 35
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 139:24: -> IDENT '(' ( args )* ')'
				{
					DebugLocation(139, 27);
					adaptor.AddChild(root_0, stream_IDENT.NextNode());
					DebugLocation(139, 33);
					adaptor.AddChild(root_0, stream_34.NextNode());
					DebugLocation(139, 37);
					// csst3.g:139:37: ( args )*
					while ( stream_args.HasNext )
					{
						DebugLocation(139, 37);
						adaptor.AddChild(root_0, stream_args.NextTree());

					}
					stream_args.Reset();
					DebugLocation(139, 43);
					adaptor.AddChild(root_0, stream_35.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:140:4: IDENT '(' ( selector )? ')'
				{
				DebugLocation(140, 4);
				IDENT95=(IToken)Match(input,IDENT,Follow._IDENT_in_function955);  
				stream_IDENT.Add(IDENT95);

				DebugLocation(140, 10);
				char_literal96=(IToken)Match(input,34,Follow._34_in_function957);  
				stream_34.Add(char_literal96);

				DebugLocation(140, 14);
				// csst3.g:140:14: ( selector )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==IDENT||LA39_1==UNIT||LA39_1==32||LA39_1==36||(LA39_1>=39 && LA39_1<=41)))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:140:14: selector
					{
					DebugLocation(140, 14);
					PushFollow(Follow._selector_in_function959);
					selector97=selector();
					PopFollow();

					stream_selector.Add(selector97.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(140, 24);
				char_literal98=(IToken)Match(input,35,Follow._35_in_function962);  
				stream_35.Add(char_literal98);



				{
				// AST REWRITE
				// elements: IDENT, 34, selector, 35
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 140:28: -> IDENT '(' ( selector )* ')'
				{
					DebugLocation(140, 31);
					adaptor.AddChild(root_0, stream_IDENT.NextNode());
					DebugLocation(140, 37);
					adaptor.AddChild(root_0, stream_34.NextNode());
					DebugLocation(140, 41);
					// csst3.g:140:41: ( selector )*
					while ( stream_selector.HasNext )
					{
						DebugLocation(140, 41);
						adaptor.AddChild(root_0, stream_selector.NextTree());

					}
					stream_selector.Reset();
					DebugLocation(140, 51);
					adaptor.AddChild(root_0, stream_35.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 20);
			LeaveRule("function", 20);
			LeaveRule_function();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"
	#endregion Rules


	#region DFA
	private DFA40 dfa40;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa40 = new DFA40( this );
	}

	private class DFA40 : DFA
	{
		private const string DFA40_eotS =
			"\x8\xFFFF";
		private const string DFA40_eofS =
			"\x8\xFFFF";
		private const string DFA40_minS =
			"\x1\xF\x1\x22\x1\x9\x1\xFFFF\x1\x9\x2\xFFFF\x1\x9";
		private const string DFA40_maxS =
			"\x1\xF\x1\x22\x1\x29\x1\xFFFF\x1\x37\x2\xFFFF\x1\x37";
		private const string DFA40_acceptS =
			"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA40_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA40_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x3\x5\xFFFF\x1\x4\x3\xFFFF\x1\x3\x8\xFFFF\x1\x3\x1\xFFFF\x1\x6\x1"+
				"\xFFFF\x1\x6\x2\xFFFF\x1\x5\x1\x6\x2\xFFFF\x3\x6",
				"",
				"\x1\x5\x5\xFFFF\x1\x7\x3\xFFFF\x1\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x6\x1"+
				"\xFFFF\x1\x6\x1\xFFFF\x2\x5\x2\x6\x1\x5\x3\x6\x2\xFFFF\x1\x6\x5\xFFFF"+
				"\x1\x6\x4\xFFFF\x1\x6",
				"",
				"",
				"\x1\x5\x5\xFFFF\x1\x7\x3\xFFFF\x1\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x6\x1"+
				"\xFFFF\x1\x6\x1\xFFFF\x2\x5\x2\x6\x1\x5\x3\x6\x2\xFFFF\x1\x6\x5\xFFFF"+
				"\x1\x6\x4\xFFFF\x1\x6"
			};

		private static readonly short[] DFA40_eot = DFA.UnpackEncodedString(DFA40_eotS);
		private static readonly short[] DFA40_eof = DFA.UnpackEncodedString(DFA40_eofS);
		private static readonly char[] DFA40_min = DFA.UnpackEncodedStringToUnsignedChars(DFA40_minS);
		private static readonly char[] DFA40_max = DFA.UnpackEncodedStringToUnsignedChars(DFA40_maxS);
		private static readonly short[] DFA40_accept = DFA.UnpackEncodedString(DFA40_acceptS);
		private static readonly short[] DFA40_special = DFA.UnpackEncodedString(DFA40_specialS);
		private static readonly short[][] DFA40_transition;

		static DFA40()
		{
			int numStates = DFA40_transitionS.Length;
			DFA40_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA40_transition[i] = DFA.UnpackEncodedString(DFA40_transitionS[i]);
			}
		}

		public DFA40( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 40;
			this.eot = DFA40_eot;
			this.eof = DFA40_eof;
			this.min = DFA40_min;
			this.max = DFA40_max;
			this.accept = DFA40_accept;
			this.special = DFA40_special;
			this.transition = DFA40_transition;
		}

		public override string Description { get { return "138:1: function : ( IDENT '(' ( args )? ')' -> IDENT '(' ( args )* ')' | IDENT '(' ( selector )? ')' -> IDENT '(' ( selector )* ')' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _importRule_in_stylesheet174 = new BitSet(new ulong[]{0x3C39140008002UL});
		public static readonly BitSet _media_in_stylesheet178 = new BitSet(new ulong[]{0x3C39140008002UL});
		public static readonly BitSet _pageRule_in_stylesheet182 = new BitSet(new ulong[]{0x3C39140008002UL});
		public static readonly BitSet _ruleset_in_stylesheet186 = new BitSet(new ulong[]{0x3C39140008002UL});
		public static readonly BitSet _46_in_importRule200 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _47_in_importRule204 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _STRING_in_importRule208 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_importRule210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_importRule226 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _47_in_importRule230 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _function_in_importRule234 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_importRule236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_media257 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_media259 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_media261 = new BitSet(new ulong[]{0x2039140008000UL});
		public static readonly BitSet _pageRule_in_media264 = new BitSet(new ulong[]{0x42039140008000UL});
		public static readonly BitSet _ruleset_in_media268 = new BitSet(new ulong[]{0x42039140008000UL});
		public static readonly BitSet _54_in_media272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_pageRule300 = new BitSet(new ulong[]{0x10030000008000UL});
		public static readonly BitSet _IDENT_in_pageRule302 = new BitSet(new ulong[]{0x10030000008000UL});
		public static readonly BitSet _pseudo_in_pageRule305 = new BitSet(new ulong[]{0x10030000000000UL});
		public static readonly BitSet _52_in_pageRule308 = new BitSet(new ulong[]{0x40200000008000UL});
		public static readonly BitSet _properties_in_pageRule310 = new BitSet(new ulong[]{0x40200000000000UL});
		public static readonly BitSet _region_in_pageRule313 = new BitSet(new ulong[]{0x40200000000000UL});
		public static readonly BitSet _54_in_pageRule316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_region347 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_region349 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_region351 = new BitSet(new ulong[]{0x40000000008000UL});
		public static readonly BitSet _properties_in_region353 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_region356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectors_in_ruleset381 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_ruleset383 = new BitSet(new ulong[]{0x40000000008000UL});
		public static readonly BitSet _properties_in_ruleset385 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_ruleset388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_in_selectors413 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _38_in_selectors416 = new BitSet(new ulong[]{0x39140008000UL});
		public static readonly BitSet _selector_in_selectors418 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _elem_in_selector432 = new BitSet(new ulong[]{0x8013B140008002UL});
		public static readonly BitSet _selectorOperation_in_selector434 = new BitSet(new ulong[]{0x8013B140008002UL});
		public static readonly BitSet _pseudo_in_selector437 = new BitSet(new ulong[]{0x30000000002UL});
		public static readonly BitSet _pseudo_in_selector454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectop_in_selectorOperation472 = new BitSet(new ulong[]{0x9140008000UL});
		public static readonly BitSet _elem_in_selectorOperation475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_selectop493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _37_in_selectop509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_selectop526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_properties541 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_properties544 = new BitSet(new ulong[]{0x40000008002UL});
		public static readonly BitSet _declaration_in_properties546 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _IDENT_in_elem572 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _UNIT_in_elem576 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _attrib_in_elem579 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _32_in_elem602 = new BitSet(new ulong[]{0x40008000UL});
		public static readonly BitSet _IDENT_in_elem605 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _UNIT_in_elem609 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _attrib_in_elem612 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _39_in_elem635 = new BitSet(new ulong[]{0x40008000UL});
		public static readonly BitSet _IDENT_in_elem638 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _UNIT_in_elem642 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _attrib_in_elem645 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _36_in_elem668 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _attrib_in_elem670 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _40_in_pseudo694 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _41_in_pseudo696 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_pseudo699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_pseudo715 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _41_in_pseudo717 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _function_in_pseudo720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_attrib741 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_attrib743 = new BitSet(new ulong[]{0x128080000000000UL});
		public static readonly BitSet _attribRelate_in_attrib746 = new BitSet(new ulong[]{0x10008000UL});
		public static readonly BitSet _STRING_in_attrib749 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENT_in_attrib753 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_attrib758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_attribRelate791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_attribRelate801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_attribRelate810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_declaration828 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_declaration830 = new BitSet(new ulong[]{0x10088200UL});
		public static readonly BitSet _args_in_declaration832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_args855 = new BitSet(new ulong[]{0x4010088202UL});
		public static readonly BitSet _38_in_args858 = new BitSet(new ulong[]{0x10088200UL});
		public static readonly BitSet _expr_in_args861 = new BitSet(new ulong[]{0x4010088202UL});
		public static readonly BitSet _NUM_in_expr880 = new BitSet(new ulong[]{0x240000002UL});
		public static readonly BitSet _unit_in_expr882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_expr889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLOR_in_expr894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_expr904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_function932 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_function934 = new BitSet(new ulong[]{0x810088200UL});
		public static readonly BitSet _args_in_function936 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_function939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_function955 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_function957 = new BitSet(new ulong[]{0x39940008000UL});
		public static readonly BitSet _selector_in_function959 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_function962 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace SIL.PublishingSolution.Compiler
