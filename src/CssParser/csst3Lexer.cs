//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 csst3.g 2016-06-28 15:31:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace SIL.PublishingSolution.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class csst3Lexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ANY=4;
	public const int ATTRIB=5;
	public const int ATTRIBEQUAL=6;
	public const int BEGINSWITH=7;
	public const int CLASS=8;
	public const int COLOR=9;
	public const int COMMENT=10;
	public const int EM=11;
	public const int FUNCTION=12;
	public const int HASVALUE=13;
	public const int ID=14;
	public const int IDENT=15;
	public const int IMPORT=16;
	public const int LINE_COMMENT=17;
	public const int MEDIA=18;
	public const int NUM=19;
	public const int PAGE=20;
	public const int PARENTOF=21;
	public const int PRECEDES=22;
	public const int PROPERTY=23;
	public const int PSEUDO=24;
	public const int REGION=25;
	public const int RULE=26;
	public const int SIBLING=27;
	public const int STRING=28;
	public const int TAG=29;
	public const int UNIT=30;
	public const int WS=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	const int HIDDEN = -9999;

	// delegates
	// delegators

	public csst3Lexer()
	{
		OnCreated();
	}

	public csst3Lexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public csst3Lexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "csst3.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 1);
		TraceIn("T__32", 1);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// csst3.g:10:7: ( '#' )
			DebugEnterAlt(1);
			// csst3.g:10:9: '#'
			{
			DebugLocation(10, 9);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 1);
			LeaveRule("T__32", 1);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 2);
		TraceIn("T__33", 2);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// csst3.g:11:7: ( '%' )
			DebugEnterAlt(1);
			// csst3.g:11:9: '%'
			{
			DebugLocation(11, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 2);
			LeaveRule("T__33", 2);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 3);
		TraceIn("T__34", 3);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// csst3.g:12:7: ( '(' )
			DebugEnterAlt(1);
			// csst3.g:12:9: '('
			{
			DebugLocation(12, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 3);
			LeaveRule("T__34", 3);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 4);
		TraceIn("T__35", 4);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// csst3.g:13:7: ( ')' )
			DebugEnterAlt(1);
			// csst3.g:13:9: ')'
			{
			DebugLocation(13, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 4);
			LeaveRule("T__35", 4);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 5);
		TraceIn("T__36", 5);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// csst3.g:14:7: ( '*' )
			DebugEnterAlt(1);
			// csst3.g:14:9: '*'
			{
			DebugLocation(14, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 5);
			LeaveRule("T__36", 5);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 6);
		TraceIn("T__37", 6);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// csst3.g:15:7: ( '+' )
			DebugEnterAlt(1);
			// csst3.g:15:9: '+'
			{
			DebugLocation(15, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 6);
			LeaveRule("T__37", 6);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 7);
		TraceIn("T__38", 7);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// csst3.g:16:7: ( ',' )
			DebugEnterAlt(1);
			// csst3.g:16:9: ','
			{
			DebugLocation(16, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 7);
			LeaveRule("T__38", 7);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 8);
		TraceIn("T__39", 8);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// csst3.g:17:7: ( '.' )
			DebugEnterAlt(1);
			// csst3.g:17:9: '.'
			{
			DebugLocation(17, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 8);
			LeaveRule("T__39", 8);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 9);
		TraceIn("T__40", 9);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// csst3.g:18:7: ( ':' )
			DebugEnterAlt(1);
			// csst3.g:18:9: ':'
			{
			DebugLocation(18, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 9);
			LeaveRule("T__40", 9);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 10);
		TraceIn("T__41", 10);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// csst3.g:19:7: ( '::' )
			DebugEnterAlt(1);
			// csst3.g:19:9: '::'
			{
			DebugLocation(19, 9);
			Match("::"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 10);
			LeaveRule("T__41", 10);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 11);
		TraceIn("T__42", 11);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// csst3.g:20:7: ( ';' )
			DebugEnterAlt(1);
			// csst3.g:20:9: ';'
			{
			DebugLocation(20, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 11);
			LeaveRule("T__42", 11);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 12);
		TraceIn("T__43", 12);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// csst3.g:21:7: ( '=' )
			DebugEnterAlt(1);
			// csst3.g:21:9: '='
			{
			DebugLocation(21, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 12);
			LeaveRule("T__43", 12);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 13);
		TraceIn("T__44", 13);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// csst3.g:22:7: ( '>' )
			DebugEnterAlt(1);
			// csst3.g:22:9: '>'
			{
			DebugLocation(22, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 13);
			LeaveRule("T__44", 13);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 14);
		TraceIn("T__45", 14);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// csst3.g:23:7: ( '@' )
			DebugEnterAlt(1);
			// csst3.g:23:9: '@'
			{
			DebugLocation(23, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 14);
			LeaveRule("T__45", 14);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 15);
		TraceIn("T__46", 15);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// csst3.g:24:7: ( '@import' )
			DebugEnterAlt(1);
			// csst3.g:24:9: '@import'
			{
			DebugLocation(24, 9);
			Match("@import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 15);
			LeaveRule("T__46", 15);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 16);
		TraceIn("T__47", 16);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// csst3.g:25:7: ( '@include' )
			DebugEnterAlt(1);
			// csst3.g:25:9: '@include'
			{
			DebugLocation(25, 9);
			Match("@include"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 16);
			LeaveRule("T__47", 16);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 17);
		TraceIn("T__48", 17);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// csst3.g:26:7: ( '@media' )
			DebugEnterAlt(1);
			// csst3.g:26:9: '@media'
			{
			DebugLocation(26, 9);
			Match("@media"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 17);
			LeaveRule("T__48", 17);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 18);
		TraceIn("T__49", 18);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// csst3.g:27:7: ( '@page' )
			DebugEnterAlt(1);
			// csst3.g:27:9: '@page'
			{
			DebugLocation(27, 9);
			Match("@page"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 18);
			LeaveRule("T__49", 18);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 19);
		TraceIn("T__50", 19);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// csst3.g:28:7: ( '[' )
			DebugEnterAlt(1);
			// csst3.g:28:9: '['
			{
			DebugLocation(28, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 19);
			LeaveRule("T__50", 19);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 20);
		TraceIn("T__51", 20);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// csst3.g:29:7: ( ']' )
			DebugEnterAlt(1);
			// csst3.g:29:9: ']'
			{
			DebugLocation(29, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 20);
			LeaveRule("T__51", 20);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 21);
		TraceIn("T__52", 21);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// csst3.g:30:7: ( '{' )
			DebugEnterAlt(1);
			// csst3.g:30:9: '{'
			{
			DebugLocation(30, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 21);
			LeaveRule("T__52", 21);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 22);
		TraceIn("T__53", 22);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// csst3.g:31:7: ( '|=' )
			DebugEnterAlt(1);
			// csst3.g:31:9: '|='
			{
			DebugLocation(31, 9);
			Match("|="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 22);
			LeaveRule("T__53", 22);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 23);
		TraceIn("T__54", 23);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// csst3.g:32:7: ( '}' )
			DebugEnterAlt(1);
			// csst3.g:32:9: '}'
			{
			DebugLocation(32, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 23);
			LeaveRule("T__54", 23);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 24);
		TraceIn("T__55", 24);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// csst3.g:33:7: ( '~' )
			DebugEnterAlt(1);
			// csst3.g:33:9: '~'
			{
			DebugLocation(33, 9);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 24);
			LeaveRule("T__55", 24);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 25);
		TraceIn("T__56", 25);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// csst3.g:34:7: ( '~=' )
			DebugEnterAlt(1);
			// csst3.g:34:9: '~='
			{
			DebugLocation(34, 9);
			Match("~="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 25);
			LeaveRule("T__56", 25);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_UNIT();
	partial void LeaveRule_UNIT();

	// $ANTLR start "UNIT"
	[GrammarRule("UNIT")]
	private void mUNIT()
	{
		EnterRule_UNIT();
		EnterRule("UNIT", 26);
		TraceIn("UNIT", 26);
		try
		{
			int _type = UNIT;
			int _channel = DefaultTokenChannel;
			// csst3.g:143:11: ( 'em' | 'px' | 'cm' | 'mm' | 'in' | 'pt' | 'pc' | 'ex' | 'deg' | 'rad' | 'grad' | 'ms' | 's' | 'hz' | 'khz' )
			int alt1=15;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case 'e':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='m'))
				{
					alt1 = 1;
				}
				else if ((LA1_2=='x'))
				{
					alt1 = 8;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 'p':
				{
				switch (input.LA(2))
				{
				case 'x':
					{
					alt1 = 2;
					}
					break;
				case 't':
					{
					alt1 = 6;
					}
					break;
				case 'c':
					{
					alt1 = 7;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 1, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 'c':
				{
				alt1 = 3;
				}
				break;
			case 'm':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='m'))
				{
					alt1 = 4;
				}
				else if ((LA1_2=='s'))
				{
					alt1 = 12;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 'i':
				{
				alt1 = 5;
				}
				break;
			case 'd':
				{
				alt1 = 9;
				}
				break;
			case 'r':
				{
				alt1 = 10;
				}
				break;
			case 'g':
				{
				alt1 = 11;
				}
				break;
			case 's':
				{
				alt1 = 13;
				}
				break;
			case 'h':
				{
				alt1 = 14;
				}
				break;
			case 'k':
				{
				alt1 = 15;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:143:13: 'em'
				{
				DebugLocation(143, 13);
				Match("em"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:143:18: 'px'
				{
				DebugLocation(143, 18);
				Match("px"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// csst3.g:143:23: 'cm'
				{
				DebugLocation(143, 23);
				Match("cm"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// csst3.g:143:28: 'mm'
				{
				DebugLocation(143, 28);
				Match("mm"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// csst3.g:143:33: 'in'
				{
				DebugLocation(143, 33);
				Match("in"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// csst3.g:143:38: 'pt'
				{
				DebugLocation(143, 38);
				Match("pt"); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// csst3.g:143:43: 'pc'
				{
				DebugLocation(143, 43);
				Match("pc"); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// csst3.g:143:48: 'ex'
				{
				DebugLocation(143, 48);
				Match("ex"); 


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// csst3.g:143:53: 'deg'
				{
				DebugLocation(143, 53);
				Match("deg"); 


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// csst3.g:143:59: 'rad'
				{
				DebugLocation(143, 59);
				Match("rad"); 


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// csst3.g:143:65: 'grad'
				{
				DebugLocation(143, 65);
				Match("grad"); 


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// csst3.g:143:72: 'ms'
				{
				DebugLocation(143, 72);
				Match("ms"); 


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// csst3.g:143:77: 's'
				{
				DebugLocation(143, 77);
				Match('s'); 

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// csst3.g:143:81: 'hz'
				{
				DebugLocation(143, 81);
				Match("hz"); 


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// csst3.g:143:86: 'khz'
				{
				DebugLocation(143, 86);
				Match("khz"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UNIT", 26);
			LeaveRule("UNIT", 26);
			LeaveRule_UNIT();
		}
	}
	// $ANTLR end "UNIT"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 27);
		TraceIn("IDENT", 27);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// csst3.g:146:2: ( ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' ) ( '_' | '-' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' | '0' .. '9' )* | '-' ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' ) ( '_' | '-' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' | '0' .. '9' )* )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if (((LA4_1>='A' && LA4_1<='Z')||LA4_1=='_'||(LA4_1>='a' && LA4_1<='z')||(LA4_1>='\u00A0' && LA4_1<='\uFFFE')))
			{
				alt4 = 1;
			}
			else if ((LA4_1=='-'))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:146:4: ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' ) ( '_' | '-' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' | '0' .. '9' )*
				{
				DebugLocation(146, 4);
				input.Consume();

				DebugLocation(147, 3);
				// csst3.g:147:3: ( '_' | '-' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' | '0' .. '9' )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1=='-'||(LA2_1>='0' && LA2_1<='9')||(LA2_1>='A' && LA2_1<='Z')||LA2_1=='_'||(LA2_1>='a' && LA2_1<='z')||(LA2_1>='\u00A0' && LA2_1<='\uFFFE')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:
						{
						DebugLocation(147, 3);
						input.Consume();


						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:148:4: '-' ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' ) ( '_' | '-' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' | '0' .. '9' )*
				{
				DebugLocation(148, 4);
				Match('-'); 
				DebugLocation(148, 8);
				input.Consume();

				DebugLocation(149, 3);
				// csst3.g:149:3: ( '_' | '-' | 'a' .. 'z' | 'A' .. 'Z' | '\\u00A0' .. '\\ufffe' | '0' .. '9' )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1=='-'||(LA3_1>='0' && LA3_1<='9')||(LA3_1>='A' && LA3_1<='Z')||LA3_1=='_'||(LA3_1>='a' && LA3_1<='z')||(LA3_1>='\u00A0' && LA3_1<='\uFFFE')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:
						{
						DebugLocation(149, 3);
						input.Consume();


						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 27);
			LeaveRule("IDENT", 27);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 28);
		TraceIn("STRING", 28);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// csst3.g:154:2: ( '\"' ( ( '\\\\' ~ ( '\\n' ) ) |~ ( '\"' | '\\n' | '\\r' | '\\\\' ) )* '\"' | '\\'' ( ( '\\\\' ~ ( '\\n' ) ) |~ ( '\\'' | '\\n' | '\\r' | '\\\\' ) )* '\\'' )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='\"'))
			{
				alt7 = 1;
			}
			else if ((LA7_1=='\''))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:154:4: '\"' ( ( '\\\\' ~ ( '\\n' ) ) |~ ( '\"' | '\\n' | '\\r' | '\\\\' ) )* '\"'
				{
				DebugLocation(154, 4);
				Match('\"'); 
				DebugLocation(154, 8);
				// csst3.g:154:8: ( ( '\\\\' ~ ( '\\n' ) ) |~ ( '\"' | '\\n' | '\\r' | '\\\\' ) )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=3;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1=='\\'))
					{
						alt5 = 1;
					}
					else if (((LA5_1>='\u0000' && LA5_1<='\t')||(LA5_1>='\u000B' && LA5_1<='\f')||(LA5_1>='\u000E' && LA5_1<='!')||(LA5_1>='#' && LA5_1<='[')||(LA5_1>=']' && LA5_1<='\uFFFF')))
					{
						alt5 = 2;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:154:10: ( '\\\\' ~ ( '\\n' ) )
						{
						DebugLocation(154, 10);
						// csst3.g:154:10: ( '\\\\' ~ ( '\\n' ) )
						DebugEnterAlt(1);
						// csst3.g:154:11: '\\\\' ~ ( '\\n' )
						{
						DebugLocation(154, 11);
						Match('\\'); 
						DebugLocation(154, 16);
						input.Consume();


						}


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// csst3.g:155:17: ~ ( '\"' | '\\n' | '\\r' | '\\\\' )
						{
						DebugLocation(155, 17);
						input.Consume();


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(156, 17);
				Match('\"'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:157:4: '\\'' ( ( '\\\\' ~ ( '\\n' ) ) |~ ( '\\'' | '\\n' | '\\r' | '\\\\' ) )* '\\''
				{
				DebugLocation(157, 4);
				Match('\''); 
				DebugLocation(157, 9);
				// csst3.g:157:9: ( ( '\\\\' ~ ( '\\n' ) ) |~ ( '\\'' | '\\n' | '\\r' | '\\\\' ) )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=3;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if ((LA6_1=='\\'))
					{
						alt6 = 1;
					}
					else if (((LA6_1>='\u0000' && LA6_1<='\t')||(LA6_1>='\u000B' && LA6_1<='\f')||(LA6_1>='\u000E' && LA6_1<='&')||(LA6_1>='(' && LA6_1<='[')||(LA6_1>=']' && LA6_1<='\uFFFF')))
					{
						alt6 = 2;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:157:11: ( '\\\\' ~ ( '\\n' ) )
						{
						DebugLocation(157, 11);
						// csst3.g:157:11: ( '\\\\' ~ ( '\\n' ) )
						DebugEnterAlt(1);
						// csst3.g:157:12: '\\\\' ~ ( '\\n' )
						{
						DebugLocation(157, 12);
						Match('\\'); 
						DebugLocation(157, 17);
						input.Consume();


						}


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// csst3.g:158:17: ~ ( '\\'' | '\\n' | '\\r' | '\\\\' )
						{
						DebugLocation(158, 17);
						input.Consume();


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(159, 18);
				Match('\''); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 28);
			LeaveRule("STRING", 28);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_NUM();
	partial void LeaveRule_NUM();

	// $ANTLR start "NUM"
	[GrammarRule("NUM")]
	private void mNUM()
	{
		EnterRule_NUM();
		EnterRule("NUM", 29);
		TraceIn("NUM", 29);
		try
		{
			int _type = NUM;
			int _channel = DefaultTokenChannel;
			// csst3.g:163:2: ( ( '-' )? ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? | ( '-' )? '.' ( '0' .. '9' )+ )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case '-':
				{
				int LA14_2 = input.LA(2);

				if (((LA14_2>='0' && LA14_2<='9')))
				{
					alt14 = 1;
				}
				else if ((LA14_2=='.'))
				{
					alt14 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt14 = 1;
				}
				break;
			case '.':
				{
				alt14 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:163:4: ( '-' )? ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )?
				{
				DebugLocation(163, 4);
				// csst3.g:163:4: ( '-' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='-'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:163:4: '-'
					{
					DebugLocation(163, 4);
					Match('-'); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(163, 9);
				// csst3.g:163:9: ( '0' .. '9' )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if (((LA9_1>='0' && LA9_1<='9')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:
						{
						DebugLocation(163, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(163, 21);
				// csst3.g:163:21: ( '.' ( '0' .. '9' )+ )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1=='.'))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:163:22: '.' ( '0' .. '9' )+
					{
					DebugLocation(163, 22);
					Match('.'); 
					DebugLocation(163, 26);
					// csst3.g:163:26: ( '0' .. '9' )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_1 = input.LA(1);

						if (((LA10_1>='0' && LA10_1<='9')))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch (alt10)
						{
						case 1:
							DebugEnterAlt(1);
							// csst3.g:
							{
							DebugLocation(163, 26);
							input.Consume();


							}
							break;

						default:
							if (cnt10 >= 1)
								goto loop10;

							EarlyExitException eee10 = new EarlyExitException( 10, input );
							DebugRecognitionException(eee10);
							throw eee10;
						}
						cnt10++;
					}
					loop10:
						;

					} finally { DebugExitSubRule(10); }


					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// csst3.g:164:4: ( '-' )? '.' ( '0' .. '9' )+
				{
				DebugLocation(164, 4);
				// csst3.g:164:4: ( '-' )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1=='-'))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:164:4: '-'
					{
					DebugLocation(164, 4);
					Match('-'); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(164, 9);
				Match('.'); 
				DebugLocation(164, 13);
				// csst3.g:164:13: ( '0' .. '9' )+
				int cnt13=0;
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if (((LA13_1>='0' && LA13_1<='9')))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// csst3.g:
						{
						DebugLocation(164, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt13 >= 1)
							goto loop13;

						EarlyExitException eee13 = new EarlyExitException( 13, input );
						DebugRecognitionException(eee13);
						throw eee13;
					}
					cnt13++;
				}
				loop13:
					;

				} finally { DebugExitSubRule(13); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUM", 29);
			LeaveRule("NUM", 29);
			LeaveRule_NUM();
		}
	}
	// $ANTLR end "NUM"

	partial void EnterRule_COLOR();
	partial void LeaveRule_COLOR();

	// $ANTLR start "COLOR"
	[GrammarRule("COLOR")]
	private void mCOLOR()
	{
		EnterRule_COLOR();
		EnterRule("COLOR", 30);
		TraceIn("COLOR", 30);
		try
		{
			int _type = COLOR;
			int _channel = DefaultTokenChannel;
			// csst3.g:168:2: ( '#' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			DebugEnterAlt(1);
			// csst3.g:168:4: '#' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			{
			DebugLocation(168, 4);
			Match('#'); 
			DebugLocation(168, 8);
			// csst3.g:168:8: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if (((LA15_1>='0' && LA15_1<='9')||(LA15_1>='A' && LA15_1<='F')||(LA15_1>='a' && LA15_1<='f')))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:
					{
					DebugLocation(168, 8);
					input.Consume();


					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLOR", 30);
			LeaveRule("COLOR", 30);
			LeaveRule_COLOR();
		}
	}
	// $ANTLR end "COLOR"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 31);
		TraceIn("WS", 31);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// csst3.g:173:4: ( ( ' ' | '\\t' | '\\r' | '\\n' | '\\f' )+ )
			DebugEnterAlt(1);
			// csst3.g:173:6: ( ' ' | '\\t' | '\\r' | '\\n' | '\\f' )+
			{
			DebugLocation(173, 6);
			// csst3.g:173:6: ( ' ' | '\\t' | '\\r' | '\\n' | '\\f' )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='\t' && LA16_1<='\n')||(LA16_1>='\f' && LA16_1<='\r')||LA16_1==' '))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:
					{
					DebugLocation(173, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(173, 34);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 31);
			LeaveRule("WS", 31);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 32);
		TraceIn("COMMENT", 32);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// csst3.g:177:2: ( '/*' ( . )* '*/' )
			DebugEnterAlt(1);
			// csst3.g:177:4: '/*' ( . )* '*/'
			{
			DebugLocation(177, 4);
			Match("/*"); 

			DebugLocation(177, 9);
			// csst3.g:177:9: ( . )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1=='*'))
				{
					int LA17_2 = input.LA(2);

					if ((LA17_2=='/'))
					{
						alt17 = 2;
					}
					else if (((LA17_2>='\u0000' && LA17_2<='.')||(LA17_2>='0' && LA17_2<='\uFFFF')))
					{
						alt17 = 1;
					}


				}
				else if (((LA17_1>='\u0000' && LA17_1<=')')||(LA17_1>='+' && LA17_1<='\uFFFF')))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:177:9: .
					{
					DebugLocation(177, 9);
					MatchAny(); 

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(177, 12);
			Match("*/"); 

			DebugLocation(177, 17);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 32);
			LeaveRule("COMMENT", 32);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 33);
		TraceIn("LINE_COMMENT", 33);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// csst3.g:181:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// csst3.g:181:4: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(181, 4);
			Match("//"); 

			DebugLocation(181, 9);
			// csst3.g:181:9: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if (((LA18_1>='\u0000' && LA18_1<='\t')||(LA18_1>='\u000B' && LA18_1<='\f')||(LA18_1>='\u000E' && LA18_1<='\uFFFF')))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// csst3.g:
					{
					DebugLocation(181, 9);
					input.Consume();


					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }

			DebugLocation(181, 23);
			// csst3.g:181:23: ( '\\r' )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1=='\r'))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// csst3.g:181:23: '\\r'
				{
				DebugLocation(181, 23);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(181, 29);
			Match('\n'); 
			DebugLocation(181, 34);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 33);
			LeaveRule("LINE_COMMENT", 33);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	public override void mTokens()
	{
		// csst3.g:1:8: ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | UNIT | IDENT | STRING | NUM | COLOR | WS | COMMENT | LINE_COMMENT )
		int alt20=33;
		try { DebugEnterDecision(20, false);
		try
		{
			alt20 = dfa20.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(20); }
		switch (alt20)
		{
		case 1:
			DebugEnterAlt(1);
			// csst3.g:1:10: T__32
			{
			DebugLocation(1, 10);
			mT__32(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// csst3.g:1:16: T__33
			{
			DebugLocation(1, 16);
			mT__33(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// csst3.g:1:22: T__34
			{
			DebugLocation(1, 22);
			mT__34(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// csst3.g:1:28: T__35
			{
			DebugLocation(1, 28);
			mT__35(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// csst3.g:1:34: T__36
			{
			DebugLocation(1, 34);
			mT__36(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// csst3.g:1:40: T__37
			{
			DebugLocation(1, 40);
			mT__37(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// csst3.g:1:46: T__38
			{
			DebugLocation(1, 46);
			mT__38(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// csst3.g:1:52: T__39
			{
			DebugLocation(1, 52);
			mT__39(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// csst3.g:1:58: T__40
			{
			DebugLocation(1, 58);
			mT__40(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// csst3.g:1:64: T__41
			{
			DebugLocation(1, 64);
			mT__41(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// csst3.g:1:70: T__42
			{
			DebugLocation(1, 70);
			mT__42(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// csst3.g:1:76: T__43
			{
			DebugLocation(1, 76);
			mT__43(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// csst3.g:1:82: T__44
			{
			DebugLocation(1, 82);
			mT__44(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// csst3.g:1:88: T__45
			{
			DebugLocation(1, 88);
			mT__45(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// csst3.g:1:94: T__46
			{
			DebugLocation(1, 94);
			mT__46(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// csst3.g:1:100: T__47
			{
			DebugLocation(1, 100);
			mT__47(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// csst3.g:1:106: T__48
			{
			DebugLocation(1, 106);
			mT__48(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// csst3.g:1:112: T__49
			{
			DebugLocation(1, 112);
			mT__49(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// csst3.g:1:118: T__50
			{
			DebugLocation(1, 118);
			mT__50(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// csst3.g:1:124: T__51
			{
			DebugLocation(1, 124);
			mT__51(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// csst3.g:1:130: T__52
			{
			DebugLocation(1, 130);
			mT__52(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// csst3.g:1:136: T__53
			{
			DebugLocation(1, 136);
			mT__53(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// csst3.g:1:142: T__54
			{
			DebugLocation(1, 142);
			mT__54(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// csst3.g:1:148: T__55
			{
			DebugLocation(1, 148);
			mT__55(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// csst3.g:1:154: T__56
			{
			DebugLocation(1, 154);
			mT__56(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// csst3.g:1:160: UNIT
			{
			DebugLocation(1, 160);
			mUNIT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// csst3.g:1:165: IDENT
			{
			DebugLocation(1, 165);
			mIDENT(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// csst3.g:1:171: STRING
			{
			DebugLocation(1, 171);
			mSTRING(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// csst3.g:1:178: NUM
			{
			DebugLocation(1, 178);
			mNUM(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// csst3.g:1:182: COLOR
			{
			DebugLocation(1, 182);
			mCOLOR(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// csst3.g:1:188: WS
			{
			DebugLocation(1, 188);
			mWS(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// csst3.g:1:191: COMMENT
			{
			DebugLocation(1, 191);
			mCOMMENT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// csst3.g:1:199: LINE_COMMENT
			{
			DebugLocation(1, 199);
			mLINE_COMMENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA20 dfa20;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa20 = new DFA20(this);
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x1\xFFFF\x1\x25\x6\xFFFF\x1\x27\x1\x29\x3\xFFFF\x1\x2D\x5\xFFFF\x1\x2F"+
			"\x8\x1F\x1\x3C\x2\x1F\x11\xFFFF\x9\x3C\x3\x1F\x1\xFFFF\x1\x3C\x1\x1F"+
			"\x4\xFFFF\x2\x3C\x1\x1F\x2\x3C";
		private const string DFA20_eofS =
			"\x48\xFFFF";
		private const string DFA20_minS =
			"\x1\x9\x1\x30\x6\xFFFF\x1\x30\x1\x3A\x3\xFFFF\x1\x69\x5\xFFFF\x1\x3D"+
			"\x1\x6D\x1\x63\x2\x6D\x1\x6E\x1\x65\x1\x61\x1\x72\x1\x2D\x1\x7A\x1\x68"+
			"\x1\xFFFF\x1\x2E\x3\xFFFF\x1\x2A\x5\xFFFF\x1\x6D\x5\xFFFF\x9\x2D\x1\x67"+
			"\x1\x64\x1\x61\x1\xFFFF\x1\x2D\x1\x7A\x4\xFFFF\x2\x2D\x1\x64\x2\x2D";
		private const string DFA20_maxS =
			"\x1\xFFFE\x1\x66\x6\xFFFF\x1\x39\x1\x3A\x3\xFFFF\x1\x70\x5\xFFFF\x1\x3D"+
			"\x2\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x61\x1\x72\x1\xFFFE\x1\x7A\x1"+
			"\x68\x1\xFFFF\x1\xFFFE\x3\xFFFF\x1\x2F\x5\xFFFF\x1\x6E\x5\xFFFF\x9\xFFFE"+
			"\x1\x67\x1\x64\x1\x61\x1\xFFFF\x1\xFFFE\x1\x7A\x4\xFFFF\x2\xFFFE\x1\x64"+
			"\x2\xFFFE";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x2\xFFFF\x1\xB\x1\xC\x1"+
			"\xD\x1\xFFFF\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\xC\xFFFF\x1\x1B\x1\xFFFF"+
			"\x1\x1C\x1\x1D\x1\x1F\x1\xFFFF\x1\x1\x1\x1E\x1\x8\x1\xA\x1\x9\x1\xFFFF"+
			"\x1\x11\x1\x12\x1\xE\x1\x19\x1\x18\xC\xFFFF\x1\x1A\x2\xFFFF\x1\x20\x1"+
			"\x21\x1\xF\x1\x10\x5\xFFFF";
		private const string DFA20_specialS =
			"\x48\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x2\x23\x1\xFFFF\x2\x23\x12\xFFFF\x1\x23\x1\xFFFF\x1\x21\x1\x1\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x21\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x20\x1\x8\x1"+
				"\x24\xA\x22\x1\x9\x1\xA\x1\xFFFF\x1\xB\x1\xC\x1\xFFFF\x1\xD\x1A\x1F"+
				"\x1\xE\x1\xFFFF\x1\xF\x1\xFFFF\x1\x1F\x1\xFFFF\x2\x1F\x1\x16\x1\x19"+
				"\x1\x14\x1\x1F\x1\x1B\x1\x1D\x1\x18\x1\x1F\x1\x1E\x1\x1F\x1\x17\x2\x1F"+
				"\x1\x15\x1\x1F\x1\x1A\x1\x1C\x7\x1F\x1\x10\x1\x11\x1\x12\x1\x13\x21"+
				"\xFFFF\xFF5F\x1F",
				"\xA\x26\x7\xFFFF\x6\x26\x1A\xFFFF\x6\x26",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x22",
				"\x1\x28",
				"",
				"",
				"",
				"\x1\x2A\x3\xFFFF\x1\x2B\x2\xFFFF\x1\x2C",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2E",
				"\x1\x30\xA\xFFFF\x1\x31",
				"\x1\x34\x10\xFFFF\x1\x33\x3\xFFFF\x1\x32",
				"\x1\x35",
				"\x1\x36\x5\xFFFF\x1\x37",
				"\x1\x38",
				"\x1\x39",
				"\x1\x3A",
				"\x1\x3B",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x3D",
				"\x1\x3E",
				"",
				"\x1\x22\x1\xFFFF\xA\x22\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"",
				"",
				"",
				"\x1\x3F\x4\xFFFF\x1\x40",
				"",
				"",
				"",
				"",
				"",
				"\x1\x41\x1\x42",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x46",
				"",
				"",
				"",
				"",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x47",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F",
				"\x1\x1F\x2\xFFFF\xA\x1F\x7\xFFFF\x1A\x1F\x4\xFFFF\x1\x1F\x1\xFFFF\x1A"+
				"\x1F\x25\xFFFF\xFF5F\x1F"
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | UNIT | IDENT | STRING | NUM | COLOR | WS | COMMENT | LINE_COMMENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace SIL.PublishingSolution.Compiler
